{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UI5 Antares","text":"<p>The UI5 Antares is a custom SAPUI5 library comprising useful classes and methods, specifically designed to streamline the development process when working with OData V2 services.</p> <p>Info</p> <p>UI5 Antares is developed in TypeScript and is compatible with both SAPUI5 JavaScript and SAPUI5 TypeScript applications.</p> <p>Attention</p> <p>This library utilizes the classes and components of the SAPUI5 framework without modifying or copying the source code, which is licensed under the SAP Developer License. It is important to carefully review the SAP Developer License terms and conditions, as well as adhere to the restrictions set forth therein when using the UI5 Antares library.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>OData V2 metadata-based dialog and Simple Form - Smart Form generation for CRUD operations</li> <li>OData V2 metadata-based object page and Simple Form - Smart Form generation for CRUD operations</li> <li>Value Help Dialog generation</li> <li>User input validations/mandatory checks</li> <li>HTTP request handling for OData V2 CRUD operations</li> <li>Promisified OData V2 classes based on the sap.ui.model.odata.v2.ODataModel class</li> </ul>"},{"location":"#auto-generated-dialog","title":"Auto Generated Dialog","text":""},{"location":"#auto-generated-object-page","title":"Auto Generated Object Page","text":""},{"location":"#core-classes","title":"Core Classes","text":"<p>The UI5 Antares library offers a comprehensive set of core classes, as outlined below.</p> <ul> <li>Entry Create</li> <li>Entry Update</li> <li>Entry Delete</li> <li>Entry Read</li> <li>Value Help</li> <li>Fragment Class</li> <li>Promisified OData V2 Classes (OData Create, OData Update, OData Delete, OData Read)</li> </ul> <p>Please refer to the Planned Features section to learn about the features that will be included in the next releases.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js</li> <li>NPM</li> <li>UI5 Tooling (global or local)</li> </ul> <p>To make sure they are available on your machine, try running the following command.</p> <pre><code>npm -v &amp;&amp; node -v\n10.5.1\nv20.11.0\n</code></pre> Locally installed UI5 ToolingGlobally installed UI5 Tooling <pre><code>npx ui5 -v\n3.9.2\n</code></pre> <pre><code>ui5 -v\n3.9.2\n</code></pre>"},{"location":"#versioning","title":"Versioning","text":"<p>The UI5 Antares and SAPUI5 versions are directly related. The SAPUI5 version used can be determined by ignoring the last three digits of the UI5 Antares version. Please note that the last three digits of the UI5 Antares version increase sequentially after bug fixes or new features. </p> <p>Tip</p> <p>Please ensure that you install the version that corresponds to the version of your SAPUI5/Fiori Elements application.</p> <p>Info</p> <p>In the event that the patch component of the SAPUI5 version is 0, the UI5 Antares patch component will commence with 999, due to the fact that the NPM does not permit leading zeros in the version components.</p> <p>Example</p> <p>To illustrate, if the SAPUI5 version is 1.124.0, the UI5 Antares version will be 1.124.999001. The final three digits will be incremented with each bug fix or new feature.</p>"},{"location":"#examples","title":"Examples","text":"<p>Please refer to the examples of versioning below for further information.</p> <p>Note</p> <p>Please note that the versions shown in the example below may not be available.</p> UI5 Antares Version SAPUI5 Version Description 1.123.1002 1.123.1 The latest UI5 Antares version corresponding to the SAPUI5 1.123.1 version 1.123.1001 1.123.1 The previous UI5 Antares version corresponding to the SAPUI5 1.123.1 version 1.96.32001 1.96.32 The latest UI5 Antares version corresponding to the SAPUI5 1.96.32 version 1.84.999001 1.84.0 The latest UI5 Antares version corresponding to the SAPUI5 1.84.0 version"},{"location":"#supported-sapui5-versions","title":"Supported SAPUI5 Versions","text":"<p>The table below outlines the currently supported and planned SAPUI5 versions.</p> <p>Info</p> <p>Initially, UI5 Antares was released to support version 1.123.1. However, development will also be conducted for versions with long-term maintenance, as outlined in the SAPUI5 Version Overview</p> Latest UI5 Antares Version SAPUI5 Version Status 1.124.1003 1.124.1 Available 1.124.999006 1.124.0 Available 1.123.2003 1.123.2 Available 1.123.1004 1.123.1 Available 1.120.15003 1.120.15 Available 1.120.14003 1.120.14 Available 1.120.13003 1.120.13 Available 1.120.12003 1.120.12 Available 1.120.11003 1.120.11 Available 1.120.1014 1.120.1 Available 1.108.32003 1.108.32 Available 1.108.31003 1.108.31 Available 1.108.30003 1.108.30 Available 1.108.23003 1.108.23 Available 1.96.33003 1.96.33 Available 1.96.32003 1.96.32 Available 1.96.31003 1.96.31 Available 1.96.30003 1.96.30 Available 1.96.25004 1.96.25 Available 1.120.* 1.120.* Planned 1.108.* 1.108.* Planned 1.96.* &gt;1.96.25 Planned"},{"location":"#npm-package-tags","title":"NPM Package Tags","text":"<p>Should the versioning be unclear, a special tag can be used during the installation process. The most recent version of UI5 Antares that corresponds to a specific SAPUI5 version will always include the following tag.</p> <p>Tag Naming Convention: <code>ui5-${1}-${2}-${3}-latest</code></p> <ul> <li>${1} = The major component of the SAPUI5 version</li> <li>${2} = The minor component of the SAPUI5 version</li> <li>${3} = The patch component of the SAPUI5 version</li> </ul> <p>To illustrate, if your SAPUI5 application is version 1.124.0, you may wish to consider using the following command.</p> <pre><code>npm install --save-exact ui5-antares@ui5-1-124-0-latest\n</code></pre> <p>Tip</p> <p>The <code>--save-exact</code> argument ensures that no additional caret or tilde is added to the version in the package.json file.</p>"},{"location":"#installation","title":"Installation","text":"<p>Warning</p> <p>Prior to installation, please review the prerequisites and versioning information.</p> <p>To install the library, please run the following command in the directory where the package.json file of your SAPUI5/Fiori Elements application is located. This file is typically found in the root directory of a SAPUI5/Fiori Elements application.</p> <p>Tip</p> <p>In the command below, please replace <code>version</code> with the UI5 Antares version that corresponds to the version of your SAPUI5/Fiori Elements application. For example, applications running with SAPUI5 version 1.123.1 should run the following command: <code>npm install ui5-antares@1.123.1001</code> or <code>npm install ui5-antares@ui5-1-123-1-latest</code></p> <p>Note</p> <p>Please note that if you are using UI5 Tooling v3, there is no need to add ui5-antares to the <code>ui5.dependencies</code> in your application's package.json file.</p> <pre><code>npm install ui5-antares@version\n</code></pre> <p></p> <p>Add <code>\"ui5.antares\": {}</code> to the <code>\"sap.ui5\".\"dependencies\".\"libs\"</code> section of your application's manifest.json file.</p> manifest.json<pre><code>{\n  ...\n  \"sap.ui5\": {\n    ...\n    \"dependencies\": {\n      ...\n      \"libs\": {\n        \"sap.m\": {},\n        \"sap.ui.core\": {},\n        ...\n        \"ui5.antares\": {}\n      }\n    }\n  }\n}\n</code></pre> <p>Add <code>\"ui5.antares\": \"./resources/ui5/antares\"</code> to the <code>\"sap.ui5\".\"resourceRoots\"</code> section of your application's manifest.json file.</p> manifest.json<pre><code>{\n  ...\n  \"sap.ui5\": {\n    ...\n    \"resourceRoots\": {\n      \"ui5.antares\": \"./resources/ui5/antares\"\n    }\n  }\n}\n</code></pre> <p></p> <p>Add the <code>--all</code> argument to the <code>build</code> script in your application's package.json file. This argument guarantees that all dependencies are included in the application build.</p> package.json<pre><code>{\n  ...\n  \"scripts\": {\n    \"build\": \"ui5 build --all --config=ui5.yaml --clean-dest --dest dist\"\n  }\n}\n</code></pre> <p></p> <p>To ensure that UI5 Antares is included as a dependency in your application, please use the following command.</p> Locally installed UI5 ToolingGlobally installed UI5 Tooling <pre><code>npx ui5 tree\n</code></pre> <pre><code>ui5 tree\n</code></pre> <p></p> <p>In order to include dependencies in your application's deployment, you will need to add the <code>includeDependencies: true</code> flag to the configuration of the ui5-task-zipper task in your application's YAML file.</p> <p>Attention</p> <p>Please note that without this configuration, the UI5 Antares library files will not be included in the .zip file that will be deployed into the target system.</p> <p></p>"},{"location":"#typescript","title":"TypeScript","text":"<p>If you are developing your SAPUI5/Fiori Elements application with TypeScript, you must add \"./node_modules/ui5-antares\" to the <code>compilerOptions.typeRoots</code> array in your application's tsconfig.json file. This configuration is required to use type declarations of the UI5 Antares.</p> tsconfig.json<pre><code>{\n  \"compilerOptions\": {\n    \"typeRoots\": [\n      ...\n      \"./node_modules/ui5-antares\"\n    ]\n  }\n}\n</code></pre> <p></p>"},{"location":"#approuter","title":"Approuter","text":"<p>If you are deploying your application with a Standalone or Managed Approuter, please add the route below (first route) to your application's xs-app.json file.</p> <p>Warning</p> <p>Please note that the Standalone Approuter also has an xs-app.json file. However, this configuration should be carried out on the SAPUI5/Fiori Elements application's xs-app.json file, rather than on the Standalone Approuter's xs-app.json file.</p> <p>Please be advised that this route must be added before the route (automatically added by the application generator) with \"source\": \"^/resources/(.*)$\" and \"destination\": \"ui5\" properties in order to load the UI5 Antares from the HTML5 Application Repository instead of the UI5 CDN. </p> <p>The reason for this configuration is that both the standard UI5 libraries and UI5 Antares utilize the /resources path to load the files.</p> xs-app.json<pre><code>{\n  \"welcomeFile\": \"/index.html\",\n  \"authenticationMethod\": \"route\",\n  \"routes\": [\n    ...\n    {\n      \"source\": \"^/resources/ui5/antares/(.*)$\",\n      \"target\": \"/resources/ui5/antares/$1\",\n      \"service\": \"html5-apps-repo-rt\",\n      \"authenticationType\": \"xsuaa\"\n    },\n    {\n      \"source\": \"^/resources/(.*)$\",\n      \"target\": \"/resources/$1\",\n      \"authenticationType\": \"none\",\n      \"destination\": \"ui5\"\n    },\n    {\n      \"source\": \"^/test-resources/(.*)$\",\n      \"target\": \"/test-resources/$1\",\n      \"authenticationType\": \"none\",\n      \"destination\": \"ui5\"\n    },\n    {\n      \"source\": \"^(.*)$\",\n      \"target\": \"$1\",\n      \"service\": \"html5-apps-repo-rt\",\n      \"authenticationType\": \"xsuaa\"\n    }    \n  ]\n}\n</code></pre> <p></p>"},{"location":"#local-start","title":"Local Start","text":"<p>If you start your application with one of the following commands, UI5 Antares will be loaded automatically, as it is a dependency of your application.</p> <ul> <li>@ui5/cli</li> <li>@sap/ux-ui5-tooling</li> </ul> @ui5/cli@sap/ux-ui5-tooling <pre><code>ui5 serve\n</code></pre> <pre><code>fiori run\n</code></pre>"},{"location":"#known-issues","title":"Known Issues","text":"<p>If you load the standard UI5 library on the /resources path using the <code>fiori-tools-proxy</code> middleware of the @sap/ux-ui5-tooling package while starting your application as shown below, the UI5 Antares will not be loaded because it also uses the /resources path. </p> <p>Info</p> <p><code>fiori-tools-proxy</code> redirects all requests coming from the /resources path to the url defined in the <code>configuration.ui5.url</code> property.</p>"},{"location":"#solution-1","title":"Solution 1","text":"<p>Remove the <code>ui5</code> configuration from the YAML file that is used as the configuration file for the start script (<code>--config</code> argument of ui5 serve or fiori run command).</p> <p></p> <p>Modify the <code>src</code> attribute of the <code>sap-ui-bootstrap</code> script in your application's index.html file and load the standard UI5 library from the CDN.</p> <p></p> <p>Warning</p> <p>Please be advised that if you deploy your application to an ABAP repository, you will need to modify the <code>src</code> attribute to \"resources/sap-ui-core.js\". This is necessary because the server may not have internet access. This change will result in the standard UI5 library being loaded directly from the server instead of from the CDN.</p>"},{"location":"#solution-2","title":"Solution 2","text":"<p>Don't use the /resources path in the <code>ui5</code> configuration of <code>fiori-tools-proxy</code> on the YAML file that is used as the start script configuration file (<code>--config</code> argument of ui5 serve or fiori run command).</p> <p></p> <p>Modify the <code>src</code> attribute of the <code>sap-ui-bootstrap</code> script in your application's index.html file and load the standard UI5 library from the path which is defined in the YAML file.</p> <p></p> <p>Warning</p> <p>Do not forget to change the <code>src</code> attribute back to \"resources/sap-ui-core.js\" or \"https://sapui5.hana.ondemand.com/resources/sap-ui-core.js\" before deploying your application.</p>"},{"location":"#planned-features","title":"Planned Features","text":"<p>Please find below a list of features that are scheduled for inclusion in upcoming releases.</p> Feature Supported UI5 Antares Versions Scope Description Deep Create * Entry Create Creating a deep entity on the auto-generated dialog will be possible. When the cardinality is 1-1, the properties of the associated entity will be added into the auto-generated form in a different group. When the cardinality is 1-N, a table will be placed below the auto-generated form"},{"location":"#change-log","title":"Change Log","text":"<p>Please see Change Log.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache License 2.0 - see the LICENSE file for details.</p>"},{"location":"change_log/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog.</p>"},{"location":"change_log/#19631003-2024-08-14","title":"1.96.31003 - 2024-08-14","text":""},{"location":"change_log/#added","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#19630003-2024-08-14","title":"1.96.30003 - 2024-08-14","text":""},{"location":"change_log/#added_1","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_1","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_1","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#19625004-2024-08-14","title":"1.96.25004 - 2024-08-14","text":""},{"location":"change_log/#added_2","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_2","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_2","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#11231004-2024-08-11","title":"1.123.1004 - 2024-08-11","text":""},{"location":"change_log/#added_3","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_3","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_3","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#112015003-2024-08-11","title":"1.120.15003 - 2024-08-11","text":""},{"location":"change_log/#added_4","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_4","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_4","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#112014003-2024-08-11","title":"1.120.14003 - 2024-08-11","text":""},{"location":"change_log/#added_5","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_5","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_5","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#112013003-2024-08-11","title":"1.120.13003 - 2024-08-11","text":""},{"location":"change_log/#added_6","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_6","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_6","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#110832003-2024-08-11","title":"1.108.32003 - 2024-08-11","text":""},{"location":"change_log/#added_7","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_7","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_7","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#110831003-2024-08-11","title":"1.108.31003 - 2024-08-11","text":""},{"location":"change_log/#added_8","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_8","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_8","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#110830003-2024-08-11","title":"1.108.30003 - 2024-08-11","text":""},{"location":"change_log/#added_9","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_9","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_9","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#110823003-2024-08-11","title":"1.108.23003 - 2024-08-11","text":""},{"location":"change_log/#added_10","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_10","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_10","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#19633003-2024-08-11","title":"1.96.33003 - 2024-08-11","text":""},{"location":"change_log/#added_11","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_11","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_11","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#19632003-2024-08-11","title":"1.96.32003 - 2024-08-11","text":""},{"location":"change_log/#added_12","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_12","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_12","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#11241003-2024-08-10","title":"1.124.1003 - 2024-08-10","text":""},{"location":"change_log/#added_13","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_13","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_13","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#11232003-2024-08-10","title":"1.123.2003 - 2024-08-10","text":""},{"location":"change_log/#added_14","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_14","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_14","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#112012003-2024-08-09","title":"1.120.12003 - 2024-08-09","text":""},{"location":"change_log/#added_15","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_15","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_15","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#112011003-2024-08-09","title":"1.120.11003 - 2024-08-09","text":""},{"location":"change_log/#added_16","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#changed_16","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#fixed_16","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added.</li> </ul>"},{"location":"change_log/#11201014-2024-08-09","title":"1.120.1014 - 2024-08-09","text":""},{"location":"change_log/#changed_17","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#1124999006-2024-08-09","title":"1.124.999006 - 2024-08-09","text":""},{"location":"change_log/#changed_18","title":"Changed","text":"<ul> <li>The CHANGELOG.md file and the documentation in the README.md file have been moved to the UI5 Antares website.</li> </ul>"},{"location":"change_log/#11201013-2024-07-16","title":"1.120.1013 - 2024-07-16","text":""},{"location":"change_log/#added_17","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> </ul>"},{"location":"change_log/#1124999005-2024-07-16","title":"1.124.999005 - 2024-07-16","text":""},{"location":"change_log/#added_18","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed when the ValueHelpDialog is opened by ValueHelpCL class.</li> </ul>"},{"location":"change_log/#1124999004-2024-07-16","title":"1.124.999004 - 2024-07-16","text":""},{"location":"change_log/#added_19","title":"Added","text":"<ul> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> </ul>"},{"location":"change_log/#11201012-2024-07-16","title":"1.120.1012 - 2024-07-16","text":""},{"location":"change_log/#added_20","title":"Added","text":"<ul> <li>It is now possible to set initial filter values for standalone ValueHelpCL usages.</li> </ul>"},{"location":"change_log/#1124999003-2024-07-05","title":"1.124.999003 - 2024-07-05","text":""},{"location":"change_log/#added_21","title":"Added","text":"<ul> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#fixed_17","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> <li>The missing parameters of the resetChanges in Entry class have been added. </li> </ul>"},{"location":"change_log/#11201011-2024-07-04","title":"1.120.1011 - 2024-07-04","text":""},{"location":"change_log/#fixed_18","title":"Fixed","text":"<ul> <li>The missing parameters of the resetChanges in Entry class have been added. </li> </ul>"},{"location":"change_log/#11201010-2024-07-03","title":"1.120.1010 - 2024-07-03","text":""},{"location":"change_log/#fixed_19","title":"Fixed","text":"<ul> <li>The view dependent dialog bug fix for dialog loading in Entry classes.</li> </ul>"},{"location":"change_log/#11201009-2024-06-25","title":"1.120.1009 - 2024-06-25","text":""},{"location":"change_log/#added_22","title":"Added","text":"<ul> <li>It is now possible to attach a function that will be executed after the user selects a row from the ValueHelpDialog when the ValueHelpCL class is used as a standalone component.</li> </ul>"},{"location":"change_log/#11201008-2024-06-21","title":"1.120.1008 - 2024-06-21","text":""},{"location":"change_log/#fixed_20","title":"Fixed","text":"<ul> <li>The missing dialog types ViewSettingsDialog, TableSelectDialog, SelectDialog, BusyDialog, ValueHelpDialog have been added to the FragmentCL class.</li> </ul>"},{"location":"change_log/#11201007-2024-06-20","title":"1.120.1007 - 2024-06-20","text":""},{"location":"change_log/#added_23","title":"Added","text":"<ul> <li>It is now possible to set custom data for the auto-generated form elements using the setFieldCustomData() method of the Entry classes.</li> <li>It is now possible to set the <code>setTextInEditModeSource</code> property of the smartfield using the setTextInEditModeSource() method of the Entry classes.</li> </ul>"},{"location":"change_log/#11201006-2024-06-14","title":"1.120.1006 - 2024-06-14","text":""},{"location":"change_log/#added_24","title":"Added","text":"<ul> <li>It is now possible to disable auto close after the submit is done in EntryCreateCL and EntryUpdateCL classes. To close and destroy the dialog manually, the closeAndDestroyEntryDialog() method can be utilized.</li> </ul>"},{"location":"change_log/#fixed_21","title":"Fixed","text":"<ul> <li>The issue with label generation from the metadata for custom controls in the SMART form has been resolved. </li> </ul>"},{"location":"change_log/#11201005-2024-06-12","title":"1.120.1005 - 2024-06-12","text":""},{"location":"change_log/#added_25","title":"Added","text":"<ul> <li>setAutoDestroyOnESC() method has been added to the FragmentCL class. If this method is executed with true parameter, the dialog content will be destroyed automatically by the class.</li> </ul>"},{"location":"change_log/#11201004-2024-06-11","title":"1.120.1004 - 2024-06-11","text":""},{"location":"change_log/#added_26","title":"Added","text":"<ul> <li><code>viewDependent</code> parameter has been added to the openAsync() and open() methods of the FragmentCL class. If this parameter is set to true, dialog or popover is added as a dependent to the source view using the addDependent() method of the MVC View class.</li> <li>closeAndDestroy() method has been added to the FragmentCL class. With this method, it is no longer necessary to call close() and then destroyFragmentContent(). This method does both.</li> </ul>"},{"location":"change_log/#11241002-2024-06-11","title":"1.124.1002 - 2024-06-11","text":""},{"location":"change_log/#added_27","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_22","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#1124999002-2024-06-11","title":"1.124.999002 - 2024-06-11","text":""},{"location":"change_log/#added_28","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_23","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#11232002-2024-06-11","title":"1.123.2002 - 2024-06-11","text":""},{"location":"change_log/#added_29","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_24","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#11231003-2024-06-11","title":"1.123.1003 - 2024-06-11","text":""},{"location":"change_log/#added_30","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_25","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#112015002-2024-06-11","title":"1.120.15002 - 2024-06-11","text":""},{"location":"change_log/#added_31","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_26","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#112014002-2024-06-11","title":"1.120.14002 - 2024-06-11","text":""},{"location":"change_log/#added_32","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_27","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#112013002-2024-06-11","title":"1.120.13002 - 2024-06-11","text":""},{"location":"change_log/#added_33","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_28","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#112012002-2024-06-11","title":"1.120.12002 - 2024-06-11","text":""},{"location":"change_log/#added_34","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_29","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#112011002-2024-06-11","title":"1.120.11002 - 2024-06-11","text":""},{"location":"change_log/#added_35","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_30","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#11201003-2024-06-11","title":"1.120.1003 - 2024-06-11","text":""},{"location":"change_log/#added_36","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_31","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#110832002-2024-06-10","title":"1.108.32002 - 2024-06-10","text":""},{"location":"change_log/#added_37","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_32","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#110831002-2024-06-10","title":"1.108.31002 - 2024-06-10","text":""},{"location":"change_log/#added_38","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_33","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#110830002-2024-06-10","title":"1.108.30002 - 2024-06-10","text":""},{"location":"change_log/#added_39","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_34","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#110823002-2024-06-10","title":"1.108.23002 - 2024-06-10","text":""},{"location":"change_log/#added_40","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_35","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#19633002-2024-06-10","title":"1.96.33002 - 2024-06-10","text":""},{"location":"change_log/#added_41","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_36","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#19632002-2024-06-10","title":"1.96.32002 - 2024-06-10","text":""},{"location":"change_log/#added_42","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_37","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#19631002-2024-06-10","title":"1.96.31002 - 2024-06-10","text":""},{"location":"change_log/#added_43","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_38","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#19630002-2024-06-10","title":"1.96.30002 - 2024-06-10","text":""},{"location":"change_log/#added_44","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_39","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#19625003-2024-06-10","title":"1.96.25003 - 2024-06-10","text":""},{"location":"change_log/#added_45","title":"Added","text":"<ul> <li><code>filterCaseSensitive?</code> parameter added to the constructor of the ValueHelpCL to change the default value of case-sensitive search in the filterbar.</li> </ul>"},{"location":"change_log/#fixed_40","title":"Fixed","text":"<ul> <li>ValidationLogicCL bug fix for falsy values such as false, 0, \"\" in the <code>value1</code> and <code>value2</code> properties. </li> </ul>"},{"location":"change_log/#11241001-2024-06-09","title":"1.124.1001 - 2024-06-09","text":""},{"location":"change_log/#added_46","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#11232001-2024-06-09","title":"1.123.2001 - 2024-06-09","text":""},{"location":"change_log/#added_47","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#112015001-2024-06-09","title":"1.120.15001 - 2024-06-09","text":""},{"location":"change_log/#added_48","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#112014001-2024-06-09","title":"1.120.14001 - 2024-06-09","text":""},{"location":"change_log/#added_49","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#112013001-2024-06-09","title":"1.120.13001 - 2024-06-09","text":""},{"location":"change_log/#added_50","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#112012001-2024-06-09","title":"1.120.12001 - 2024-06-09","text":""},{"location":"change_log/#added_51","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#112011001-2024-06-09","title":"1.120.11001 - 2024-06-09","text":""},{"location":"change_log/#added_52","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#19633001-2024-06-09","title":"1.96.33001 - 2024-06-09","text":""},{"location":"change_log/#added_53","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#changed_19","title":"Changed","text":"<ul> <li>The sap.ui.model.odata.v2.Context class does not have the delete() method in the 1.96.33 SAPUI5 version. It is replaced with the remove() method of the sap.ui.model.odata.v2.ODataModel class. The EntryDeleteCL class still works the same. It is only a technical change.</li> </ul>"},{"location":"change_log/#removed","title":"Removed","text":"<ul> <li>sap.m.ColorPalettePopover is not supported by the FragmentCL class in this version.</li> </ul>"},{"location":"change_log/#19632001-2024-06-09","title":"1.96.32001 - 2024-06-09","text":""},{"location":"change_log/#added_54","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#changed_20","title":"Changed","text":"<ul> <li>The sap.ui.model.odata.v2.Context class does not have the delete() method in the 1.96.32 SAPUI5 version. It is replaced with the remove() method of the sap.ui.model.odata.v2.ODataModel class. The EntryDeleteCL class still works the same. It is only a technical change.</li> </ul>"},{"location":"change_log/#removed_1","title":"Removed","text":"<ul> <li>sap.m.ColorPalettePopover is not supported by the FragmentCL class in this version.</li> </ul>"},{"location":"change_log/#19631001-2024-06-09","title":"1.96.31001 - 2024-06-09","text":""},{"location":"change_log/#added_55","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#changed_21","title":"Changed","text":"<ul> <li>The sap.ui.model.odata.v2.Context class does not have the delete() method in the 1.96.31 SAPUI5 version. It is replaced with the remove() method of the sap.ui.model.odata.v2.ODataModel class. The EntryDeleteCL class still works the same. It is only a technical change.</li> </ul>"},{"location":"change_log/#removed_2","title":"Removed","text":"<ul> <li>sap.m.ColorPalettePopover is not supported by the FragmentCL class in this version.</li> </ul>"},{"location":"change_log/#19630001-2024-06-09","title":"1.96.30001 - 2024-06-09","text":""},{"location":"change_log/#added_56","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#changed_22","title":"Changed","text":"<ul> <li>The sap.ui.model.odata.v2.Context class does not have the delete() method in the 1.96.30 SAPUI5 version. It is replaced with the remove() method of the sap.ui.model.odata.v2.ODataModel class. The EntryDeleteCL class still works the same. It is only a technical change.</li> </ul>"},{"location":"change_log/#removed_3","title":"Removed","text":"<ul> <li>sap.m.ColorPalettePopover is not supported by the FragmentCL class in this version.</li> </ul>"},{"location":"change_log/#110832001-2024-06-09","title":"1.108.32001 - 2024-06-09","text":""},{"location":"change_log/#added_57","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#removed_4","title":"Removed","text":"<ul> <li>sap.m.ColorPalettePopover is not supported by the FragmentCL class in this version.</li> </ul>"},{"location":"change_log/#110831001-2024-06-09","title":"1.108.31001 - 2024-06-09","text":""},{"location":"change_log/#added_58","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#removed_5","title":"Removed","text":"<ul> <li>sap.m.ColorPalettePopover is not supported by the FragmentCL class in this version.</li> </ul>"},{"location":"change_log/#1124999001-2024-06-09","title":"1.124.999001 - 2024-06-09","text":""},{"location":"change_log/#added_59","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#110830001-2024-06-08","title":"1.108.30001 - 2024-06-08","text":""},{"location":"change_log/#added_60","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#removed_6","title":"Removed","text":"<ul> <li>sap.m.ColorPalettePopover is not supported by the FragmentCL class in this version.</li> </ul>"},{"location":"change_log/#110823001-2024-06-08","title":"1.108.23001 - 2024-06-08","text":""},{"location":"change_log/#added_61","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#removed_7","title":"Removed","text":"<ul> <li>sap.m.ColorPalettePopover is not supported by the FragmentCL class in this version.</li> </ul>"},{"location":"change_log/#19625002-2024-06-07","title":"1.96.25002 - 2024-06-07","text":""},{"location":"change_log/#added_62","title":"Added","text":"<ul> <li>Form Grouping Feature: It is now possible to have form groups in the generated form. Additionally, form groups are used as the sections of the sap.uxap.ObjectPageLayout when the object page is activated.</li> <li>Object Page Feature: It is now possible to decide to use either sap.m.Dialog or sap.uxap.ObjectPageLayout for Entry classes. </li> <li>Manual Submit Feature: It is now possible to submit the changes manually. The default behavior is still auto-submit by the library.</li> </ul>"},{"location":"change_log/#changed_23","title":"Changed","text":"<ul> <li>The auto-generated sap.m.Dialog now is draggable and resizable.</li> </ul>"},{"location":"change_log/#11201002-2024-06-07","title":"1.120.1002 - 2024-06-07","text":""},{"location":"change_log/#added_63","title":"Added","text":"<ul> <li>Form Grouping Feature: It is now possible to have form groups in the generated form. Additionally, form groups are used as the sections of the sap.uxap.ObjectPageLayout when the object page is activated.</li> <li>Object Page Feature: It is now possible to decide to use either sap.m.Dialog or sap.uxap.ObjectPageLayout for Entry classes. </li> <li>Manual Submit Feature: It is now possible to submit the changes manually. The default behavior is still auto-submit by the library.</li> </ul>"},{"location":"change_log/#changed_24","title":"Changed","text":"<ul> <li>The auto-generated sap.m.Dialog now is draggable and resizable.</li> </ul>"},{"location":"change_log/#11231002-2024-06-07","title":"1.123.1002 - 2024-06-07","text":""},{"location":"change_log/#added_64","title":"Added","text":"<ul> <li>Form Grouping Feature: It is now possible to have form groups in the generated form. Additionally, form groups are used as the sections of the sap.uxap.ObjectPageLayout when the object page is activated.</li> <li>Object Page Feature: It is now possible to decide to use either sap.m.Dialog or sap.uxap.ObjectPageLayout for Entry classes. </li> <li>Manual Submit Feature: It is now possible to submit the changes manually. The default behavior is still auto-submit by the library.</li> </ul>"},{"location":"change_log/#changed_25","title":"Changed","text":"<ul> <li>The auto-generated sap.m.Dialog now is draggable and resizable.</li> </ul>"},{"location":"change_log/#11201001-2024-05-30","title":"1.120.1001 - 2024-05-30","text":""},{"location":"change_log/#added_65","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#19625001-2024-05-30","title":"1.96.25001 - 2024-05-30","text":""},{"location":"change_log/#added_66","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#changed_26","title":"Changed","text":"<ul> <li>The sap.ui.model.odata.v2.Context class does not have the delete() method in the 1.96.25 SAPUI5 version. It is replaced with the remove() method of the sap.ui.model.odata.v2.ODataModel class. The EntryDeleteCL class still works the same. It is only a technical change.</li> </ul>"},{"location":"change_log/#removed_8","title":"Removed","text":"<ul> <li>sap.m.ColorPalettePopover is not supported by the FragmentCL class in this version.</li> </ul>"},{"location":"change_log/#11231001-2024-05-30","title":"1.123.1001 - 2024-05-30","text":""},{"location":"change_log/#added_67","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"entry_create/","title":"Entry Create","text":"<p>The EntryCreateCL class is responsible for managing the CREATE (POST) operation through the OData V2 model. This class eliminates the need for developers to concern themselves with fragments, user input validations, and value help creation when working on custom SAPUI5 applications or Fiori Elements extensions. The following section outlines the key features of the Entry Create class.</p>"},{"location":"entry_create/#features","title":"Features","text":"<ul> <li>sap.m.Dialog generation with a SmartForm, SimpleForm, or custom content</li> <li>sap.uxap.ObjectPageLayout generation with a SmartForm, SimpleForm, or custom content</li> <li>User input validation via the ValidationLogicCL class</li> <li>Value Help Dialog generation via the ValueHelpCL class</li> <li>Property sorting, readonly properties, UUID generation for the properties with <code>Edm.Guid</code> type</li> <li>Label generation for the SmartForm, SimpleForm elements</li> <li>createEntry(), submitChanges(), and resetChanges() handling based on the user interaction</li> <li>Call a fragment and bind the context in case you do not want to use the auto-generated dialog</li> </ul> <p>Info</p> <p>While the examples of the features on this page are based on the Entry Create class, the majority of the features are also available in the Entry Update, Entry Delete, and Entry Read classes. </p>"},{"location":"entry_create/#use-case","title":"Use Case","text":"<p>Let's assume you have an <code>EntitySet</code> named Products and wish to provide your end-user with the capability to create a new entity via a pop-up screen using the OData V2 service in your custom SAPUI5 application. The following steps are required to achieve this functionality.</p> <p>1) It is necessary to create a .fragment.xml file that contains a dialog with form content (Simple, Smart, etc.) and to call it from the controller or to generate the dialog directly on the controller.</p> <p>2) If you do not use the sap.ui.comp.smartfield.SmartField component with the OData Annotations, you will need to write a significant amount of Value Help code.</p> <p>3) It is essential to validate user input, such as checking mandatory fields and ensuring that the values entered align with your business logic.</p> <p>4) It is necessary to create a transient entity (createEntry) and either submit it or reset it based on the user interaction.</p> <p>The EntryCreateCL class is responsible for executing all of the steps mentioned above.</p>"},{"location":"entry_create/#constructor","title":"Constructor","text":"<p>In order to utilise the functionality of EntryCreateCL, it is necessary to initialise the object.</p> Parameter Type Mandatory Default Value Description controller sap.ui.core.mvc.Controller Yes The controller object (usually <code>this</code> object) entityPath <code>string</code> Yes The name of the EntitySet. It can start with a \"/\" (slash) modelName? <code>string</code> No <code>undefined</code> The name of the OData V2 model which can be found on the manifest.json file. Leave this parameter undefined if the name of the OData model = \"\" (empty string) <p>Tip for TypeScript</p> <p>The EntryCreateCL&lt;EntityT&gt; class is a generic class that can be initialized with a type that contains the properties of the EntitySet used as a parameter on the class constructor. The <code>EntityT</code> type is used as the <code>data?</code> parameter type for the createNewEntry(data?: EntityT) method.    </p> <p>Additionally, it is utilized as the return type of the getResponse(): EntityT method of the <code>ResponseCL</code> class, whose object is passed as a parameter into the function attached by the attachSubmitCompleted(submitCompleted: (response: ResponseCL&lt;EntityT&gt;) =&gt; void, listener?: object) method.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n* @namespace your.apps.namespace\n*/\nexport default class YourController extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        // Initialize without a type\n        const entry = new EntryCreateCL(this, \"Products\"); \n    }\n\n    public async onCreateCategory() {\n        // Initialize with a type\n        const entry = new EntryCreateCL&lt;ICategory&gt;(this, \"Categories\"); \n    }\n\n    public async onCreateCustomer() {\n        // Initialize with a model name\n        const entry = new EntryCreateCL(this, \"Customers\", \"myODataModelName\"); \n    }\n}\n\ninterface ICategory {\n    ID: string;\n    name?: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n    * @param {typeof sap.ui.core.mvc.Controller} Controller\n    */\n    function (Controller, EntryCreateCL) {\n        \"use strict\";\n\n        return Controller.extend(\"your.apps.namespace.YourController\", {\n            onInit: function () {\n\n            },\n\n            onCreateProduct: async function () {\n                // Initialize\n                const entry = new EntryCreateCL(this, \"Products\"); \n            },\n\n            onCreateCategory: async function () {\n                // Initialize with a model name\n                const entry = new EntryCreateCL(this, \"Categories\", \"myODataModelName\");\n            }\n        });\n\n    });\n</code></pre>"},{"location":"entry_create/#create-new-entry","title":"Create New Entry","text":"<p>The createNewEntry(data?: EntityT) method creates an entry for the <code>EntitySet</code> specified through the class constructor and binds it to the automatically generated or loaded dialog, which is located in the application files. The createEntry() method from the SAPUI5 library is utilized to create an entry, and the dialog is then opened after the entry is created.</p> <p>The createNewEntry() method utilizes the ODataMetaModel to determine the <code>EntityType</code> of the <code>EntitySet</code> designated through the constructor. It then generates the form with the properties in the same order as the OData metadata, in accordance with the <code>EntityType</code>.</p> <p>Note</p> <p>Please note that all key properties are marked as mandatory/required, and the labels are generated assuming that the naming convention of the <code>EntityType</code> is camelCase. For further details, please see the Label Generation section.</p> <p>Warning</p> <p>Please be advised that the createNewEntry() method must be called after any configurations have been made through the public methods of the Entry Create class. Any configurations (form title, mandatory properties, etc.) made after the createNewEntry() method will not be reflected. As a best practice, the createNewEntry() method should be called at the end of your code block.</p> <p>Note</p> <p>The default setting for key properties with the <code>Edm.Guid</code> type is to generate a random UUID value, which is not visible on the generated form. However, this behavior can be modified using the setGenerateRandomGuid() and setDisplayGuidProperties() methods.</p>"},{"location":"entry_create/#method-parameters","title":"Method Parameters","text":"Parameter Type Mandatory Default Value Description data? <code>EntityT</code> or <code>object</code> No <code>undefined</code> The initial values of the entry Returns Description <code>Promise&lt;void&gt;</code> Once the promise has been fulfilled, the newly created entry can be retrieved using the getEntryContext() method with the object instantiated from the EntryCreateCL class. <p>Info</p> <p>The createNewEntry() method utilizes the default configurations when creating the dialog. However, these configurations can be modified through the use of the public setter methods.</p>"},{"location":"entry_create/#default-values","title":"Default Values","text":"Term Default Value Description Setter Getter Naming Strategy NamingStrategies.CAMEL_CASE The default naming strategy is CAMEL_CASE setNamingStrategy() getNamingStrategy() Resource Bundle Prefix <code>antares</code> The default resource bundle prefix is antares setResourceBundlePrefix() getResourceBundlePrefix() Use Metadata Labels <code>false</code> The labels are not derived from the metadata, but rather generated. setUseMetadataLabels() getUseMetadataLabels() Form Type FormTypes.SMART The SmartForm with SmartFields is generated as the default option. setFormType() getFormType() Form Title <code>Create New + ${entityPath}</code> The <code>entityPath</code> parameter of the constructor is used setFormTitle() getFormTitle() Begin Button Text <code>Create</code> The default begin button text is Create setBeginButtonText() getBeginButtonText() Begin Button Type ButtonType.Success The default button type is Success setBeginButtonType() getBeginButtonType() End Button Text <code>Close</code> The default end button text is Close setEndButtonText() getEndButtonText() End Button Type ButtonType.Negative The default button type is Negative setEndButtonType() getEndButtonType() Mandatory Error Message <code>Please fill in all required fields.</code> The displayed message when the mandatory check is unsuccessful setMandatoryErrorMessage() getMandatoryErrorMessage() <p>Example</p> <p>Let's assume you have an EntitySet named Products and wish to provide your end-user with the capability to create a new entity via a pop-up screen using the OData V2 service in your custom SAPUI5 application.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    // Initialize without a type\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Call without the initial values\n    entry.createNewEntry(); \n  }\n\n  public async onCreateCategory() {\n    // Initialize with a type\n    const entry = new EntryCreateCL&lt;ICategory&gt;(this, \"Categories\"); \n\n    // Call with the initial values\n    entry.createNewEntry({\n      ID: \"ELEC\",\n      name: \"Electronics\"\n    });\n  }\n}\n\ninterface ICategory {\n  ID: string;\n  name?: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // Initialize\n          const entry = new EntryCreateCL(this, \"Products\"); \n\n          // Call without the initial values\n          entry.createNewEntry();\n        },\n\n        onCreateCategory: async function () {\n          // Initialize\n          const entry = new EntryCreateCL(this, \"Categories\"); \n\n          // Call with the initial values\n          entry.createNewEntry({\n            ID: \"ELEC\",\n            name: \"Electronics\"\n          });\n        }\n      });\n\n    });\n</code></pre> <p>The generated form with default values will be similar in appearance to the following example. However, it should be noted that the exact appearance may vary depending on the configurations and the <code>EntityType</code> properties of the <code>EntitySet</code>.</p> <p></p>"},{"location":"entry_create/#manual-submit","title":"Manual Submit","text":"<p>As a default setting, any changes made by the end user on the auto-generated form will be automatically submitted by the Entry Create and Entry Update classes upon pressing the begin button. There may be a necessity, however, to run some code prior to submitting the changes via the OData V2 model.</p> <p>It is possible to register a function that will be called in replacement of the automatic submit mechanism when the end user presses the begin button.</p> <p>Attention</p> <ul> <li>Please be advised that the manual submit feature is only available for the Entry Create and Entry Update classes.</li> <li>Please be advised that this feature cannot be used in conjunction with the Object Page feature.</li> </ul> <p>To register a function, the registerManualSubmit() method can be used. Upon pressing the begin button, the registered function will be called, and an object constructed from the Entry Create or Entry Update class will be passed as a parameter to the function.</p> <p>Once you have run your own code in the registered function, please call the submitManually() method using the object passed as a parameter to the function in order to complete the process.</p> <p>Furthermore, the auto-generated dialog (sap.m.Dialog) can be obtained by calling the getGeneratedDialog() method with the object passed as a parameter to the function.</p> Setter (registerManualSubmit)Getter (getGeneratedDialog) <p> Parameter Type Mandatory Description submitter <code>(entry: EntryCreateCL&lt;EntityT&gt; | EntryUpdateCL&lt;EntityT&gt;) =&gt; void</code> Yes The function that will be called when the user presses the begin button </p> <p> Returns Description sap.m.Dialog Returns the auto-generated dialog </p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products. Before submitting the changes through the OData V2 model, we would like to run some code.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport EntryUpdateCL from \"ui5/antares/entry/v2/EntryUpdateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public onCreateProduct() {\n    // initialize\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // register the submitter function\n    entry.registerManualSubmit(this.createProductManually, this);\n\n    // call the dialog\n    entry.createNewEntry();\n  }\n\n  // use the same generic type with the constructor in onCreateProduct method\n  private async createProductManually(entry: EntryCreateCL&lt;IProducts&gt;) {\n    // obtain the generated dialog\n    const dialog = entry.getGeneratedDialog();\n\n    dialog.getContent().forEach((content) =&gt; {\n      // here you can access each element of the dialog\n    });\n\n    // run your own code (can also be async)\n\n    // do not forget to complete the submit process\n    entry.submitManually();\n  }\n\n  public async onUpdateProduct() {\n    // Initialize with a type and use the table id as the initializer\n    const entry = new EntryUpdateCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\" // table id\n    });\n\n    // register the submitter function\n    entry.registerManualSubmit(this.updateProductManually, this);\n\n    // call the dialog\n    entry.updateEntry();    \n  }\n\n  // use the same generic type with the constructor in onUpdateProduct method\n  private async updateProductManually(entry: EntryUpdateCL&lt;IProducts&gt;) {\n    // obtain the generated dialog\n    const dialog = entry.getGeneratedDialog();\n\n    dialog.getContent().forEach((content) =&gt; {\n      // here you can access each element of the dialog\n    });\n\n    // run your own code (can also be async)\n\n    // do not forget to complete the submit process\n    entry.submitManually();    \n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/entry/v2/EntryUpdateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, EntryUpdateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // initialize\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // register the submitter function\n          entry.registerManualSubmit(this._createProductManually, this);\n\n          // call the dialog\n          entry.createNewEntry(); \n        },\n\n        _createProductManually: async function (entry) {\n          // obtain the generated dialog\n          const dialog = entry.getGeneratedDialog();\n\n          dialog.getContent().forEach((content) =&gt; {\n            // here you can access each element of the dialog\n          });\n\n          // run your own code (can also be async)\n\n          // do not forget to complete the submit process\n          entry.submitManually();          \n        },\n\n        onUpdateProduct: async function () {\n          // Initialize and use the table id as the initializer\n          const entry = new EntryUpdateCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\" // table id\n          });\n\n          // register the submitter function\n          entry.registerManualSubmit(this._updateProductManually, this);\n\n          // call the dialog\n          entry.updateEntry();      \n        },\n\n        _updateProductManually: async function (entry) {\n          // obtain the generated dialog\n          const dialog = entry.getGeneratedDialog();\n\n          dialog.getContent().forEach((content) =&gt; {\n            // here you can access each element of the dialog\n          });\n\n          // run your own code (can also be async)\n\n          // do not forget to complete the submit process\n          entry.submitManually();    \n        }\n\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#disable-auto-dialog-close","title":"Disable Auto Dialog Close","text":"<p>The generated dialog is closed and destroyed after the submission is completed by default in the Entry Create and Entry Update classes. However, this auto-close feature can be disabled if you still need to access the dialog content after the submission. This feature is particularly useful when there are custom contents that will be managed after the submission is completed.</p> <p>Tip</p> <p>To close and destroy the dialog afterwards, the closeAndDestroyEntryDialog() method can be utilized through the object instantiated from the Entry Create or Entry Update class.</p> <p>To disable the auto close feature, the setDisableAutoClose() method can be utilized.</p> Setter (setDisableAutoClose)Getter (getDisableAutoClose) <p> Parameter Type Mandatory Description disable <code>boolean</code> Yes When this parameter is set to true, the auto close feature will be disabled </p> <p> Returns Description <code>boolean</code> Returns the value that was set using setDisableAutoClose() method. Default value is false </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport ResponseCL from \"ui5/antares/entry/v2/ResponseCL\"; // Import the response class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  private productEntry: EntryCreateCL&lt;IProducts&gt;;\n\n  public onInit() {\n\n  }\n\n  public onCreateProduct() {\n    // initialize and set to the class property\n    this.productEntry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // disable auto close\n    this.productEntry.setDisableAutoClose(true);\n\n    // attach submit completed\n    this.productEntry.attachSubmitCompleted(this.onCreateCompleted, this);\n\n    // call the dialog\n    this.productEntry.createNewEntry();\n  }\n\n  private onCreateCompleted(response: ResponseCL&lt;IProducts&gt;) {\n    // do your logic here \n\n    // do not forget to close and destroy\n    this.productEntry.closeAndDestroyEntryDialog();\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // initialize and set to the class property\n          this.productEntry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n          // disable auto close\n          this.productEntry.setDisableAutoClose(true);\n\n          // attach submit completed\n          this.productEntry.attachSubmitCompleted(this._onCreateCompleted, this);\n\n          // call the dialog\n          this.productEntry.createNewEntry();\n        },\n\n        _onCreateCompleted: function (response) {\n          // do your logic here \n\n          // do not forget to close and destroy\n          this.productEntry.closeAndDestroyEntryDialog();\n        }\n\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#label-generation","title":"Label Generation","text":"<p>The Entry Create class is designed to generate labels for form elements within the auto-generated SmartForm/SimpleForm, as the default setting. The following steps will be followed during the creation of the labels.</p> <p>Note</p> <p>In the event that the metadata labels are not utilized when creating the labels, the Resource Model will take precedence.</p>"},{"location":"entry_create/#resource-model-i18n","title":"Resource Model (i18n)","text":"<p>In the event that the application in question has a Resource Model named <code>i18n</code> within its manifest.json file, the Entry Create class will search for the texts associated with each property of the EntityType, operating under the assumption that the key of the i18n text is written in the format outlined below.</p> <p>Info</p> <p>Default format of the i18n keys: antares + entityPath + propertyName</p> <p>In this context, <code>antares</code> is the default prefix, which can be modified using the setResourceBundlePrefix() method. The <code>entityPath</code> is derived from the class constructor, while the <code>propertyName</code> represents the technical name of an <code>EntityType</code> property in the OData V2 metadata.</p> manifest.json<pre><code>{\n  \"_version\": \"1.59.0\",\n  \"sap.app\": {\n    ...\n    \"i18n\": \"path/to/i18n.properties\"\n  },\n  ...\n  \"sap.ui5\": {\n    ...\n    \"models\": {\n      \"i18n\": {\n          \"type\": \"sap.ui.model.resource.ResourceModel\",\n          \"settings\": {\n              \"bundleName\": \"your.apps.namespace.i18n.i18n\"\n          }\n      }      \n    }\n  }\n}\n</code></pre> <p>Example</p> <p>If you have an <code>EntitySet</code> named Products with the properties shown in the metadata below, your application's <code>i18n.properties</code> file will be checked for the following keys.</p> i18n.properties<pre><code>antaresProductsID=Label of the ID property\nantaresProductsname=Label of the name property\nantaresProductsdescription=Label of the description property\n...\n</code></pre> $metadata.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;edmx:Edmx Version=\"1.0\" xmlns:edmx=\"http://schemas.microsoft.com/ado/2007/06/edmx\" xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\"&gt;\n    &lt;edmx:DataServices m:DataServiceVersion=\"2.0\"&gt;\n        &lt;Schema Namespace=\"OnlineShopping\" xmlns=\"http://schemas.microsoft.com/ado/2008/09/edm\"&gt;\n            &lt;EntityContainer Name=\"EntityContainer\" m:IsDefaultEntityContainer=\"true\"&gt;\n                &lt;EntitySet Name=\"Products\" EntityType=\"OnlineShopping.Product\"/&gt;\n            &lt;/EntityContainer&gt;\n            &lt;EntityType Name=\"Product\"&gt;\n                &lt;Key&gt;\n                    &lt;PropertyRef Name=\"ID\"/&gt;\n                &lt;/Key&gt;\n                &lt;Property Name=\"ID\" Type=\"Edm.Guid\" Nullable=\"false\"/&gt;\n                &lt;Property Name=\"name\" Type=\"Edm.String\" MaxLength=\"50\"/&gt;\n                &lt;Property Name=\"description\" Type=\"Edm.String\" MaxLength=\"255\"/&gt;\n                &lt;Property Name=\"brand\" Type=\"Edm.String\" MaxLength=\"50\"/&gt;\n                &lt;Property Name=\"price\" Type=\"Edm.Decimal\" Precision=\"13\" Scale=\"2\" Nullable=\"false\"/&gt;\n                &lt;Property Name=\"currency\" Type=\"Edm.String\" MaxLength=\"5\" Nullable=\"false\"/&gt;\n                &lt;Property Name=\"quantityInStock\" Type=\"Edm.Int32\"/&gt;\n                &lt;Property Name=\"categoryID\" Type=\"Edm.Guid\" Nullable=\"false\"/&gt;\n                &lt;Property Name=\"supplierID\" Type=\"Edm.Guid\" Nullable=\"false\"/&gt;\n            &lt;/EntityType&gt;\n        &lt;/Schema&gt;\n    &lt;/edmx:DataServices&gt;\n&lt;/edmx:Edmx&gt;\n</code></pre> <p>Info</p> <p>In the event that the Resource Model is unavailable or the text is not present in the <code>i18n.properties</code> file, the Label Generation From The Technical Names process will be initiated.</p>"},{"location":"entry_create/#label-generation-from-the-technical-names","title":"Label Generation From The Technical Names","text":"<p>In the event that a label cannot be generated from the Resource Model, the Entry Create class attempts to parse the technical property names of the <code>EntityType</code> into human-readable words.</p> <p>The default assumption is that the naming convention for <code>EntityType</code> properties is camelCase. However, if a different naming convention was used when creating these properties, setNamingStrategy() can be used to change the default naming convention.</p> <p>Example</p> <p>The following examples illustrate the breakdown of property names into human-readable words in various naming strategies.</p> camelCasePascalCasekebab-caseCONSTANT_CASEsnake_case <p> Technical Name Generated Label productID Product ID firstName First Name lastName Last Name </p> <p>Note: Uid, Id and Url words are accepted as special words and converted to upper case after splitting.</p> <p> Technical Name Generated Label ProductId Product ID FirstName First Name LastName Last Name </p> <p> Technical Name Generated Label product-id Product Id first-name First Name last-name Last Name </p> <p> Technical Name Generated Label PRODUCT_ID Product Id FIRST_NAME First Name LAST_NAME Last Name </p> <p> Technical Name Generated Label product_id Product Id first_name First Name last_name Last Name </p>"},{"location":"entry_create/#use-metadata-labels","title":"Use Metadata Labels","text":"<p>If you have a com.sap.vocabularies.Common.v1.Label annotation or a sap:label extension for your <code>EntityType</code> properties in the OData V2 metadata, you can utilize them as labels for the auto-generated form elements.</p> <p>Warning</p> <p>If the value is set to true using the setter method and the labels are not found in the metadata, the Entry Create class will generate the labels in accordance with the instructions set out in the Label Generation section.</p> Setter (setUseMetadataLabels)Getter (getUseMetadataLabels) <p> Parameter Type Mandatory Description useMetadataLabels <code>boolean</code> Yes If the value is true, the OData V2 metadata labels will be used when creating labels for the auto-generated form elements </p> <p> Returns Description <code>boolean</code> Returns the value that was set using setUseMetadataLabels() method. Default value is false </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // The OData V2 metadata labels will be used for the form elements.\n    entry.setUseMetadataLabels(true);\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // The OData V2 metadata labels will be used for the form elements.\n          entry.setUseMetadataLabels(true);\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#resource-bundle-prefix","title":"Resource Bundle Prefix","text":"<p>To modify the default resource bundle prefix utilized in the text lookup process outlined in the Resource Model (i18n), the setResourceBundlePrefix() method can be utilized.</p> <p>Tip</p> <p>If you do not wish to utilize a prefix, it is recommended that you pass an empty string, represented by <code>\"\"</code>, as a parameter to the setResourceBundlePrefix() method.</p> Setter (setResourceBundlePrefix)Getter (getResourceBundlePrefix) <p> Parameter Type Mandatory Description prefix <code>string</code> Yes The prefix that is used for text lookup in the i18n file of the application </p> <p> Returns Description <code>string</code> Returns the value that was set using setResourceBundlePrefix() method. Default value is antares </p> <p>Example</p> <p>Let us assume that you have created an <code>EntitySet</code> named Products, which contains the following properties: <code>productID</code> and <code>productName</code>. If you have set the resource bundle prefix to <code>myPrefix</code>, the Entry Create class will search for the following texts in the application's i18n file:</p> i18n.properties<pre><code>myPrefixProductsproductID=Label of the productID property\nmyPrefixProductsproductName=Label of the productName property\n</code></pre> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // New i18n text lookup format will be =&gt; myPrefix + entityPath + propertyName\n    entry.setResourceBundlePrefix(\"myPrefix\");\n\n    entry.createNewEntry(); \n  }\n\n  public async onCreateCategory() {\n    const entry = new EntryCreateCL(this, \"Categories\");\n\n    // New i18n text lookup format will be =&gt; entityPath + propertyName\n    entry.setResourceBundlePrefix(\"\");\n\n    entry.createNewEntry();\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // New i18n text lookup format will be =&gt; myPrefix + entityPath + propertyName\n          entry.setResourceBundlePrefix(\"myPrefix\");\n\n          entry.createNewEntry(); \n        },\n\n        onCreateCategory: async function () {\n          const entry = new EntryCreateCL(this, \"Categories\");\n\n          // New i18n text lookup format will be =&gt; entityPath + propertyName\n          entry.setResourceBundlePrefix(\"\");\n\n          entry.createNewEntry();          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#naming-strategy","title":"Naming Strategy","text":"<p>To modify the default naming strategy employed during label generation, as outlined in the Label Generation From The Technical Names documentation, the setNamingStrategy() method can be utilized.</p> Setter (setNamingStrategy)Getter (getNamingStrategy) <p> Parameter Type Mandatory Description strategy NamingStrategies Yes The naming strategy that is used for label generation </p> <p> Returns Description NamingStrategies Returns the value that was set using setNamingStrategy() method. Default value is CAMEL_CASE </p> <p>Example</p> <p>Let us consider the following scenario: You have an <code>EntitySet</code> named Products with the properties <code>product_id</code> and <code>product_name</code>. You have opted not to utilize the labels from the metadata or the i18n file. Instead, you would like the library to generate the labels. To achieve this, you can set the naming strategy as follows:</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport { NamingStrategies } from \"ui5/antares/types/entry/enums\"; // Import the enum\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the naming strategy to snake_case\n    entry.setNamingStrategy(NamingStrategies.SNAKE_CASE);\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/types/entry/enums\" // Import the enums\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, EntryEnums) {\n      \"use strict\";\n\n      // Destructure the object to retrieve the NamingStrategies enum\n      const { NamingStrategies } = EntryEnums;\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the naming strategy to snake_case\n          entry.setNamingStrategy(NamingStrategies.SNAKE_CASE);\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#namingstrategies-enum","title":"NamingStrategies Enum","text":"Name Description NamingStrategies.CAMEL_CASE <code>EntityType</code> properties use camelCase naming convention NamingStrategies.PASCAL_CASE <code>EntityType</code> properties use PascalCase naming convention NamingStrategies.KEBAB_CASE <code>EntityType</code> properties use kebab-case naming convention NamingStrategies.CONSTANT_CASE <code>EntityType</code> properties use CONSTANT_CASE naming convention NamingStrategies.SNAKE_CASE <code>EntityType</code> properties use snake_case naming convention"},{"location":"entry_create/#form-type","title":"Form Type","text":"<p>The createNewEntry() method automatically generates a sap.ui.comp.smartform.SmartForm with sap.ui.comp.smartfield.SmartField content. This form type offers several advantages.</p> <p>1) The form fields are rendered as Input, DatePicker, DateTimePicker, ComboBox, CheckBox, and so on, based on the EDM type of the <code>EntityType</code> property.</p> <p>2) When the <code>EntityType</code> property is annotated with com.sap.vocabularies.Common.v1.ValueList, the Value Help List is automatically added to the smart fields.</p> <p>The UI5 Antares is capable of creating a sap.ui.layout.form.SimpleForm with sap.m.Input, sap.m.DatePicker, sap.m.DateTimePicker, and sap.m.CheckBox content based on the EDM types.</p> <p>Attention</p> <p>The Value Help class is only available when the form type is set to SIMPLE.</p> <p>Rendered Controls for SIMPLE Form Type</p> EDM Type Control Description <code>Boolean</code> sap.m.CheckBox <code>DateTime</code> sap.m.DatePicker or          sap.m.DateTimePicker If the property has sap:display-format=\"Date\" extension, it is rendered as          sap.m.DatePicker,          otherwise as sap.m.DateTimePicker <code>DateTimeOffset</code> sap.m.DateTimePicker <code>Others</code> sap.m.Input If the EDM type of the property is Edm.Decimal, precision and scale constraints are added into the input <p>To modify the default form type, the setFormType() method can be utilized.</p> Setter (setFormType)Getter (getFormType) <p> Parameter Type Mandatory Description formType FormTypes Yes The form type that is generated </p> <p> Returns Description FormTypes Returns the value that was set using setFormType() method. Default value is SMART </p> <p>Example</p> <p>If you have an <code>EntitySet</code> named Products and wish to create a simple form within the dialog, you can set the form type as follows.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport { FormTypes } from \"ui5/antares/types/entry/enums\"; // Import the enum\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the form type to SIMPLE\n    entry.setFormType(FormTypes.SIMPLE);\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/types/entry/enums\" // Import the enums\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, EntryEnums) {\n      \"use strict\";\n\n      // Destructure the object to retrieve the FormTypes enum\n      const { FormTypes } = EntryEnums;\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the form type to SIMPLE\n          entry.setFormType(FormTypes.SIMPLE);\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#formtypes-enum","title":"FormTypes Enum","text":"Name Description FormTypes.SMART SmartForm with SmartField content is generated FormTypes.SIMPLE SimpleForm with Input, DatePicker, DateTimePicker, CheckBox content is generated"},{"location":"entry_create/#form-title","title":"Form Title","text":"<p>The generated form's title is automatically generated by combining the words Create New with the <code>entityPath</code> defined in the constructor. For example, if the <code>entityPath</code> is set to Products, the title will be Create New Products.</p> <p>To modify the default form title, please utilize the setFormTitle() method.</p> Setter (setFormTitle)Getter (getFormTitle) <p> Parameter Type Mandatory Description title <code>string</code> Yes The generated form's title </p> <p> Returns Description <code>string</code> Returns the value that was set using setFormTitle() method. Default value is Create new ${entityPath} </p> <p>Example</p> <p>Please refer to the result below, which can be found after the code blocks.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the form title\n    entry.setFormTitle(\"My Form Title\");\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the form title\n          entry.setFormTitle(\"My Form Title\");\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#form-grouping","title":"Form Grouping","text":"<p>By default, all the properties of an <code>EntitySet</code> are placed in a single group or section in the auto-generated dialog or object page, with the title for that group hidden (visible on the object page). It is possible to categorize the properties into different groups in the auto-generated form, should you wish to do so.</p> <p>Info</p> <p>Upon activation of the Object Page feature, the form grouping feature generates sections on the object page.</p> <p>To create the form groups or object page sections, setFormGroups() method can be utilized.</p> <p>Info</p> <ul> <li> <p>All of the key properties of the <code>EntitySet</code> are placed into a default group, and this behavior is not open to modification. The title of this group can be modified using the setDefaultGroupTitle() method. If the setDefaultGroupTitle() method is not used, the default group title will remain hidden in the auto-generated dialog. However, it will always be visible in the auto-generated object page, and the title will be derived from the Form Title feature for the object page.</p> </li> <li> <p>Any properties not included in the setFormGroups() method or the default group are placed in a group designated as the Unknown Group. To disable this group, set the second parameter of the setFormGroups() method to false. This configuration allows only the key properties and the other properties specified in the setFormGroups() method to be visible in the auto-generated dialog or auto-generated object page.</p> </li> <li> <p>Should you wish to retain the Unknown Group but modify the group title, you may utilize the setUnknownGroupTitle() method.</p> </li> </ul> Setter (setFormGroups)Getter (getFormGroups) <p> Parameter Type Mandatory Description groups IFormGroups[] Yes The form groups or sections displayed in the auto-generated dialog or object page includeAllProperties? <code>boolean</code> No If set to false all the other non-key properties will not be included. Default is true </p> <p> Returns Description IFormGroups[] Returns the groups that were set using setFormGroups() method. Default value is [] </p> Setter (setDefaultGroupTitle)Getter (getDefaultGroupTitle) <p> Parameter Type Mandatory Description title <code>string</code> Yes The title of the default group or section that is generated for the key properties </p> <p> Returns Description <code>string</code> Returns the title that was set using setDefaultGroupTitle() method. Default value is undefined for the dialog. However, it is derived from the Form Title for the object page </p> Setter (setUnknownGroupTitle)Getter (getUnknownGroupTitle) <p> Parameter Type Mandatory Description title <code>string</code> Yes The title of the unknown group or section that is generated for the other properties </p> <p> Returns Description <code>string</code> Returns the title that was set using setUnknownGroupTitle() method. Default value is Unknown Group </p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products and the objective is to categorize the properties into different groups in the auto-generated form. Please see the results below after the code blocks for reference.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public onCreateProduct() {\n    // initialize\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // set the form groups and include all the other properties\n    entry.setFormGroups([{\n      title: \"My Group 1\",\n      properties: [\"name\", \"description\"]\n    },{\n      title: \"My Group 2\",\n      properties: [\"brand\", \"price\", \"currency\"]\n    }]);\n\n    // set the default group title\n    entry.setDefaultGroupTitle(\"My Default Group\");\n\n    // set the unknown group title\n    entry.setUnknownGroupTitle(\"My Unknown Group\");\n\n    // call the dialog\n    entry.createNewEntry();\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // initialize\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // set the form groups and include all the other properties\n          entry.setFormGroups([{\n            title: \"My Group 1\",\n            properties: [\"name\", \"description\"]\n          },{\n            title: \"My Group 2\",\n            properties: [\"brand\", \"price\", \"currency\"]\n          }]);\n\n          // set the default group title\n          entry.setDefaultGroupTitle(\"My Default Group\");\n\n          // set the unknown group title\n          entry.setUnknownGroupTitle(\"My Unknown Group\");\n\n          // call the dialog\n          entry.createNewEntry(); \n        }\n\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#iformgroups-type-definition","title":"IFormGroups Type Definition","text":"Property Type Description IFormGroups <code>object</code> \u2003title <code>string</code> The title of the form group or object page section \u2003properties <code>string[]</code> The properties that will be included into the group"},{"location":"entry_create/#custom-data","title":"Custom Data","text":"<p>The UI5 Antares enables users to add Custom Data to the auto-generated SIMPLE/SMART form elements. To add custom data, simply use the setFieldCustomData() method.</p> Setter (setFieldCustomData)Getter (getFieldCustomData) <p> Parameter Type Mandatory Description customData IFieldCustomData[] Yes The custom data that will be added to the auto-generated form elements </p> <p> Returns Description IFieldCustomData[] Returns the value that was set using setFieldCustomData() method. Default value is [] </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport CustomData from \"sap/ui/core/CustomData\"; // Import the custom data\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public onCreateProduct() {\n    // initialize\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // set the custom data\n    entry.setFieldCustomData([{\n      propertyName: \"name\",\n      customData: new CustomData({key: \"MyKey1\", value:\"MyValue1\"})\n    },{\n      propertyName: \"description\",\n      customData: new CustomData({key: \"MyKey2\", value:\"MyValue2\"})\n    }]);\n\n    // call the dialog\n    entry.createNewEntry();\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"sap/ui/core/CustomData\" // Import the custom data\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, CustomData) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // initialize\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // set the custom data\n          entry.setFieldCustomData([{\n            propertyName: \"name\",\n            customData: new CustomData({key: \"MyKey1\", value:\"MyValue1\"})\n          },{\n            propertyName: \"description\",\n            customData: new CustomData({key: \"MyKey2\", value:\"MyValue2\"})\n          }]);\n\n          // call the dialog\n          entry.createNewEntry(); \n        }\n\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#ifieldcustomdata-type-definition","title":"IFieldCustomData Type Definition","text":"Property Type Description IFieldCustomData <code>object</code> \u2003propertyName <code>string</code> The name of the property that will have the custom data \u2003customData Custom Data The custom data"},{"location":"entry_create/#text-in-edit-mode-source","title":"Text In Edit Mode Source","text":"<p>The UI5 Antares allows users to set the <code>textInEditModeSource</code> property of the SmartField when a SmartForm is generated. To set the <code>textInEditModeSource</code> property, the setTextInEditModeSource() method can be utilized.</p> Setter (setTextInEditModeSource)Getter (getTextInEditModeSource) <p> Parameter Type Mandatory Description textInEditModeSource ITextInEditModeSource[] Yes The <code>textInEditModeSource</code> configs for the properties </p> <p> Returns Description ITextInEditModeSource[] Returns the value that was set using setTextInEditModeSource() method. Default value is [] </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport { smartfield } from \"sap/ui/comp/library\"; // Import the smartfield library\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public onCreateProduct() {\n    // initialize\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // set the textInEditModeSource\n    entry.setTextInEditModeSource([{\n      propertyName: \"name\",\n      textInEditModeSource: smartfield.TextInEditModeSource.NavigationProperty\n    },{\n      propertyName: \"description\",\n      customData: smartfield.TextInEditModeSource.ValueList\n    }]);\n\n    // call the dialog\n    entry.createNewEntry();\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"sap/ui/comp/library\" // Import the comp library\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, UIComp) {\n      \"use strict\";\n\n      const { TextInEditModeSource } = UIComp[\"smartfield\"]; // Destructure to get the enum\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // initialize\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // set the textInEditModeSource\n          entry.setTextInEditModeSource([{\n            propertyName: \"name\",\n            textInEditModeSource: TextInEditModeSource.NavigationProperty\n          },{\n            propertyName: \"description\",\n            customData: TextInEditModeSource.ValueList\n          }]);\n\n          // call the dialog\n          entry.createNewEntry(); \n        }\n\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#itextineditmodesource-type-definition","title":"ITextInEditModeSource Type Definition","text":"Property Type Description ITextInEditModeSource <code>object</code> \u2003propertyName <code>string</code> The name of the property whose <code>textInEditModeSource</code> property will be set \u2003textInEditModeSource TextInEditModeSource The <code>textInEditModeSource</code> property of the smartfield"},{"location":"entry_create/#begin-button-text","title":"Begin Button Text","text":"<p>Upon clicking the <code>Begin Button</code>, the Entry Create class initiates the validation process and submits the transient entity through the OData V2 model. The default text displayed on the Begin button is Create. The text displayed on the <code>Begin Button</code> can be modified using the setBeginButtonText() method.</p> Setter (setBeginButtonText)Getter (getBeginButtonText) <p> Parameter Type Mandatory Description text <code>string</code> Yes The text displayed on the begin button </p> <p> Returns Description <code>string</code> Returns the value that was set using setBeginButtonText() method. Default value is Create </p> <p>Example</p> <p>Please refer to the result below, which can be found after the code blocks.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the begin button text\n    entry.setBeginButtonText(\"My Begin Button Text\");\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the begin button text\n          entry.setBeginButtonText(\"My Begin Button Text\");\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#begin-button-type","title":"Begin Button Type","text":"<p>The default type used on the <code>Begin Button</code> is ButtonType.Success. Should you wish to modify the default Begin Button type, please utilize the setBeginButtonType() method.</p> Setter (setBeginButtonType)Getter (getBeginButtonType) <p> Parameter Type Mandatory Description type ButtonType Yes The type of the begin button </p> <p> Returns Description ButtonType Returns the value that was set using setBeginButtonType() method. Default value is Success </p> <p>Example</p> <p>Please refer to the result below, which can be found after the code blocks.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport { ButtonType } from \"sap/m/library\"; // Import the ButtonType enum\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the begin button type\n    entry.setBeginButtonType(ButtonType.Attention);\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"sap/m/ButtonType\" // Import the ButtonType enum\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, ButtonType) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the begin button type\n          entry.setBeginButtonType(ButtonType.Attention);\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#end-button-text","title":"End Button Text","text":"<p>Once the end user clicks the <code>End Button</code>, the Entry Create class resets the transient entity through the OData V2 Model and destroys the created dialog. The default text displayed on the end button is Close. This text can be modified using the setEndButtonText() method.</p> Setter (setEndButtonText)Getter (getEndButtonText) <p> Parameter Type Mandatory Description text <code>string</code> Yes The text displayed on the end button </p> <p> Returns Description <code>string</code> Returns the value that was set using setEndButtonText() method. Default value is Close </p> <p>Example</p> <p>Please refer to the result below, which can be found after the code blocks.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the end button text\n    entry.setEndButtonText(\"My End Button Text\");\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the end button text\n          entry.setEndButtonText(\"My End Button Text\");\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#end-button-type","title":"End Button Type","text":"<p>The default type used on the <code>End Button</code> is ButtonType.Negative. Should you wish to modify the default end button type, please utilize the setEndButtonType() method.</p> Setter (setEndButtonType)Getter (getEndButtonType) <p> Parameter Type Mandatory Description type ButtonType Yes The type of the end button </p> <p> Returns Description ButtonType Returns the value that was set using setEndButtonType() method. Default value is Negative </p> <p>Example</p> <p>Please refer to the result below, which can be found after the code blocks.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport { ButtonType } from \"sap/m/library\"; // Import the ButtonType enum\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the end button type\n    entry.setEndButtonType(ButtonType.Transparent);\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"sap/m/ButtonType\" // Import the ButtonType enum\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, ButtonType) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the end button type\n          entry.setEndButtonType(ButtonType.Transparent);\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#properties-with-edmguid-type","title":"Properties with Edm.Guid Type","text":"<p>The Entry Create class automatically generates unique, randomly generated UUID values for the key properties (with <code>Edm.Guid</code> type) of the <code>EntityType</code>, which are then hidden from view on the form for the end user.</p> <p>Should you wish to modify the default random UUID generation behavior, please utilize the setGenerateRandomGuid() method.</p> Setter (setGenerateRandomGuid)Getter (getGenerateRandomGuid) <p> Parameter Type Mandatory Description strategy GuidStrategies Yes The random UUID generation strategy </p> <p> Returns Description GuidStrategies Returns the value that was set using setGenerateRandomGuid() method. Default value is ONLY_KEY </p> <p>To modify the default visibility behavior of the properties with <code>Edm.Guid</code> type, please utilize the setDisplayGuidProperties() method.</p> Setter (setDisplayGuidProperties)Getter (getDisplayGuidProperties) <p> Parameter Type Mandatory Description strategy GuidStrategies Yes The visibility strategy for the properties with <code>Edm.Guid</code> type </p> <p> Returns Description GuidStrategies Returns the value that was set using setDisplayGuidProperties() method. Default value is ONLY_NON_KEY </p> <p>Example</p> <p>Let us consider the following scenario: You have an <code>EntitySet</code> named Products with <code>ID</code>, <code>categoryID</code>, and <code>supplierID</code>, all of which have the <code>Edm.Guid</code> type. You would like to allow the end user to view all <code>Edm.Guid</code> properties and have the library generate random UUID values only for the non-key properties.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport { GuidStrategies } from \"ui5/antares/types/entry/enums\"; // Import the GuidStrategies enum\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Let the end user to display all the properties with Edm.Guid type\n    entry.setDisplayGuidProperties(GuidStrategies.ALL);\n\n    // Have the library generate random UUID values only for the non-key properties\n    entry.setGenerateRandomGuid(GuidStrategies.ONLY_NON_KEY);\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/types/entry/enums\" // Import the enums\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, EntryEnums) {\n      \"use strict\";\n\n      // Destructure the object to retrieve the GuidStrategies enum\n      const { GuidStrategies } = EntryEnums;\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Let the end user to display all the properties with Edm.Guid type\n          entry.setDisplayGuidProperties(GuidStrategies.ALL);\n\n          // Have the library generate random UUID values only for the non-key properties\n          entry.setGenerateRandomGuid(GuidStrategies.ONLY_NON_KEY);\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#guidstrategies-enum","title":"GuidStrategies Enum","text":"<p>Info</p> <p>Please note that if a random UUID is generated for a property and marked as visible, this field cannot be edited by the end user.</p> setGenerateRandomGuid()setDisplayGuidProperties() <p> Name Description GuidStrategies.ALL Generate random UUID values for all the properties with <code>Edm.Guid</code> type GuidStrategies.ONLY_KEY Generate random UUID values only for the key properties with <code>Edm.Guid</code> type GuidStrategies.ONLY_NON_KEY Generate random UUID values only for the properties that are not key and have <code>Edm.Guid</code> type GuidStrategies.NONE No random UUID generation </p> <p> Name Description GuidStrategies.ALL The end user can display all the properties with <code>Edm.Guid</code> type GuidStrategies.ONLY_KEY The end user can display only the key properties with <code>Edm.Guid</code> type GuidStrategies.ONLY_NON_KEY The end user can display only the properties that are not key and have <code>Edm.Guid</code> type GuidStrategies.NONE No property with <code>Edm.Guid</code> is visible to the end user </p>"},{"location":"entry_create/#form-property-order","title":"Form Property Order","text":"<p>The auto-generated form elements are displayed in accordance with the order set forth in the OData V2 metadata.</p> <p>Note</p> <p>Please be advised that the key properties always come first on the auto-generated form. This behavior is not open to modification.</p> <p>The order of the non-key properties can be modified using the setPropertyOrder() method.</p> Setter (setPropertyOrder)Getter (getPropertyOrder) <p> Parameter Type Mandatory Description order <code>string[]</code> Yes The order of the non-key properties that will be placed into the auto-generated form will be in the same order as this parameter useAllProperties? <code>boolean</code> No If the value is set to false, only the key properties and the properties specified in the order parameter will be visible to the end user </p> <p> Returns Description <code>string[]</code> Returns the value that was set using setPropertyOrder() method. Default value is [] </p> <p>Example</p> <p>Please refer to the result below, which can be found after the code blocks.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the property order and bring all the properties\n    entry.setPropertyOrder([\"categoryID\", \"supplierID\", \"price\", \"currency\", \"name\"]);\n\n    entry.createNewEntry(); \n  }\n\n  public async onCreateCustomer() {\n    const entry = new EntryCreateCL(this, \"Customers\");\n\n    // Set the property order and exclude the other properties\n    entry.setPropertyOrder([\"country\", \"name\"], false);\n\n    entry.createNewEntry();     \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the property order and bring all the properties\n          entry.setPropertyOrder([\"categoryID\", \"supplierID\", \"price\", \"currency\", \"name\"]);\n\n          entry.createNewEntry(); \n        },\n\n        onCreateCustomer: async function () {\n          const entry = new EntryCreateCL(this, \"Customers\");\n\n          // Set the property order and exclude the other properties\n          entry.setPropertyOrder([\"country\", \"name\"], false);\n\n          entry.createNewEntry();     \n        }\n      });\n\n    });\n</code></pre> Before After"},{"location":"entry_create/#excluded-properties","title":"Excluded Properties","text":"<p>By default, all <code>EntityType</code> properties of the <code>EntitySet</code> specified in the class constructor are accessible to the end user.</p> <p>To exclude properties from the auto-generated form, please utilize the setExcludedProperties() method. Please note that it is still possible to set initial values for excluded properties through the createNewEntry() method's parameter.</p> <p>Attention</p> <p>It is not possible to exclude any of the key properties.</p> Setter (setExcludedProperties)Getter (getExcludedProperties) <p> Parameter Type Mandatory Description properties <code>string[]</code> Yes The properties that will be excluded from the auto-generated form </p> <p> Returns Description <code>string[]</code> Returns the value that was set using setExcludedProperties() method. Default value is [] </p> <p>Example</p> <p>Please refer to the result below, which can be found after the code blocks.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the excluded properties\n    entry.setExcludedProperties([\"categoryID\", \"supplierID\"]);\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the excluded properties\n          entry.setExcludedProperties([\"categoryID\", \"supplierID\"]);\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> Before After"},{"location":"entry_create/#mandatory-properties","title":"Mandatory Properties","text":"<p>The Entry Create class includes a built-in validation mechanism that checks the mandatory properties and applies the relevant Validation Logic before submitting the transient entity.</p> <p>Info</p> <p>The default setting marks all key properties and properties with the <code>Nullable=false</code> attribute as mandatory.</p> <p>In order to include properties in the mandatory check mechanism, the setMandatoryProperties() method can be utilized.</p> Setter (setMandatoryProperties)Getter (getMandatoryProperties) <p> Parameter Type Mandatory Description properties <code>string[]</code> Yes The properties that will be included into the mandatory check mechanism </p> <p> Returns Description <code>string[]</code> Returns the value that was set using setMandatoryProperties() method. Default value is [] </p> <p>Example</p> <p>Please refer to the result below, which can be found after the code blocks.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the mandatory properties\n    entry.setMandatoryProperties([\"name\", \"description\"]);\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the mandatory properties\n          entry.setMandatoryProperties([\"name\", \"description\"]);\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> Before After"},{"location":"entry_create/#mandatory-error-message","title":"Mandatory Error Message","text":"<p>In the event that a property fails the mandatory check mechanism, the value state of the UI control (SmartField, Input, etc.) is set to <code>Error</code>, and a default message is displayed in the sap.m.MessageBox.error to the end user.</p> <p>Info</p> <p>Default Message: Please fill in all required fields.</p> <p>To customize the default error message, please utilize the setMandatoryErrorMessage() method.</p> Setter (setMandatoryErrorMessage)Getter (getMandatoryErrorMessage) <p> Parameter Type Mandatory Description message <code>string</code> Yes The displayed message when the mandatory check mechanism fails </p> <p> Returns Description <code>string</code> Returns the value that was set using setMandatoryErrorMessage() method. Default value is Please fill in all required fields. </p> <p>Example</p> <p>Please refer to the result below, which can be found after the code blocks.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the mandatory error message\n    entry.setMandatoryErrorMessage(\"My Mandatory Error Message\");\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the mandatory error message\n          entry.setMandatoryErrorMessage(\"My Mandatory Error Message\");\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#readonly-properties","title":"Readonly Properties","text":"<p>In the event that the property type is <code>Edm.Guid</code> and the library generates a random UUID for it, the end user will be unable to edit it.</p> <p>Tip</p> <p>For additional details regarding properties with an <code>Edm.Guid</code> type, please refer to the Properties with Edm.Guid Type section.</p> <p>To prevent end users from editing certain properties, the setReadonlyProperties() method can be utilized.</p> <p>Info</p> <p>It is possible to set the initial values for readonly properties.</p> Setter (setReadonlyProperties)Getter (getReadonlyProperties) <p> Parameter Type Mandatory Description properties <code>string[]</code> Yes The read-only properties </p> <p> Returns Description <code>string[]</code> Returns the value that was set using setReadonlyProperties() method. Default value is [] </p> <p>Example</p> <p>Please refer to the result below, which can be found after the code blocks.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Set the read-only properties\n    entry.setReadonlyProperties([\"name\", \"description\"]);\n\n    entry.createNewEntry({\n      name: \"My Product Name\",\n      description: \"My Product Description\"\n    }); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Set the read-only properties\n          entry.setReadonlyProperties([\"name\", \"description\"]);\n\n          entry.createNewEntry({\n            name: \"My Product Name\",\n            description: \"My Product Description\"\n          }); \n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#attach-submit-completed","title":"Attach Submit Completed","text":"<p>Once the transient entity has been successfully submitted, the Entry Create class can then call a function with a specific signature. The result of the submission is then passed to the attached function.</p> <p>To attach a function, attachSubmitCompleted() method can be utilized.</p> <p>Setter (attachSubmitCompleted)</p> Parameter Type Mandatory Description submitCompleted (response: ResponseCL&lt;ResponseT = object&gt;) =&gt; void Yes The function that will be called after the successful submit listener? object No The default listener is the controller from constructor <p>Example</p> <p>Let us assume that once the submission is successful, you would like to receive a response and take the necessary actions.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport ResponseCL from \"ui5/antares/entry/v2/ResponseCL\"; // Import the ResponseCL class\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // Attach the submit completed function\n    entry.attachSubmitCompleted(this.productSubmitCompleted, this);\n\n    entry.createNewEntry();\n  }\n\n  // Please use the same type for the ResponseCL generic as you did for EntryCreateCL\n  private productSubmitCompleted(response: ResponseCL&lt;IProducts&gt;): void {\n    // Get the status code. Please be aware, it may also be undefined\n    const statusCode = response.getStatusCode();\n\n    // Get the data that was submitted. Please be aware, it may also be undefined\n    const submittedData = response.getResponse();\n\n    if (submittedData) {\n      // Some operations\n      const createdProductID = submittedData.ID;\n    }\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Attach the submit completed function\n          entry.attachSubmitCompleted(this._productSubmitCompleted, this);\n\n          entry.createNewEntry();\n        },\n\n        _productSubmitCompleted: function (response) {\n          // Get the status code. Please be aware, it may also be undefined\n          const statusCode = response.getStatusCode();\n\n          // Get the data that was submitted. Please be aware, it may also be undefined\n          const submittedData = response.getResponse();\n\n          if (submittedData) {\n            // Some operations\n            const createdProductID = submittedData.ID;\n          }          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#attach-submit-failed","title":"Attach Submit Failed","text":"<p>In the event that the submission of the transient entity is unsuccessful, the Entry Create class can then call a function with a specific signature. The result of the submission will then be passed to the attached function for processing.</p> <p>To attach a function, attachSubmitFailed() method can be utilized.</p> <p>Setter (attachSubmitFailed)</p> Parameter Type Mandatory Description submitFailed (response: ResponseCL&lt;ISubmitResponse&gt;) =&gt; void Yes The function that will be called after the submission fails listener? object No The default listener is the controller from constructor <p>Example</p> <p>Let us assume that once the submission is unsuccessful, you would like to receive a response and take the necessary actions.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport ResponseCL from \"ui5/antares/entry/v2/ResponseCL\"; // Import the ResponseCL class\nimport { ISubmitResponse } from \"ui5/antares/types/entry/submit\"; // Import the error type\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // Attach the submit failed function\n    entry.attachSubmitFailed(this.productSubmitFailed, this);\n\n    entry.createNewEntry();\n  }\n\n  // Please use the ISubmitResponse type for the ResponseCL generic\n  private productSubmitFailed(response: ResponseCL&lt;ISubmitResponse&gt;): void {\n    // Get the status code. Please be aware, it may also be undefined\n    const statusCode = response.getStatusCode();\n\n    // Get the response. Please be aware, it may also be undefined\n    const reason = response.getResponse();\n\n    // Get the statusText\n    if (reason) {\n      MessageBox.error(reason.statusText || \"The product was not created!\");\n    }\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/m/MessageBox\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, MessageBox, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Attach the submit failed function\n          entry.attachSubmitFailed(this._productSubmitFailed, this);\n\n          entry.createNewEntry();\n        },\n\n        _productSubmitFailed: function (response) {\n          // Get the status code. Please be aware, it may also be undefined\n          const statusCode = response.getStatusCode();\n\n          // Get the response. Please be aware, it may also be undefined\n          const reason = response.getResponse();\n\n          // Get the statusText\n          if (reason) {\n            MessageBox.error(reason.statusText || \"The product was not created!\");\n          }     \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#response-class","title":"Response Class","text":"<p>Once the transient entity has been submitted, the generic ResponseCL&lt;ResponseT = object&gt; object is instantiated and passed to the functions attached using the attachSubmitCompleted() or attachSubmitFailed() methods.</p> <p>Once the submit has been completed, the class has two public methods that can be used to retrieve information. The return type of the getResponse() method is dependent on the response type (success or failure).</p> Submit Completed (getResponse)Submit Failed (getResponse) <p> Returns Description <code>ResponseT</code> | <code>object</code> | <code>undefined</code> Returns the data that was submitted successfully through the OData V2 Model. </p> <p> Returns Description <code>object</code> \u2003statusCode?: <code>string</code> | <code>undefined</code> The status code of the HTTP request. \u2003body?: <code>string</code> | <code>undefined</code> The HTTP response body. \u2003statusText?: <code>string</code> | <code>undefined</code> The HTTP status text. \u2003headers?: <code>object</code> | <code>undefined</code> The HTTP response headers. </p> <p>Submit Completed and Failed (getStatusCode)</p> Returns Description <code>string</code> | <code>undefined</code> Returns the status code of the HTTP request."},{"location":"entry_create/#validation-logic","title":"Validation Logic","text":"<p>The UI5 Antares classes include a built-in validation mechanism to guarantee that the input provided by the end user is accurate and complete before submission through the OData V2 model.</p> <p>In the event of a validation failure, the end user is promptly informed via an sap.m.MessageBox.error message, and the submission remains in a pending status until the validation process is successfully completed.</p> <p>There are two possible approaches to user input validation.</p> <p>1) Validation with Operator</p> <p>2) Validation with Validator Function</p>"},{"location":"entry_create/#constructor_1","title":"Constructor","text":"<p>In order to utilise the ValidationLogicCL class, it is necessary to initialise an object from this class.</p> Parameter Type Mandatory Default Value Description settings <code>object</code> Yes \u00a0\u00a0\u00a0\u00a0propertyName <code>string</code> Yes This is the property of the <code>EntitySet</code> that is set in the constructor for which the validation will be performed. \u00a0\u00a0\u00a0\u00a0validator? <code>(value: ValidatorValueParameter) =&gt; boolean</code> No The validator function \u00a0\u00a0\u00a0\u00a0listener? <code>object</code> No The object that is bind to the validator function \u00a0\u00a0\u00a0\u00a0value1? <code>string</code> | <code>number</code> | <code>Date</code> | UI5 Date No First value to use with the given operator \u00a0\u00a0\u00a0\u00a0value2? <code>string</code> | <code>number</code> | <code>Date</code> | UI5 Date No Second value to use with the given operator, used only for the BT and NB operators \u00a0\u00a0\u00a0\u00a0operator? ValidationOperator No Operator used for the validation \u00a0\u00a0\u00a0\u00a0message? <code>string</code> No Validation failed for <code>propertyName</code> The message that is displayed when the validation is unsuccessful \u00a0\u00a0\u00a0\u00a0showMessageBox? <code>boolean</code> No true Indicates whether the message box should be displayed by the end user \u00a0\u00a0\u00a0\u00a0invalidValueMessage? <code>string</code> No Invalid value for <code>propertyName</code> Displayed message when the end user types in an invalid value. For instance: string to a number field"},{"location":"entry_create/#validation-with-operator","title":"Validation with Operator","text":"<p>In the event that particular values are required for user input validation purposes, these can be defined within the constructor function.</p> <p>Tip</p> <p>Please note that the type of the value1 and value2 parameters must align with the type of the property undergoing validation.</p> <p>As an example, when the property type is <code>Edm.DateTime</code> or <code>Edm.DateTimeOffset</code>, then the data type of the <code>value1</code> and <code>value2</code> must be either JavaScript Date or UI5 Date.</p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products with the following properties: <code>ID</code>, <code>name</code>, <code>description</code>, <code>price</code>, and <code>currency</code>. We wish to implement a logic that allows the price to be between 1500 and 2500, and that the currency is limited to EUR.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport ValidationLogicCL from \"ui5/antares/ui/ValidationLogicCL\"; // Import the ValidationLogicCL class\nimport { ValidationOperator } from \"ui5/antares/types/ui/enums\"; // Import the ValidationOperator enum\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // Create an object from the Validation Logic class for the price validation\n    const priceValidation = new ValidationLogicCL({\n      propertyName: \"price\", // price property of the Products\n      operator: ValidationOperator.BT,\n      value1: 1500,\n      value2: 2500,\n      message: \"The price must be between 1500 and 2500\",\n      invalidValueMessage: \"Please only type number for the price field\"      \n    });\n\n    // Create an object from the Validation Logic class for the currency validation\n    const currencyValidation = new ValidationLogicCL({\n      propertyName: \"currency\", // Currency property of the Products\n      operator: ValidationOperator.EQ,\n      value1: \"EUR\",\n      message: \"Only EUR currency can be used\"  \n    });\n\n    // Add the price validation object\n    entry.addValidationLogic(priceValidation);\n\n    // Add the currency validation object\n    entry.addValidationLogic(currencyValidation);\n\n    entry.createNewEntry();\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/ui/ValidationLogicCL\", // Import the ValidationLogicCL class\n    \"ui5/antares/types/ui/enums\" // Import the enums\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, ValidationLogicCL, UIEnums) {\n      \"use strict\";\n\n      // Destructure the object to retrieve the ValidationOperator enum\n      const { ValidationOperator } = UIEnums;\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Create an object from the Validation Logic class for the price validation\n          const priceValidation = new ValidationLogicCL({\n            propertyName: \"price\", // price property of the Products\n            operator: ValidationOperator.BT,\n            value1: 1500,\n            value2: 2500,\n            message: \"The price must be between 1500 and 2500\",\n            invalidValueMessage: \"Please only type number for the price field\"      \n          });\n\n          // Create an object from the Validation Logic class for the currency validation\n          const currencyValidation = new ValidationLogicCL({\n            propertyName: \"currency\", // Currency property of the Products\n            operator: ValidationOperator.EQ,\n            value1: \"EUR\",\n            message: \"Only EUR currency can be used\"  \n          });\n\n          // Add the price validation object\n          entry.addValidationLogic(priceValidation);\n\n          // Add the currency validation object\n          entry.addValidationLogic(currencyValidation);\n\n          entry.createNewEntry();\n        }\n      });\n\n    });\n</code></pre> Validation Failed Invalid Value"},{"location":"entry_create/#validation-with-validator-function","title":"Validation with Validator Function","text":"<p>In the event that the validation logic is more complex than a simple check of specific values, it is possible to use a custom function for the purpose of validation.</p> <p>It is essential that the function used for validation includes a parameter to retrieve the value entered by the end user. The UI5 Antares library transfers the user input or the custom control to the validator function as a parameter.</p> <p>Info</p> <ul> <li> <p>The value passed to the validator function can be any one of the following types: string, number, boolean, JavaScript Date, UI5 Date, or UI5 Control.</p> </li> <li> <p>If the validator function is utilized for the purpose of validating a Custom Control, the type of the parameter will be the UI5 Control that is added. To illustrate, if a sap.m.ComboBox is added as a custom control, the sap.m.ComboBox will be passed back to the validator function. </p> </li> <li> <p>Please note that for auto-generated form elements, the value can only be one of the following types: string, number, boolean, JavaScript Date, or UI5 Date.</p> </li> </ul> <p>The validator function must return a boolean value indicating whether the validation was successful or not.</p> Return Value Description <code>true</code> Validation is successful <code>false</code> Validation is not successful <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport ValidationLogicCL from \"ui5/antares/ui/ValidationLogicCL\"; // Import the ValidationLogicCL class\nimport { ValidatorValueParameter } from \"ui5/antares/types/ui/validation\"; // Import the validator function parameter type\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // Create an object from the Validation Logic class for the currency validation\n    const currencyValidation = new ValidationLogicCL({\n      propertyName: \"currency\", // Currency property of the Products\n      validator: this.validateCurrency,\n      listener: this,\n      message: \"Only EUR currency can be used\"  \n    });\n\n    // Add the currency validation object\n    entry.addValidationLogic(currencyValidation);\n\n    entry.createNewEntry();\n  }\n\n  public validateCurrency(value: ValidatorValueParameter): boolean {\n    // Here you can write your own validation logic\n\n    if ((value as string) !== \"EUR\") {\n      return false; // Validation is not successful\n    }\n\n    return true; // Validation is successful\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/ui/ValidationLogicCL\" // Import the ValidationLogicCL class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, ValidationLogicCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Create an object from the Validation Logic class for the currency validation\n          const currencyValidation = new ValidationLogicCL({\n            propertyName: \"currency\", // Currency property of the Products\n            validator: this._validateCurrency,\n            listener: this,\n            message: \"Only EUR currency can be used\"  \n          });\n\n          // Add the currency validation object\n          entry.addValidationLogic(currencyValidation);\n\n          entry.createNewEntry();\n        },\n\n        _validateCurrency: function (value) {\n          // Here you can write your own validation logic\n\n          if (value !== \"EUR\") {\n            return false; // Validation is not successful\n          }\n\n          return true; // Validation is successful\n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#validationoperator-enum","title":"ValidationOperator Enum","text":"Name Description ValidationOperator.BT Between. Boundaries are included ValidationOperator.Contains Contains. It can only be used with <code>string</code> type ValidationOperator.EndsWith Ends with. It can only be used with <code>string</code> type ValidationOperator.EQ Equals ValidationOperator.GE Greater than or equals ValidationOperator.GT Greater than ValidationOperator.LE Less than or equals ValidationOperator.LT Less than ValidationOperator.NB Not between. Boundaries are included ValidationOperator.NE Not equals ValidationOperator.NotContains Not contains. It can only be used with <code>string</code> type ValidationOperator.NotEndsWith Not ends with. It can only be used with <code>string</code> type ValidationOperator.NotStartsWith Not starts with. It can only be used with <code>string</code> type ValidationOperator.StartsWith Starts with. It can only be used with <code>string</code> type"},{"location":"entry_create/#object-page","title":"Object Page","text":"<p>The createNewEntry() method, by default, generates a sap.m.Dialog including a Simple Form or Smart Form content, with configurations completed using the public methods. However, there may be instances where users require a larger screen, due to one or more of the reasons listed below:</p> <ul> <li>The <code>EntitySet</code> may have numerous properties, and displaying all of these in a dialog may not be user-friendly.</li> <li>The custom content may not fit in the dialog.</li> </ul> <p>In such cases, the UI5 Antares library has the capability to generate a sap.uxap.ObjectPageLayout instead of a sap.m.Dialog, which may be a more suitable option.</p> <p>Info</p> <p>All features of the dialog generation process are also available for use in the object page generation process.</p> <p>The Entry classes default setting is to generate an object page with a single section containing all the properties of an <code>EntitySet</code>. The default title for this section is derived from the Form Title. If you wish to change the title of this section, please use the setDefaultGroupTitle() method.</p> <p>Note</p> <p>Please note that any custom content added via the addCustomContent() or addContentFromFragment() methods will be added to a distinct section with a default title. The default title for the custom content is Custom Contents, but this can be modified using the setCustomContentSectionTitle() method.</p> <p>To generate an object page for the <code>EntitySet</code>, the setDisplayObjectPage() method can be utilized. The second parameter of this method is the target name of the current view. This information is required by the library to redirect the end user back to the view where the object page was called. The target information can be obtained from the application's manifest.json file. To find the target name of the current page, please refer to the \"sap.ui5\".\"routing\".\"targets\" section in the manifest.json file.</p> <p>Attention</p> <ul> <li> <p>Please note that object page generation is only available when the SAPUI5 application has a router initialized in the UI Component (Component.js). For your convenience, the UI5 Antares library uses the router of the application and does not initialize a new router instance.</p> </li> <li> <p>The UI5 Antares library does not modify the hash when displaying the generated object page. Instead, a new target, designated as UI5AntaresObjectPageTarget, is created through the application's router. This target is then displayed in real-time.</p> </li> </ul> <p>Example</p> <p>Please refer to the example below, which illustrates the use of a target named MyTarget in the application's manifest.json file.</p> manifest.json<pre><code>{\n  \"sap.app\": {\n    ...\n  },\n  \"sap.ui\": {\n    ...\n  },\n  \"sap.ui5\": {\n    ...\n    \"routing\": {\n      \"config\": {\n        ...\n      },\n      \"routes\": [\n        ...\n      ],\n      \"targets\": {\n        \"MyTarget\": {\n          \"viewType\": \"XML\",\n          \"transition\": \"slide\",\n          \"clearControlAggregation\": \"true\",\n          \"viewId\": \"MyViewId\",\n          \"viewName\": \"MyViewName\"\n        },\n        ...\n      }\n    }\n  }\n}\n</code></pre> Setter (setDisplayObjectPage)Getter (getDisplayObjectPage) <p> Parameter Type Mandatory Description display <code>boolean</code> Yes If set to true, the library will generate an object page instead of a dialog fromTarget <code>string</code> Yes The target name of the view to where the end user should be redirected after finishing the process on the generated object page </p> <p> Returns Description <code>boolean</code> Returns all the values that were set using the setDisplayObjectPage() method. Default value is false </p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products. Instead of using a dialog for the creation process, we would prefer to have an object page.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public onCreateProduct() {\n    // initialize\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // set the default section title\n    entry.setDefaultGroupTitle(\"My Default Section\");\n\n    // activate the object page with the target\n    entry.setDisplayObjectPage(true, \"MyCurrentViewTarget\");\n\n    // call the object page\n    entry.createNewEntry();\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // initialize\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // set the default section title\n          entry.setDefaultGroupTitle(\"My Default Section\");          \n\n          // activate the object page with the target\n          entry.setDisplayObjectPage(true, \"MyCurrentViewTarget\");\n\n          // call the object page\n          entry.createNewEntry(); \n        }\n\n      });\n\n    });\n</code></pre> <p>The generated object page with the default values will be similar in appearance to the following example.</p> <p></p>"},{"location":"entry_create/#sections","title":"Sections","text":"<p>To add sections to the generated object page, please utilize the Form Grouping feature.</p>"},{"location":"entry_create/#header-title","title":"Header Title","text":"<p>The title in the generated object page is derived from the Form Title feature.</p>"},{"location":"entry_create/#header-label","title":"Header Label","text":"<p>The label displayed on the right side of the sap.m.Avatar can be modified using the setObjectPageHeaderLabel() method. Please find the default values for the header label below.</p>"},{"location":"entry_create/#default-values_1","title":"Default Values","text":"Class Default Value Entry Create You can create a new ${this.entityName} on this page. Entry Update You can update ${this.entityName} on this page. Entry Delete You can delete ${this.entityName} on this page. Entry Read You can display ${this.entityName} on this page. Setter (setObjectPageHeaderLabel)Getter (getObjectPageHeaderLabel) <p> Parameter Type Mandatory Description label <code>string</code> Yes The label which is displayed on the right side of the sap.m.Avatar </p> <p> Returns Description <code>boolean</code> Returns all the values that were set using the setObjectPageHeaderLabel() method. Default value differs based on the Entry class </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public onCreateProduct() {\n    // initialize\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // set the header title\n    entry.setFormTitle(\"My Header Title\");\n\n    // set the default section title\n    entry.setDefaultGroupTitle(\"My Default Section\");\n\n    // set the header label\n    entry.setObjectPageHeaderLabel(\"My Header Label\");\n\n    // activate the object page with the target\n    entry.setDisplayObjectPage(true, \"MyCurrentViewTarget\");\n\n    // call the object page\n    entry.createNewEntry();\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // initialize\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // set the header title\n          entry.setFormTitle(\"My Header Title\");\n\n          // set the default section title\n          entry.setDefaultGroupTitle(\"My Default Section\");\n\n          // set the header label\n          entry.setObjectPageHeaderLabel(\"My Header Label\");\n\n          // activate the object page with the target\n          entry.setDisplayObjectPage(true, \"MyCurrentViewTarget\");\n\n          // call the object page\n          entry.createNewEntry();\n        }\n\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#header-avatar","title":"Header Avatar","text":"<p>To modify the src attribute of the sap.m.Avatar displayed on the object page, the setObjectPageAvatarSrc() method can be utilized. The default values for the avatar are provided below for your reference.</p>"},{"location":"entry_create/#default-values_2","title":"Default Values","text":"Class Default Value Entry Create sap-icon://add Entry Update sap-icon://edit Entry Delete sap-icon://delete Entry Read sap-icon://display Setter (setObjectPageAvatarSrc)Getter (getObjectPageAvatarSrc) <p> Parameter Type Mandatory Description src <code>string</code> Yes The src attribute of the sap.m.Avatar </p> <p> Returns Description string Returns all the values that were set using the setObjectPageAvatarSrc() method. Default value differs based on the Entry class </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public onCreateProduct() {\n    // initialize\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // set the avatar src\n    entry.setObjectPageAvatarSrc(\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/Google_%22G%22_logo.svg/1024px-Google_%22G%22_logo.svg.png\");\n\n    // call the object page\n    entry.createNewEntry();\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // initialize\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // set the avatar src\n          entry.setObjectPageAvatarSrc(\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/Google_%22G%22_logo.svg/1024px-Google_%22G%22_logo.svg.png\");\n\n          // call the object page\n          entry.createNewEntry();\n        }\n\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#custom-content-section-title","title":"Custom Content Section Title","text":"<p>To modify the default title for the custom content on the generated object page, the setCustomContentSectionTitle() method can be utilized.</p> Setter (setCustomContentSectionTitle)Getter (getCustomContentSectionTitle) <p> Parameter Type Mandatory Description title <code>string</code> Yes The title of the section that is generated for the custom contents </p> <p> Returns Description string Returns all the values that were set using the setCustomContentSectionTitle() method. Default value is Custom Contents </p>"},{"location":"entry_create/#custom-control","title":"Custom Control","text":"<p>By default, the UI5 Antares library creates sap.ui.comp.smartfield.SmartField when the form type is SMART or [sap.m.Input][101], [sap.m.Date The following components are generated: Picker, DateTimePicker, and CheckBox, depending on the Edm Type of the properties when the form type is Simple.</p> <p>The UI5 Antares library generates the UI components shown below, depending on the Form Type.</p> <p>1) SIMPLE: sap.m.Input, sap.m.DatePicker, sap.m.DateTimePicker, sap.m.CheckBox depending on the <code>Edm.Type</code> of the <code>EntitySet</code> property.</p> <p>2) SMART: sap.ui.comp.smartfield.SmartField</p> <p>However, you may wish to consider implementing a different UI control for the properties of your <code>EntitySet</code>. In such cases, the Custom Control class allows the addition of a variety of user interface controls (such as the sap.m.Slider) for the properties of the <code>EntitySet</code>, as defined in the constructor.</p> <p>Attention</p> <p>Please note that a custom control can only be added for the properties of an <code>EntitySet</code> specified in the constructor.</p> <p>During the form generation process, the UI5 Antares library initiates a search for custom controls to be utilized for the properties of the <code>EntitySet</code>. In the event that no custom control is identified, the library generates a UI control based on the Form Type and <code>Edm.Type</code>.</p>"},{"location":"entry_create/#constructor_2","title":"Constructor","text":"<p>In order to utilise the CustomControlCL class, it is necessary to initialise an object from that class.</p> Parameter Type Mandatory Default Value Description control Control Yes The UI Control to add into the auto-generated form propertyName <code>string</code> Yes This is the property of the <code>EntitySet</code> that is set in the constructor for which the custom control will be added. validator? ValidationLogicCL No The validation object <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products with the following properties: <code>ID</code>, <code>name</code>, <code>description</code>, <code>price</code>, and <code>currency</code>. We wish to add a sap.m.ComboBox with some predefined items for the <code>currency</code> property.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport CustomControlCL from \"ui5/antares/ui/CustomControlCL\"; // Import the Custom Control Class\nimport ComboBox from \"sap/m/ComboBox\"; // Import the ComboBox\nimport Item from \"sap/ui/core/Item\"; // Import the Item for ComboBox items\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // Create a custom control which is ComboBox in this sample\n    const currencyComboBox = new ComboBox({\n        selectedKey: \"{currency}\", // Do not forget to add the path of the property\n        items: [\n            new Item({ key: \"EUR\", text: \"Euro\" }),\n            new Item({ key: \"USD\", text: \"US Dollar\" }),\n            new Item({ key: \"TRY\", text: \"Turkish Lira\" }),\n        ]\n    });\n\n    // Create an object from the CustomControlCL class with the UI Control and property name\n    const currencyControl = new CustomControlCL(currencyComboBox, \"currency\");\n\n    // Add the custom control\n    entry.addCustomControl(currencyControl);\n\n    entry.createNewEntry();\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/ui/CustomControlCL\", // Import the Custom Control Class\n    \"sap/m/ComboBox\", // Import the ComboBox\n    \"sap/ui/core/Item\" // Import the Item for ComboBox items\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, CustomControlCL, ComboBox, Item) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Create a custom control which is ComboBox in this sample\n          const currencyComboBox = new ComboBox({\n              selectedKey: \"{currency}\", // Do not forget to add the path of the property\n              items: [\n                  new Item({ key: \"EUR\", text: \"Euro\" }),\n                  new Item({ key: \"USD\", text: \"US Dollar\" }),\n                  new Item({ key: \"TRY\", text: \"Turkish Lira\" }),\n              ]\n          });\n\n          // Create an object from the CustomControlCL class with the UI Control and property name\n          const currencyControl = new CustomControlCL(currencyComboBox, \"currency\");\n\n          // Add the custom control\n          entry.addCustomControl(currencyControl);\n\n          entry.createNewEntry();\n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#validation","title":"Validation","text":"<p>Furthermore, the custom controls can be configured to execute a Validation Logic before the transient entity is submitted.</p> <p>Warning</p> <p>As the addition of a custom UI control to the form is unpredictable, the library is unable to perform any validation or mandatory checks. Instead, this must be done manually using the Validator Function.</p> <p>The UI5 Antares library passes the custom UI control, which has been added, as a parameter to the validator function.</p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products with the following properties: <code>ID</code>, <code>name</code>, <code>description</code>, <code>price</code>, and <code>currency</code>. We wish to add a sap.m.ComboBox with some predefined items for the <code>currency</code> property.</p> <p>It is also important to ensure that the end user does not leave the <code>currency</code> field blank and that they make a selection in this field.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport CustomControlCL from \"ui5/antares/ui/CustomControlCL\"; // Import the Custom Control Class\nimport ValidationLogicCL from \"ui5/antares/ui/ValidationLogicCL\"; // Import the ValidationLogicCL class\nimport { ValidatorValueParameter } from \"ui5/antares/types/ui/validation\"; // Import the validator function parameter type\nimport ComboBox from \"sap/m/ComboBox\"; // Import the ComboBox\nimport Item from \"sap/ui/core/Item\"; // Import the Item for ComboBox items\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // Create a custom control which is ComboBox in this sample\n    const currencyComboBox = new ComboBox({\n        selectedKey: \"{currency}\", // Do not forget to add the path of the property\n        items: [\n            new Item({ key: \"EUR\", text: \"Euro\" }),\n            new Item({ key: \"USD\", text: \"US Dollar\" }),\n            new Item({ key: \"TRY\", text: \"Turkish Lira\" }),\n        ]\n    });\n\n    // Create the validation object for the custom control\n    const currencyValidation = new ValidationLogicCL({\n      propertyName: \"currency\", // Currency property of the Products\n      validator: this.validateCurrency,\n      listener: this,\n      message: \"The currency field is mandatory\"        \n    });\n\n    // Create an object from the CustomControlCL class with the UI Control, property name and validation object\n    const currencyControl = new CustomControlCL(currencyComboBox, \"currency\", currencyValidation);\n\n    // Add the custom control\n    entry.addCustomControl(currencyControl);\n\n    entry.createNewEntry();\n  }\n\n  // UI5 Antares will pass the added combobox back to the validator function\n  public validateCurrency (control: ValidatorValueParameter): boolean {\n    if (!(control as ComboBox).getSelectedKey()) {\n      return false; // Validation is unsuccessful\n    }\n\n    return true; // Validation is successful\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/ui/CustomControlCL\", // Import the Custom Control Class\n    \"ui5/antares/ui/ValidationLogicCL\", // Import the ValidationLogicCL class\n    \"sap/m/ComboBox\", // Import the ComboBox\n    \"sap/ui/core/Item\" // Import the Item for ComboBox items\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, CustomControlCL, ValidationLogicCL, ComboBox, Item) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Create a custom control which is ComboBox in this sample\n          const currencyComboBox = new ComboBox({\n              selectedKey: \"{currency}\", // Do not forget to add the path of the property\n              items: [\n                  new Item({ key: \"EUR\", text: \"Euro\" }),\n                  new Item({ key: \"USD\", text: \"US Dollar\" }),\n                  new Item({ key: \"TRY\", text: \"Turkish Lira\" }),\n              ]\n          });\n\n          // Create the validation object for the custom control\n          const currencyValidation = new ValidationLogicCL({\n            propertyName: \"currency\", // Currency property of the Products\n            validator: this._validateCurrency,\n            listener: this,\n            message: \"The currency field is mandatory\"        \n          });\n\n          // Create an object from the CustomControlCL class with the UI Control, property name and validation object\n          const currencyControl = new CustomControlCL(currencyComboBox, \"currency\", currencyValidation);\n\n          // Add the custom control\n          entry.addCustomControl(currencyControl);\n\n          entry.createNewEntry();\n        },\n\n        // UI5 Antares will pass the added combobox back to the validator function\n        _validateCurrency: function (control) {\n          if (!control.getSelectedKey()) {\n            return false; // Validation is unsuccessful\n          }\n\n          return true; // Validation is successful          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#custom-control-from-fragment","title":"Custom Control From Fragment","text":"<p>As an alternative, custom controls can be added to the auto-generated form by loading the UI controls from a custom fragment created in the application files.</p> <p>Tip</p> <p>This approach allows for the addition of multiple controls simultaneously, eliminating the need to create UI controls in the controller. Custom controls can be organized in the <code>.fragment.xml</code> files</p> <p>Attention</p> <p>It is a requirement that a custom data with the UI5AntaresEntityPropertyName key be added to each UI control within the specified fragment. The value of the UI5AntaresEntityPropertyName key should be the property name of the <code>EntitySet</code> for which the custom control is added. Otherwise, the UI5 Antares library will be unable to identify for which property the UI control is being added.</p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products with the following properties: <code>ID</code>, <code>name</code>, <code>description</code>, <code>price</code>, and <code>currency</code>. We wish to add a sap.m.ComboBox with some predefined items for the <code>currency</code> property and a sap.m.Slider for the <code>price</code> property.</p> <p>Firstly, a file with <code>.fragment.xml</code> extension should be created in the application files. The UI controls will be placed into this file.</p> CustomControls.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:app=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\"\n&gt;\n    &lt;ComboBox\n        app:UI5AntaresEntityPropertyName=\"currency\"\n        selectedKey=\"{currency}\"\n    &gt;\n        &lt;items&gt;\n            &lt;core:Item\n                key=\"EUR\"\n                text=\"Euro\"\n            /&gt;\n            &lt;core:Item\n                key=\"USD\"\n                text=\"US Dollar\"\n            /&gt;\n            &lt;core:Item\n                key=\"TRY\"\n                text=\"Turkish Lira\"\n            /&gt;\n        &lt;/items&gt;\n    &lt;/ComboBox&gt;\n    &lt;Slider\n        app:UI5AntaresEntityPropertyName=\"price\"\n        width=\"100%\"\n        min=\"1000\"\n        max=\"100000\"\n        showAdvancedTooltip=\"true\"\n        showHandleTooltip=\"true\"\n        inputsAsTooltips=\"true\"\n        enableTickmarks=\"true\"\n        step=\"1000\"\n        class=\"sapUiMediumMarginBottom\"\n        value=\"{price}\"\n    /&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> <p></p> <p>Secondly, an object from the FragmentCL should be instantiated with the controller and fragment path parameters.</p> <p>Attention</p> <p>Please be aware that the addControlFromFragment() method is asynchronous and must be awaited.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the Fragment class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // Create an object from the FragmentCL class with the controller and fragment path parameters.\n    const fragment = new FragmentCL(this, \"your.apps.namespace.path.to.FragmentFileName\");\n\n    // Add the controls from the fragment. It is an asynchronous method and must be awaited.\n    await entry.addControlFromFragment(fragment);\n\n    entry.createNewEntry();\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/ui/FragmentCL\" // Import the Fragment class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Create an object from the FragmentCL class with the controller and fragment path parameters.\n          const fragment = new FragmentCL(this, \"your.apps.namespace.path.to.FragmentFileName\");\n\n          // Add the controls from the fragment. It is an asynchronous method and must be awaited.\n          await entry.addControlFromFragment(fragment);\n\n          entry.createNewEntry();\n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#validation_1","title":"Validation","text":"<p>Furthermore, the custom controls loaded from a fragment can be configured to execute a Validation Logic before the transient entity is submitted.</p> <p>Warning</p> <p>As the addition of a custom UI control to the form is unpredictable, the library is unable to perform any validation or mandatory checks. Instead, this must be done manually using the Validator Function.</p> <p>The UI5 Antares library passes the custom UI control, which has been added, as a parameter to the validator function.</p> <p>Attention</p> <p>It is a requirement that a custom data with the UI5AntaresValidationLogic key be added to each UI control within the specified fragment. The value of the UI5AntaresValidationLogic key should be the name of the validator function in the controller.</p> <p>Tip</p> <p>The default message displayed by the end user when the validation is unsuccessful can be modified by setting a custom data with the key UI5AntaresValidationMessage. The value of the UI5AntaresValidationMessage can be either the message itself or the i18n binding.</p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products with the following properties: <code>ID</code>, <code>name</code>, <code>description</code>, <code>price</code>, and <code>currency</code>. We wish to add a sap.m.ComboBox with some predefined items for the <code>currency</code> property and a sap.m.Slider for the <code>price</code> property.</p> <p>We also would like to add validation and validation messages to the custom controls.</p> <p>Firstly, a file with <code>.fragment.xml</code> extension should be created in the application files. The UI controls will be placed into this file.</p> CustomControls.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:app=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\"\n&gt;\n    &lt;ComboBox\n        app:UI5AntaresEntityPropertyName=\"currency\"\n        app:UI5AntaresValidationLogic=\"onValidateCurrency\"\n        app:UI5AntaresValidationMessage=\"{i18n&gt;currencyValidationFailed}\"\n        selectedKey=\"{currency}\"\n    &gt;\n        &lt;items&gt;\n            &lt;core:Item\n                key=\"EUR\"\n                text=\"Euro\"\n            /&gt;\n            &lt;core:Item\n                key=\"USD\"\n                text=\"US Dollar\"\n            /&gt;\n            &lt;core:Item\n                key=\"TRY\"\n                text=\"Turkish Lira\"\n            /&gt;\n        &lt;/items&gt;\n    &lt;/ComboBox&gt;\n    &lt;Slider\n        app:UI5AntaresEntityPropertyName=\"price\"\n        app:UI5AntaresValidationLogic=\"onValidatePrice\"\n        app:UI5AntaresValidationMessage=\"The price must be bigger than 15000\"\n        width=\"100%\"\n        min=\"1000\"\n        max=\"100000\"\n        showAdvancedTooltip=\"true\"\n        showHandleTooltip=\"true\"\n        inputsAsTooltips=\"true\"\n        enableTickmarks=\"true\"\n        step=\"1000\"\n        class=\"sapUiMediumMarginBottom\"\n        value=\"{price}\"\n    /&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> <p></p> <p>Secondly, an object from the FragmentCL should be instantiated with the controller and fragment path parameters.</p> <p>Attention</p> <p>Please be aware that the addControlFromFragment() method is asynchronous and must be awaited.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the Fragment class\nimport { ValidatorValueParameter } from \"ui5/antares/types/ui/validation\"; // Import the validator function parameter type\nimport ComboBox from \"sap/m/ComboBox\";\nimport Slider from \"sap/m/Slider\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // Create an object from the FragmentCL class with the controller and fragment path parameters.\n    const fragment = new FragmentCL(this, \"your.apps.namespace.path.to.FragmentFileName\");\n\n    // Add the controls from the fragment. It is an asynchronous method and must be awaited.\n    await entry.addControlFromFragment(fragment);\n\n    entry.createNewEntry();\n  }\n\n  // The name of the validator function must match to the custom data UI5AntaresValidationLogic defined in the .fragment.xml file\n  public onValidateCurrency (control: ValidatorValueParameter): boolean {\n    if (!(control as ComboBox).getSelectedKey()) {\n      return false; // Validation is unsuccessful\n    }\n\n    return true; // Validation is successful\n  }\n\n  // The name of the validator function must match to the custom data UI5AntaresValidationLogic defined in the .fragment.xml file\n  public onValidatePrice (control: ValidatorValueParameter): boolean {\n    if ((control as Slider).getValue() &lt;= 15000) {\n      return false; // Validation is unsuccessful\n    }\n\n    return true; // Validation is successful\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/ui/FragmentCL\" // Import the Fragment class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Create an object from the FragmentCL class with the controller and fragment path parameters.\n          const fragment = new FragmentCL(this, \"your.apps.namespace.path.to.FragmentFileName\");\n\n          // Add the controls from the fragment. It is an asynchronous method and must be awaited.\n          await entry.addControlFromFragment(fragment);\n\n          entry.createNewEntry();\n        },\n\n        // The name of the validator function must match to the custom data UI5AntaresValidationLogic defined in the .fragment.xml file\n        onValidateCurrency: function (control) {\n          if (!control.getSelectedKey()) {\n            return false; // Validation is unsuccessful\n          }\n\n          return true; // Validation is successful\n        },\n\n        // The name of the validator function must match to the custom data UI5AntaresValidationLogic defined in the .fragment.xml file\n        onValidatePrice: function (control) {\n          if (control.getValue() &lt;= 15000) {\n            return false; // Validation is unsuccessful\n          }\n\n          return true; // Validation is successful\n        }        \n      });\n\n    });\n</code></pre>"},{"location":"entry_create/#custom-content","title":"Custom Content","text":"<p>It is possible to add any UI control to the dialog below the auto-generated form. </p> <p>Info</p> <p>It should be noted that there is a distinction between a Custom Control and Custom Content. A Custom Control can only be added for the properties of the <code>EntitySet</code> specified in the constructor, whereas a custom content is a UI control that is required on the dialog but is not included in the transient entity.</p> <p>Attention</p> <p>Please be advised that custom content is not included in the Validation Logic process. The UI5 Antares is designed solely for the addition of custom content to the dialog. However, it is important to note that the custom content must be managed manually.</p> <p>Example</p> <p>To illustrate, a custom content could be a sap.m.Image, a sap.m.upload.UploadSet, or any other UI control that is necessary for the functionality of the dialog.</p> <p>To add a custom content to the dialog, the addCustomContent() method can be utilized.</p> Setter (addCustomContent)Getter (getCustomContents) <p> Parameter Type Mandatory Description content Control Yes The UI control to add into the dialog </p> <p> Returns Description Control[] Returns all the UI controls that were added using addCustomContent() method. Default value is [] </p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products and we wish to add an sap.m.upload.UploadSet to the dialog that the UI5 Antares will generate.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport UploadSet from \"sap/m/upload/UploadSet\"; // Import the Upload Set\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Create the custom content\n    const upload = new UploadSet();\n    upload.addStyleClass(\"sapUiSmallMargin\");\n\n    // Add the custom content\n    entry.addCustomContent(upload);\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"sap/m/upload/UploadSet\" // Import the Upload Set\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, UploadSet) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Create the custom content\n          const upload = new UploadSet();\n          upload.addStyleClass(\"sapUiSmallMargin\");\n\n          // Add the custom content\n          entry.addCustomContent(upload);\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#custom-content-from-fragment","title":"Custom Content From Fragment","text":"<p>As an alternative method, you can also add custom content to the dialog by loading the UI controls from a custom fragment created in your application files.</p> <p>Tip</p> <p>This approach allows for the addition of multiple contents simultaneously, eliminating the need to create UI controls in the controller. Custom contents can be organized in the <code>.fragment.xml</code> files</p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products and we wish to add an sap.m.Image and an sap.m.RadioButtonGroup loaded from a fragment to the dialog that UI5 Antares will generate.</p> <p>Firstly, a file with <code>.fragment.xml</code> extension should be created in the application files. The UI controls will be placed into this file.</p> CustomContents.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n&gt;\n    &lt;VBox&gt;\n        &lt;FlexBox justifyContent=\"Center\"&gt;\n            &lt;Image\n                class=\"sapUiSmallMargin\"\n                src=\"./img/antares.jpg\"\n                width=\"10rem\"\n            /&gt;\n        &lt;/FlexBox&gt;\n        &lt;RadioButtonGroup selectedIndex=\"0\"&gt;\n            &lt;buttons&gt;\n                &lt;RadioButton text=\"Option 1\" /&gt;\n                &lt;RadioButton text=\"Option 2\" /&gt;\n                &lt;RadioButton text=\"Option 3\" /&gt;\n            &lt;/buttons&gt;\n        &lt;/RadioButtonGroup&gt;\n    &lt;/VBox&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> <p></p> <p>Secondly, an object from the FragmentCL should be instantiated with the controller and fragment path parameters.</p> <p>Attention</p> <p>Please be aware that the addContentFromFragment() method is asynchronous and must be awaited.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the Fragment class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // Create an object from the FragmentCL class with the controller and fragment path parameters.\n    const fragment = new FragmentCL(this, \"your.apps.namespace.path.to.FragmentFileName\");\n\n    // Add the controls from the fragment. It is an asynchronous method and must be awaited.\n    await entry.addContentFromFragment(fragment);\n\n    entry.createNewEntry();\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/ui/FragmentCL\" // Import the Fragment class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Create an object from the FragmentCL class with the controller and fragment path parameters.\n          const fragment = new FragmentCL(this, \"your.apps.namespace.path.to.FragmentFileName\");\n\n          // Add the controls from the fragment. It is an asynchronous method and must be awaited.\n          await entry.addContentFromFragment(fragment);\n\n          entry.createNewEntry();\n        }\n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#custom-fragment","title":"Custom Fragment","text":"<p>If you do not wish to use the library-generated form and content, an alternative option is to use your own fragment and dialog with any desired content. The UI5 Antares library will create a transient entity and open the dialog loaded from your fragment. Additionally, the transient entity will be bound to the dialog.</p> <p>Attention</p> <p>Please note that certain features of the UI5 Antares library are only accessible when the dialog generation is handled by the library itself. If you wish to utilise a custom fragment, you will be required to perform certain steps manually.</p> <p>1) The Entry Create and Entry Update classes provide a public method named submit(), which must be called manually in order to submit the transient entity.</p> <p>2) In the event that a transient entity should not be submitted and the dialog should be closed and destroyed, the reset() method, which is provided by the Entry classes, must be called.</p> <p>Tip</p> <p>The submit(resetAllOnFail:boolean = false) method accepts an optional parameter with a default value of false. This parameter indicates whether all transient entities in the OData V2 Model should be reset or only the current context. If you wish to reset all transient entities, please set this parameter to true. If you only wish to reset the current transient entity, there is no need to set this parameter. </p> <p>Tip</p> <p>Please be advised that the fragment to be loaded must contain a sap.m.Dialog and that all UI controls must be placed as the content of the dialog.</p> <p>Attention</p> <p>It should be noted that only a limited number of features of the UI5 Antares library can be utilized with a custom fragment.</p>"},{"location":"entry_create/#supported-features","title":"Supported Features","text":"Feature Description Mandatory Properties By default, UI5 Antares performs a mandatory check for the properties with Nullable=\"false\" attribute and the properties defined using setMandatoryProperties() method. However, this feature can be deactived using setAutoMandatoryCheck() method Mandatory Error Message The default message that is displayed when the mandatory check is unsuccessful can be modified Attach Submit Completed It is possible to create a function that will be called after the transient entity has been submitted successfully Attach Submit Failed It is possible to create a function that will be called if the transient entity submission fails Properties with Edm.Guid Type By default, UI5 Antares generates random UUID for the key properties with Edm.Guid type <p>To use a custom fragment, the setFragmentPath() method can be utilized.</p> Setter (setFragmentPath)Getter (getFragmentPath) <p> Parameter Type Mandatory Description fragmentPath <code>string</code> Yes The path of the fragment that will be loaded by the library containsSmartForm? <code>boolean</code> No It should be set to true if the dialog contains a Smart Form </p> <p> Returns Description <code>string</code> | <code>undefined</code> Returns the fragment path that was set using getFragmentPath() method. Default value is undefined </p> <p>Example</p> <p>Let us assume we are working with an <code>EntitySet</code> called Products. Rather than having the library generate a form, our goal is to create a custom fragment.</p> <p>Firstly, a file with <code>.fragment.xml</code> extension should be created in the application files. The UI controls will be placed into this file.</p> MCustomDialog.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n&gt;\n    &lt;Dialog title=\"Create New Product\"&gt;\n        &lt;form:SimpleForm&gt;\n            &lt;form:content&gt;\n                &lt;Label text=\"Product ID\" /&gt;\n                &lt;MaskInput\n                    mask=\"CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC\"\n                    value=\"{ID}\"\n                    placeholderSymbol=\"_\"\n                &gt;\n                    &lt;rules&gt;\n                        &lt;MaskInputRule\n                            maskFormatSymbol=\"C\"\n                            regex=\"[a-f0-9]\"\n                        /&gt;\n                    &lt;/rules&gt;\n                &lt;/MaskInput&gt;\n                &lt;Label text=\"Name\" /&gt;\n                &lt;Input value=\"{name}\" /&gt;\n                &lt;Label text=\"Description\" /&gt;\n                &lt;TextArea\n                    value=\"{description}\"\n                    rows=\"5\"\n                /&gt;\n                &lt;Label text=\"Price\" /&gt;\n                &lt;Slider\n                    width=\"100%\"\n                    min=\"1000\"\n                    max=\"100000\"\n                    showAdvancedTooltip=\"true\"\n                    showHandleTooltip=\"true\"\n                    inputsAsTooltips=\"true\"\n                    enableTickmarks=\"true\"\n                    step=\"1000\"\n                    class=\"sapUiMediumMarginBottom\"\n                    value=\"{price}\"\n                /&gt;\n                &lt;Label text=\"Currency\" /&gt;\n                &lt;ComboBox selectedKey=\"{currency}\"&gt;\n                    &lt;items&gt;\n                        &lt;core:Item\n                            key=\"EUR\"\n                            text=\"Euro\"\n                        /&gt;\n                        &lt;core:Item\n                            key=\"USD\"\n                            text=\"US Dollar\"\n                        /&gt;\n                        &lt;core:Item\n                            key=\"TRY\"\n                            text=\"Turkish Lira\"\n                        /&gt;\n                    &lt;/items&gt;\n                &lt;/ComboBox&gt;\n            &lt;/form:content&gt;\n        &lt;/form:SimpleForm&gt;\n        &lt;beginButton&gt;\n            &lt;Button\n                text=\"Complete\"\n                press=\"onCompleteProduct\"\n            /&gt;\n        &lt;/beginButton&gt;\n        &lt;endButton&gt;\n            &lt;Button\n                text=\"Close\"\n                press=\"onCloseProductDialog\"\n            /&gt;\n        &lt;/endButton&gt;\n    &lt;/Dialog&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> <p></p> <p>Secondly, an object from the Entry Create class should be instantiated with the controller and <code>EntitySet</code> name.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport ResponseCL from \"ui5/antares/entry/v2/ResponseCL\"; // Import the ResponseCL class\nimport { ISubmitResponse } from \"ui5/antares/types/entry/submit\"; // Import the error type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  // Class property\n  private productEntry: EntryCreateCL&lt;IProducts&gt;;\n\n  public onInit() {\n\n  }\n\n  public async onCreateProduct () {\n    // Create an object and set it to the class property\n    this.productEntry = new EntryCreateCL&lt;IProducts&gt;(this, \"Products\");\n\n    // Set the path of the custom fragment\n    this.productEntry.setFragmentPath(\"your.apps.namespace.path.to.FragmentFileName\");\n\n    // Attach submit completed\n    this.productEntry.attachSubmitCompleted(this.productSubmitCompleted, this);\n\n    // Attach submit failed\n    this.productEntry.attachSubmitFailed(this.productSubmitFailed, this);\n\n    // Load the fragment\n    this.productEntry.createNewEntry();\n  }\n\n  // Press event of the begin button in the dialog\n  public onCompleteProduct () {\n    // Do your validation\n\n    // Submit the entity\n    this.productEntry.submit();\n  }\n\n  // Press event of the end button in the dialog\n  public onCloseProductDialog () {\n    // Reset the entity and close the dialog\n    this.productEntry.reset();\n  } \n\n  // Submit Completed Handler\n  private productSubmitCompleted (response: ResponseCL&lt;IProducts&gt;): void {\n    // Get the status code. Please be aware, it may also be undefined\n    const statusCode = response.getStatusCode();\n\n    // Get the data that was submitted. Please be aware, it may also be undefined\n    const submittedData = response.getResponse();\n\n    if (submittedData) {\n      // Some operations\n      const createdProductID = submittedData.ID;\n    }\n  }\n\n  // Please use the ISubmitResponse type for the ResponseCL generic\n  private productSubmitFailed(response: ResponseCL&lt;ISubmitResponse&gt;): void {\n    // Get the status code. Please be aware, it may also be undefined\n    const statusCode = response.getStatusCode();\n\n    // Get the response. Please be aware, it may also be undefined\n    const reason = response.getResponse();\n\n    // Get the statusText\n    if (reason) {\n      MessageBox.error(reason.statusText || \"The product was not created!\");\n    }\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"sap/m/MessageBox\" // Import the Fragment class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // Create an object and set it to the class property\n          this.productEntry = new EntryCreateCL(this, \"Products\");\n\n          // Set the path of the custom fragment\n          this.productEntry.setFragmentPath(\"your.apps.namespace.path.to.FragmentFileName\");\n\n          // Attach submit completed\n          this.productEntry.attachSubmitCompleted(this.productSubmitCompleted, this);\n\n          // Attach submit failed\n          this.productEntry.attachSubmitFailed(this.productSubmitFailed, this);\n\n          // Load the fragment\n          this.productEntry.createNewEntry();\n        },\n\n        // Press event of the begin button in the dialog\n        onCompleteProduct: function () {\n          // Do your validation\n\n          // Submit the entity\n          this.productEntry.submit();\n        },\n\n        // Press event of the end button in the dialog\n        onCloseProductDialog: function () {\n          // Reset the entity and close the dialog\n          this.productEntry.reset();\n        }, \n\n        // Submit Completed Handler\n        productSubmitCompleted: function (response) {\n          // Get the status code. Please be aware, it may also be undefined\n          const statusCode = response.getStatusCode();\n\n          // Get the data that was submitted. Please be aware, it may also be undefined\n          const submittedData = response.getResponse();\n\n          if (submittedData) {\n            // Some operations\n            const createdProductID = submittedData.ID;\n          }\n        },\n\n        // Submit Failed Handler\n        productSubmitFailed: function (response) {\n          // Get the status code. Please be aware, it may also be undefined\n          const statusCode = response.getStatusCode();\n\n          // Get the response. Please be aware, it may also be undefined\n          const reason = response.getResponse();\n\n          // Get the statusText\n          if (reason) {\n            MessageBox.error(reason.statusText || \"The product was not created!\");\n          }\n        }   \n      });\n\n    });\n</code></pre> <p></p>"},{"location":"entry_create/#auto-mandatory-check","title":"Auto Mandatory Check","text":"<p>The UI5 Antares library performs a mandatory check for properties with the Nullable=\"false\" attribute and those defined using the setMandatoryProperties() method by default. However, this feature can be disabled using the setAutoMandatoryCheck() method if required.</p> Setter (setAutoMandatoryCheck)Getter (getAutoMandatoryCheck) <p> Parameter Type Mandatory Description autoMandatoryCheck <code>boolean</code> Yes If set to false, mandatory check is deactivated </p> <p> Returns Description <code>boolean</code> Returns the value that was set using setAutoMandatoryCheck() method. Default value is true </p>"},{"location":"entry_delete/","title":"Entry Delete","text":"<p>The EntryDeleteCL class is responsible for managing the DELETE operation through the OData V2 model. This class eliminates the need for developers to concern themselves with fragments, user input validations, and value help creation when working on custom SAPUI5 applications or Fiori Elements extensions. The following section outlines the key features of the Entry Delete class.</p>"},{"location":"entry_delete/#features","title":"Features","text":"<ul> <li>sap.m.Dialog generation with a SmartForm, SimpleForm, or custom content</li> <li>sap.uxap.ObjectPageLayout generation with a SmartForm, SimpleForm, or custom content</li> <li>Property sorting, excluding</li> <li>Label generation for the SmartForm, SimpleForm elements</li> <li>delete() handling based on the user interaction</li> <li>Call a fragment and bind the context in case you do not want to use the auto-generated dialog</li> </ul> <p>Attention</p> <p>Please be advised that the majority of features available in the Entry Create class are also accessible in the Entry Delete class. However, please note that the original documentation was created on the Entry Create page. To view a list of available features, please refer to the Available Features section.</p>"},{"location":"entry_delete/#use-case","title":"Use Case","text":"<p>Let's assume you have an <code>EntitySet</code> named Products, which is bound to a table. You would like to enable the end user to select a line from the table and delete the selected entity from the database through the OData V2 Model. To do so, you must follow these steps.</p> <p>1) Should you wish for the user to view the data of the selected entity on a pop-up screen, it is necessary to create a .fragment.xml file that contains a dialog with form content (Simple, Smart, etc.) and call it from the controller or generate the dialog directly on the controller.</p> <p>2) It is necessary to handle the selection of the table and the binding of the selected entity to the dialog or form.</p> <p>3) It is essential to utilize the OData V2 Model to execute the deletion process.</p> <p>The EntryDeleteCL class is responsible for executing all of the steps mentioned above.</p>"},{"location":"entry_delete/#constructor","title":"Constructor","text":"<p>In order to utilise the functionality of EntryDeleteCL, it is necessary to initialise the object.</p> Parameter Type Mandatory Default Value Description controller sap.ui.core.mvc.Controller Yes The controller object (usually <code>this</code> object) settings <code>object</code> Yes \u2003entityPath <code>string</code> Yes The name of the EntitySet. It can start with a \"/\" (slash) \u2003initializer <code>string</code> | sap.ui.model.Context | <code>EntityKeysT</code> Yes This parameter identifies the table ID, context binding, or key values of the entity that will be deleted. modelName? <code>string</code> No <code>undefined</code> The name of the OData V2 model which can be found on the manifest.json file. Leave this parameter undefined if the name of the OData model = \"\" (empty string) <p>There are three distinct methods for constructing an object from the Entry Delete class.</p>"},{"location":"entry_delete/#constructor-with-a-table-id","title":"Constructor with a Table ID","text":"<p>The most straightforward method for utilizing the capabilities of the Entry Delete class is to construct an object with the ID of a table that you have on your XML view. This method offers several advantages.</p> <p>1) The table row selected by the end user is automatically detected by the Entry Delete class, and the context binding of the selected row will be bound to the auto-generated dialog.</p> <p>2) If no table row is selected by the end user, a default message is displayed in the sap.m.MessageBox.error to the end user.</p> <p>Attention</p> <p>Please note that this method supports only the table types and selection modes listed below. In the event that the selection mode of the table whose ID is being used for object construction is not supported, an error will be thrown by the library.</p> <p>Tip</p> <p>The default message displayed when the end user has not selected a row from the table yet can be modified using the setSelectRowMessage() method.</p>"},{"location":"entry_delete/#supported-table-types","title":"Supported Table Types","text":"Table Type Selection Mode sap.m.Table SingleSelect | SingleSelectLeft | SingleSelectMaster sap.ui.table.Table Single sap.ui.comp.smarttable.SmartTable Single sap.ui.table.AnalyticalTable Single sap.ui.table.TreeTable Single <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products, which is bound to an sap.m.Table on the XML view. Our objective is to add an sap.m.Button to the header toolbar of the table. When the user selects a row from the table and presses the Delete Product button, a dialog will open with a Delete button so the user can view the data before it is deleted.</p> <p></p> <p>Tip for TypeScript</p> <p>The EntryDeleteCL&lt;EntityT, EntityKeysT&gt; class is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityT</code> type is used for the parameter of the function that is attached using the attachDeleteCompleted() method. This allows you to retrieve the data of the deleted entity after it has been successfully deleted.</p> <p>The <code>EntityKeysT</code> type is utilized as one of the types of the <code>initializer</code> parameter in the class constructor.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryDeleteCL from \"ui5/antares/entry/v2/EntryDeleteCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteCategory() {\n    // Initialize without a type and with the table id\n    const entry = new EntryDeleteCL(this, {\n      entityPath: \"Categories\",\n      initializer: \"tblCategories\" // table id       \n    }); \n  }\n\n  public async onDeleteProduct() {\n    // Initialize with a type and the table id\n    const entry = new EntryDeleteCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\" // table id       \n    }); \n  }\n\n  public async onDeleteCustomer() {\n    // Initialize with a model name and the table id\n    const entry = new EntryDeleteCL(this, {\n      entityPath: \"Customers\",\n      initializer: \"tblCustomers\" // table id      \n    }, \"myODataModelName\"); \n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryDeleteCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryDeleteCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize with the table id\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\" // table id                \n          }); \n        },\n\n        onDeleteCategory: async function () {\n          // Initialize with a model name\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Categories\",\n            initializer: \"tblCategories\" // table id                 \n          }, \"myODataModelName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_delete/#constructor-with-a-context-binding","title":"Constructor with a Context Binding","text":"<p>An alternative approach to constructing an object from the Entry Delete class is to utilise the context of the entity that will be deleted by the end user.</p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products, which is bound to an sap.m.Table on the XML view. Our objective is to add an sap.m.Button to the header toolbar of the table. When the user selects a row from the table and presses the Delete Product button, we will retrieve the context of the selected row and use it to construct an object from the Entry Delete class.</p> <p></p> <p>Tip for TypeScript</p> <p>The EntryDeleteCL&lt;EntityT, EntityKeysT&gt; class is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityT</code> type is used for the parameter of the function that is attached using the attachDeleteCompleted() method. This allows you to retrieve the data of the deleted entity after it has been successfully deleted.</p> <p>The <code>EntityKeysT</code> type is utilized as one of the types of the <code>initializer</code> parameter in the class constructor.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryDeleteCL from \"ui5/antares/entry/v2/EntryDeleteCL\"; // Import the class\nimport MessageBox from \"sap/m/MessageBox\";\nimport Table from \"sap/m/Table\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteCategory() {\n    // Get the selected item and warn the end user if no row was selected\n    const selectedItem = (this.getView().byId(\"tblCategories\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    // Get the selected context\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize without a type and use the binding context\n    const entry = new EntryDeleteCL(this, {\n      entityPath: \"Categories\",\n      initializer: selectedContext // binding context\n    }); \n  }\n\n  public async onDeleteProduct() {\n    // Get the selected item and warn the end user if no row was selected\n    const selectedItem = (this.getView().byId(\"tblProducts\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    // Get the selected context\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize with a type and use the binding context\n    const entry = new EntryDeleteCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: selectedContext // binding context\n    }); \n  }\n\n  public async onDeleteCustomer() {\n    // Get the selected item and warn the end user if no row was selected\n    const selectedItem = (this.getView().byId(\"tblCustomers\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    // Get the selected context\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize with a model name and use the binding context\n    const entry = new EntryDeleteCL(this, {\n      entityPath: \"Customers\",\n      initializer: selectedContext // binding context   \n    }, \"myODataModelName\"); \n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryDeleteCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryDeleteCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Get the selected item and warn the end user if no row was selected\n          const selectedItem = this.getView().byId(\"tblProducts\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          // Get the selected context\n          const selectedContext = selectedItem.getBindingContext();\n\n          // Initialize with the binding context\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Products\",\n            initializer: selectedContext // binding context     \n          }); \n        },\n\n        onDeleteCategory: async function () {\n          // Get the selected item and warn the end user if no row was selected\n          const selectedItem = this.getView().byId(\"tblCategories\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          // Get the selected context\n          const selectedContext = selectedItem.getBindingContext();\n\n          // Initialize with the binding context\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Categories\",\n            initializer: selectedContext // binding context               \n          }, \"myODataModelName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_delete/#constructor-with-entity-keys","title":"Constructor with Entity Keys","text":"<p>The final method for constructing an object from the Entry Delete class is to utilize the key values of the entity that will be deleted by the end user.</p> <p>Example</p> <p>For the purposes of this example, let us consider an <code>EntitySet</code> named Products with a single key property named <code>ID</code>, whose type is <code>Edm.Guid</code>. We would like to allow the end user to delete a specific entity with the key value: ID = \"b2f0013e-418f-42aa-9a24-3770fe17ce18\".</p> <p>Tip</p> <p>Please note that if the <code>EntitySet</code> is bound to a table, you can retrieve the values of the key properties of the selected row using the getBindingContext().getObject() method.</p> <p>Info</p> <p>The EntryDeleteCL class creates a binding context with the values of the specified key properties using the <code>initializer</code> parameter in the class constructor and subsequently binds the created context to the dialog.</p> <p>Tip for TypeScript</p> <p>The EntryDeleteCL&lt;EntityT, EntityKeysT&gt; class is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityT</code> type is used for the parameter of the function that is attached using the attachDeleteCompleted() method. This allows you to retrieve the data of the deleted entity after it has been successfully deleted.</p> <p>The <code>EntityKeysT</code> type is utilized as one of the types of the <code>initializer</code> parameter in the class constructor.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryDeleteCL from \"ui5/antares/entry/v2/EntryDeleteCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteCategory() {\n    // Prepare the key values of a specific entity\n    const keyValues = {\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n    };\n\n    // Initialize without a type and use the key values as the initializer\n    const entry = new EntryDeleteCL(this, {\n      entityPath: \"Categories\",\n      initializer: keyValues // key values of the entity\n    });\n  }\n\n  public async onDeleteProduct() {\n    // Prepare the key values of a specific entity\n    const keyValues = {\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n    };\n\n    // Initialize with a type and use the key values as the initializer\n    const entry = new EntryDeleteCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: keyValues // key values of the entity\n    });\n  }\n\n  public async onDeleteCustomer() {\n    // Prepare the key values of a specific entity\n    const keyValues = {\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n    };\n\n    // Initialize with a model name and use the key values as the initializer\n    const entry = new EntryDeleteCL(this, {\n      entityPath: \"Customers\",\n      initializer: keyValues // key values of the entity\n    }, \"myODataModelName\"); \n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryDeleteCL\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryDeleteCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Prepare the key values of a specific entity\n          const keyValues = {\n            ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n          };\n\n          // Initialize with the entity set name and use the key values as the initializer\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Products\",\n            initializer: keyValues // key values of the entity\n          });  \n        },\n\n        onDeleteCategory: async function () {\n          // Prepare the key values of a specific entity\n          const keyValues = {\n            ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n          };\n\n          // Initialize with the entity set name and use the key values as the initializer\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Categories\",\n            initializer: keyValues // key values of the entity        \n          }, \"myODataModelName\");          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_delete/#select-row-message","title":"Select Row Message","text":"<p>If the object from the Entry Delete class is constructed using the Constructor with a Table ID approach, a default error message is displayed in an sap.m.MessageBox.error to the end user when the user has not yet selected a row from the table.</p> <p>To change the default message, the setSelectRowMessage() method can be utilized.</p> Setter (setSelectRowMessage)Getter (getSelectRowMessage) <p> Parameter Type Mandatory Description message <code>string</code> Yes The message that is displayed when the end user has not selected a row from the table </p> <p> Returns Description <code>string</code> Returns the value that was set using setSelectRowMessage() method. Default value is Please select a row from the table. </p>"},{"location":"entry_delete/#delete-entry","title":"Delete Entry","text":"<p>The deleteEntry(previewBeforeDelete: boolean = true) method establishes a connection between the context, determined by the <code>initializer</code> parameter in the class constructor, and the dialog that is either automatically generated or loaded from the fragment placed in the application files. Once the context is linked, the generated or loaded dialog is opened.</p> <p>The deleteEntry() method utilizes the ODataMetaModel to determine the <code>EntityType</code> of the <code>EntitySet</code> designated through the constructor. It then generates the form with the properties in the same order as the OData metadata, in accordance with the <code>EntityType</code>.</p> <p>Note</p> <p>Please note that the labels are generated assuming that the naming convention of the <code>EntityType</code> is camelCase. For further details, please see the Label Generation section.</p> <p>Attention</p> <p>It is not possible to modify any of the properties of an <code>EntitySet</code> on the auto-generated dialog. This behaviour cannot be altered.</p> <p>Warning</p> <p>Please be advised that the deleteEntry() method must be called after any configurations have been made through the public methods of the Entry Delete class. Any configurations (form title, begin button text, etc.) made after the deleteEntry() method will not be reflected. As a best practice, the deleteEntry() method should be called at the end of your code block.</p> <p>Note</p> <p>The key properties with Edm.Guid type are not visible by default on the generated form. However, this behavior can be modified using the setDisplayGuidProperties() method.</p> <p>Attention</p> <p>Please be advised that the random UUID generation for properties with the <code>Edm.Guid</code> type is not available in the Entry Delete class.</p> <p>By default, the deleteEntry(previewBeforeDelete: boolean = true) method generates a dialog and opens it with the bound context before the deletion is completed. The automatically generated dialog contains a Delete button. When the user presses the Delete button, a sap.m.MessageBox.confirm is displayed to the end user to complete the deletion process.</p> <p>Tip</p> <p>The automatically generated dialog opening step can be bypassed by setting the previewBeforeDelete=false parameter in the deleteEntry(previewBeforeDelete: boolean = true) method. With this configuration, the end user will only see a sap.m.MessageBox.confirm.</p>"},{"location":"entry_delete/#method-parameters","title":"Method Parameters","text":"Parameter Type Mandatory Default Value Description previewBeforeDelete <code>boolean</code> No true If set to false, no dialog will be displayed by the end user. Only the confirmation MessageBox is displayed Returns Description <code>Promise&lt;void&gt;</code> Once the promise has been fulfilled, the bound entry can be retrieved using the getEntryContext() method with the object instantiated from the EntryDeleteCL class. <p>Info</p> <p>The deleteEntry() method uses the default configurations when creating the dialog. However, these configurations can be modified using the public setter methods.</p>"},{"location":"entry_delete/#default-values","title":"Default Values","text":"Term Default Value Description Setter Getter Naming Strategy NamingStrategies.CAMEL_CASE The default naming strategy is CAMEL_CASE setNamingStrategy() getNamingStrategy() Resource Bundle Prefix <code>antares</code> The default resource bundle prefix is antares setResourceBundlePrefix() getResourceBundlePrefix() Use Metadata Labels <code>false</code> The labels are not derived from the metadata, but rather generated. setUseMetadataLabels() getUseMetadataLabels() Form Type FormTypes.SMART The SmartForm with SmartFields is generated as the default option. setFormType() getFormType() Form Title <code>Delete + ${entityPath}</code> The <code>entityPath</code> parameter of the constructor is used setFormTitle() getFormTitle() Begin Button Text <code>Delete</code> The default begin button text is Delete setBeginButtonText() getBeginButtonText() Begin Button Type ButtonType.Reject The default button type is Reject setBeginButtonType() getBeginButtonType() End Button Text <code>Close</code> The default end button text is Close setEndButtonText() getEndButtonText() End Button Type ButtonType.Default The default button type is Default setEndButtonType() getEndButtonType() Confirmation Text <code>The selected line will be deleted. Do you confirm?</code> The message displayed in the MessageBox.confirm setConfirmationText() getConfirmationText() Confirmation Title <code>Confirm Delete</code> The title of the MessageBox.confirm/td&gt;             setConfirmationTitle() getConfirmationTitle() <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryDeleteCL from \"ui5/antares/entry/v2/EntryDeleteCL\"; // Import the class\nimport Table from \"sap/m/Table\";\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteProduct() {\n    // Initialize without a type and with a table id\n    const entry = new EntryDeleteCL(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\"\n    });\n\n    // Call with no preview\n    entry.deleteEntry(false); \n  }\n\n  public async onDeleteCategory() {\n    const selectedItem = (this.getView().byId(\"tblCategories\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize with a type and a binding context\n    const entry = new EntryDeleteCL&lt;ICategory&gt;(this, {\n      entityPath: \"Categories\",\n      initializer: selectedContext\n    }); \n\n    // Call with the preview\n    entry.deleteEntry();\n  }\n\n  public async onDeleteCustomer () {\n    const selectedItem = (this.getView().byId(\"tblCustomers\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    };\n\n    const customerKeys = {\n      ID: selectedItem.getBindingContext().getObject().ID\n    };\n\n    // Initialize without a type and with the key values\n    const entry = new EntryDeleteCL(this, {\n      entityPath: \"Customers\",\n      initializer: customerKeys\n    });\n\n    // Call with the preview\n    entry.deleteEntry();\n  }\n}\n\ninterface ICategory {\n  ID: string;\n  name?: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryDeleteCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryDeleteCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize with a table id\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\"\n          }); \n\n          // Call with no preview\n          entry.deleteEntry(false);\n        },\n\n        onDeleteCategory: async function () {\n          const selectedItem = this.getView().byId(\"tblCategories\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          const selectedContext = selectedItem.getBindingContext();\n\n          // Initialize with a binding context\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Categories\",\n            initializer: selectedContext\n          }); \n\n          // Call with the preview\n          entry.deleteEntry();\n        },\n\n        onDeleteCustomer: async function () {\n          const selectedItem = this.getView().byId(\"tblCustomers\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          const customerKeys = {\n            ID: selectedItem.getBindingContext().getObject().ID\n          };\n\n          // Initialize with the key values\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Customers\",\n            initializer: customerKeys\n          }); \n\n          // Call with the preview\n          entry.deleteEntry();          \n        }\n      });\n\n    });\n</code></pre> <p>The generated form with default values will be similar in appearance to the following example. However, it should be noted that the exact appearance may vary depending on the configurations and the <code>EntityType</code> properties of the <code>EntitySet</code>.</p> <p></p> <p></p>"},{"location":"entry_delete/#confirmation-text","title":"Confirmation Text","text":"<p>To prompt the end user for confirmation before deleting data, a default confirmation message is displayed on a sap.m.MessageBox.confirm.</p> <p>To change the default confirmation message, the setConfirmationText() method can be utilized.</p> Setter (setConfirmationText)Getter (getConfirmationText) <p> Parameter Type Mandatory Description text <code>string</code> Yes The message displayed in MessageBox.confirm before the deletion </p> <p> Returns Description <code>string</code> Returns the value that was set using setConfirmationText() method. Default value is The selected line will be deleted. Do you confirm? </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryDeleteCL from \"ui5/antares/entry/v2/EntryDeleteCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteProduct() {\n    // Initialize with a type and with a table id\n    const entry = new EntryDeleteCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\"\n    });\n\n    // Change the confirmation message\n    entry.setConfirmationText(\"This line will be removed from the database. Do you want to continue?\");\n\n    // Call with no preview\n    entry.deleteEntry(false); \n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryDeleteCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryDeleteCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize with a table id\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\"\n          });\n\n          // Change the confirmation message\n          entry.setConfirmationText(\"This line will be removed from the database. Do you want to continue?\");\n\n          // Call with no preview\n          entry.deleteEntry(false);  \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_delete/#confirmation-title","title":"Confirmation Title","text":"<p>To prompt the end user for confirmation before deleting data, a default title is displayed on a sap.m.MessageBox.confirm.</p> <p>To change the default title of the MessageBox, the setConfirmationTitle() method can be utilized.</p> Setter (setConfirmationTitle)Getter (getConfirmationTitle) <p> Parameter Type Mandatory Description title <code>string</code> Yes The title displayed in MessageBox.confirm before the deletion </p> <p> Returns Description <code>string</code> Returns the value that was set using setConfirmationTitle() method. Default value is Confirm Delete </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryDeleteCL from \"ui5/antares/entry/v2/EntryDeleteCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteProduct() {\n    // Initialize with a type and with a table id\n    const entry = new EntryDeleteCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\"\n    });\n\n    // Change the confirmation title\n    entry.setConfirmationTitle(\"My Confirmation Title\");\n\n    // Call with no preview\n    entry.deleteEntry(false); \n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryDeleteCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryDeleteCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize with a table id\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\"\n          });\n\n          // Change the confirmation title\n          entry.setConfirmationTitle(\"My Confirmation Title\");\n\n          // Call with no preview\n          entry.deleteEntry(false);  \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_delete/#attach-delete-completed","title":"Attach Delete Completed","text":"<p>The Entry Delete class can call a function that has been attached with the attachDeleteCompleted() method after a successful deletion. This function will then receive the data of the deleted entity.</p> <p>To attach a function, the attachDeleteCompleted() method can be utilized.</p> <p>Setter (attachDeleteCompleted)</p> Parameter Type Mandatory Description completed <code>(data: EntityT) =&gt; void</code> Yes The function that will be called after the successful deletion listener? <code>object</code> No The default listener is the controller from constructor <p>Example</p> <p>Suppose you want to receive a response after the successful deletion and take the necessary action.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryDeleteCL from \"ui5/antares/entry/v2/EntryDeleteCL\"; // Import the class\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteProduct() {\n    // Initialize with a type and with a table id\n    const entry = new EntryDeleteCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\"\n    });\n\n    // Attach the function\n    entry.attachDeleteCompleted(this.onDeleteCompleted, this);\n\n    // Call with no preview\n    entry.deleteEntry(false); \n  }\n\n  // If possible, use the same type that is used in the constructor\n  private onDeleteCompleted (data: IProducts) {\n    const productID = data.ID;\n\n    MessageBox.information(`The product with the following ID is removed: ${productID}`);\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryDeleteCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryDeleteCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize with a table id\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\"\n          });\n\n          // Attach the function\n          entry.attachDeleteCompleted(this.onDeleteCompleted, this);\n\n          // Call with no preview\n          entry.deleteEntry(false); \n        },\n\n        // Handler function\n        onDeleteCompleted: function (data) {\n          const productID = data.ID;\n\n          MessageBox.information(`The product with the following ID is removed: ${productID}`);\n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_delete/#attach-delete-failed","title":"Attach Delete Failed","text":"<p>In the event that the deletion of the entity is unsuccessful, the Entry Delete class can then call a function with a specific signature. The result of the deletion will then be passed to the attached function.</p> <p>To attach a function, the attachDeleteFailed() method can be utilized.</p> <p>Setter (attachDeleteFailed)</p> Parameter Type Mandatory Description failed <code>(response: ResponseCL&lt;IDeleteFailed&gt;) =&gt; void</code> Yes The function that will be called after the deletion fails listener? <code>object</code> No The default listener is the controller from constructor <p>An object constructed from the ResponceCL class passed as a parameter to the function. This object has 2 public methods.</p> getResponse()getStatusCode() <p> Returns Description <code>object</code> | <code>undefined</code> \u00a0\u00a0\u00a0\u00a0headers?: <code>object</code> The HTTP response headers. \u00a0\u00a0\u00a0\u00a0message?: <code>string</code> The HTTP response message. \u00a0\u00a0\u00a0\u00a0responseText?: <code>string</code> The HTTP response text. \u00a0\u00a0\u00a0\u00a0statusCode?: <code>string</code> The status code of the HTTP request. \u00a0\u00a0\u00a0\u00a0statusText?: <code>string</code> The HTTP status text. </p> <p> Returns Description <code>string</code> | <code>undefined</code> Returns the status code of the HTTP Request </p> <p>Example</p> <p>Suppose you want to receive a response after the unsuccessful deletion and take the necessary action.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryDeleteCL from \"ui5/antares/entry/v2/EntryDeleteCL\"; // Import the class\nimport ResponseCL from \"ui5/antares/entry/v2/ResponseCL\"; // Import the ResponseCL class\nimport { IDeleteFailed } from \"ui5/antares/types/entry/delete\"; // Import the Delete Failed type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteProduct() {\n    // Initialize with a type and with a table id\n    const entry = new EntryDeleteCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\"\n    });\n\n    // Attach the function\n    entry.attachDeleteFailed(this.onDeleteFailed, this);\n\n    // Call with no preview\n    entry.deleteEntry(false); \n  }\n\n  // If possible, use the IDeleteFailed type\n  private onDeleteFailed (response: ResponseCL&lt;IDeleteFailed&gt;) {\n    const statusCode = response.getStatusCode(); // get the status code\n    const deleteResponse = response.getResponse(); // get the response\n\n    if (deleteResponse) {\n      MessageBox.error(deleteResponse.message);\n    }\n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryDeleteCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryDeleteCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize with a table id\n          const entry = new EntryDeleteCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\"\n          });\n\n          // Attach the function\n          entry.attachDeleteFailed(this.onDeleteFailed, this);\n\n          // Call with no preview\n          entry.deleteEntry(false); \n        },\n\n        // Handler function\n        onDeleteFailed: function (response) {\n          const statusCode = response.getStatusCode(); // get the status code\n          const deleteResponse = response.getResponse(); // get the response\n\n          if (deleteResponse) {\n            MessageBox.error(deleteResponse.message);\n          }\n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_delete/#available-features","title":"Available Features","text":"<p>The EntryDeleteCL class is derived from the same abstract class as the EntryCreateCL class and contains the same methods. However, some of these functions are not applicable to the EntryDeleteCL class. </p> <p>Warning</p> <p>Please note that the default values for the available functions may differ.</p> <p>The features listed below are identical to those available in EntryCreateCL. Methods can be accessed through the object constructed from the EntryDeleteCL class.</p> <p>Tip</p> <p>To access the documentation for a particular feature, please click on the name of the feature.</p> Feature Availability Default Value Remarks Manual Submit \u2717 Disable Auto Dialog Close \u2717 false Label Generation \u2714 Resource Bundle Prefix \u2714 antares Naming Strategy \u2714 CAMEL_CASE Form Type \u2714 SMART Form Title \u2714 Delete <code>${entityPath}</code> Form Grouping \u2714 [] Custom Data \u2714 [] Text In Edit Mode Source \u2717 [] Begin Button Text \u2714 Delete Begin Button Type \u2714 ButtonType.Reject End Button Text \u2714 Close End Button Type \u2714 ButtonType.Default Confirmation Text \u2714 The selected line will be deleted. Do you confirm? Confirmation Title \u2714 Confirm Delete Properties with Edm.Guid Type \u2714 The random UUID generation is not available. You can only modify the visibilities of the properties with <code>Edm.Guid</code> type Form Property Order \u2714 [] Excluded Properties \u2714 [] Mandatory Properties \u2717 Readonly Properties \u2717 [all properties] By default, all the properties are readonly and cannot be changed Attach Submit Completed \u2717 Please see Attach Delete Completed Attach Submit Failed \u2717 Please see Attach Delete Failed Response Class \u2714 Only available for Attach Delete Failed Value Help \u2717 Validation Logic \u2717 Object Page \u2714 Custom Control \u2714 Custom Content \u2714 Custom Fragment \u2714"},{"location":"entry_read/","title":"Entry Read","text":"<p>The EntryReadCL class is responsible for managing the READ (GET) operation through the OData V2 model. This class eliminates the need for developers to concern themselves with fragments, user input validations, and value help creation when working on custom SAPUI5 applications or Fiori Elements extensions. The following section outlines the key features of the Entry Read class.</p>"},{"location":"entry_read/#features","title":"Features","text":"<ul> <li>sap.m.Dialog generation with a SmartForm, SimpleForm, or custom content</li> <li>sap.uxap.ObjectPageLayout generation with a SmartForm, SimpleForm, or custom content</li> <li>Property sorting, excluding</li> <li>Label generation for the SmartForm, SimpleForm elements</li> <li>Call a fragment and bind the context in case you do not want to use the auto-generated dialog</li> </ul> <p>Attention</p> <p>Please be advised that the majority of features available in the Entry Create class are also accessible in the Entry Read class. However, please note that the original documentation was created on the Entry Create page. To view a list of available features, please refer to the Available Features section.</p>"},{"location":"entry_read/#use-case","title":"Use Case","text":"<p>Let's say you have an <code>EntitySet</code> named Products that is bound to a table, and the Products entity has many properties that don't fit in the table. The goal is to allow the end user to select a row from the table and display the details with more properties through the OData V2 Model on a dialog screen. The following steps outline the process.</p> <p>1) It is necessary to create a .fragment.xml file that contains a dialog with form content (Simple, Smart, etc.) and call it from the controller or generate the dialog directly on the controller.</p> <p>2) It is necessary to handle the selection of the table.</p> <p>3) It is necessary to handle the binding of the selected row to a dialog or a form.</p> <p>The EntryReadCL class is responsible for executing all of the steps mentioned above.</p>"},{"location":"entry_read/#constructor","title":"Constructor","text":"<p>In order to utilise the functionality of EntryReadCL, it is necessary to initialise the object.</p> Parameter Type Mandatory Default Value Description controller sap.ui.core.mvc.Controller Yes The controller object (usually <code>this</code> object) settings <code>object</code> Yes \u2003entityPath <code>string</code> Yes The name of the EntitySet. It can start with a \"/\" (slash) \u2003initializer <code>string</code> | sap.ui.model.Context | <code>EntityKeysT</code> Yes This parameter identifies the table ID, context binding, or key values of the entity that will be displayed. modelName? <code>string</code> No <code>undefined</code> The name of the OData V2 model which can be found on the manifest.json file. Leave this parameter undefined if the name of the OData model = \"\" (empty string) <p>There are three distinct methods for constructing an object from the Entry Read class.</p>"},{"location":"entry_read/#constructor-with-a-table-id","title":"Constructor with a Table ID","text":"<p>The most straightforward method for utilizing the capabilities of the Entry Read class is to construct an object with the ID of a table that you have on your XML view. This method offers several advantages.</p> <p>1) The table row selected by the end user is automatically detected by the Entry Read class, and the context binding of the selected row will be bound to the auto-generated dialog.</p> <p>2) If no table row is selected by the end user, a default message is displayed in the sap.m.MessageBox.error to the end user.</p> <p>Attention</p> <p>Please note that this method supports only the table types and selection modes listed below. In the event that the selection mode of the table whose ID is being used for object construction is not supported, an error will be thrown by the library.</p> <p>Tip</p> <p>The default message displayed when the end user has not selected a row from the table yet can be modified using the setSelectRowMessage() method.</p>"},{"location":"entry_read/#supported-table-types","title":"Supported Table Types","text":"Table Type Selection Mode sap.m.Table SingleSelect | SingleSelectLeft | SingleSelectMaster sap.ui.table.Table Single sap.ui.comp.smarttable.SmartTable Single sap.ui.table.AnalyticalTable Single sap.ui.table.TreeTable Single <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products, which is bound to an sap.m.Table on the XML view. Our objective is to add an sap.m.Button to the header toolbar of the table. When the user selects a row from the table and presses the Display Product Details button, a dialog will open so the user can view the details of the selected line.</p> <p></p> <p>Tip for TypeScript</p> <p>The EntryReadCL&lt;EntityT, EntityKeysT&gt; class is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityKeysT</code> type is utilized as one of the types of the <code>initializer</code> parameter in the class constructor.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryReadCL from \"ui5/antares/entry/v2/EntryReadCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDisplayCategoryDetails() {\n    // Initialize without a type and with the table id\n    const entry = new EntryReadCL(this, {\n      entityPath: \"Categories\",\n      initializer: \"tblCategories\" // table id       \n    }); \n  }\n\n  public async onDisplayProductDetails() {\n    // Initialize with a type and the table id\n    const entry = new EntryReadCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\" // table id       \n    }); \n  }\n\n  public async onDisplayCustomerDetails() {\n    // Initialize with a model name and the table id\n    const entry = new EntryReadCL(this, {\n      entityPath: \"Customers\",\n      initializer: \"tblCustomers\" // table id      \n    }, \"myODataModelName\"); \n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryReadCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryReadCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDisplayProductDetails: async function () {\n          // Initialize with the table id\n          const entry = new EntryReadCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\" // table id                \n          }); \n        },\n\n        onDisplayCategoryDetails: async function () {\n          // Initialize with a model name\n          const entry = new EntryReadCL(this, {\n            entityPath: \"Categories\",\n            initializer: \"tblCategories\" // table id                 \n          }, \"myODataModelName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_read/#constructor-with-a-context-binding","title":"Constructor with a Context Binding","text":"<p>An alternative approach to constructing an object from the Entry Read class is to utilise the context of the entity that will be displayed by the end user.</p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products, which is bound to an sap.m.Table on the XML view. Our objective is to add an sap.m.Button to the header toolbar of the table. When the user selects a row from the table and presses the Display Product Details button, we will retrieve the context of the selected row and use it to construct an object from the Entry Read class.</p> <p></p> <p>Tip for TypeScript</p> <p>The EntryReadCL&lt;EntityT, EntityKeysT&gt; class is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityKeysT</code> type is utilized as one of the types of the <code>initializer</code> parameter in the class constructor.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryReadCL from \"ui5/antares/entry/v2/EntryReadCL\"; // Import the class\nimport MessageBox from \"sap/m/MessageBox\";\nimport Table from \"sap/m/Table\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDisplayCategoryDetails() {\n    // Get the selected item and warn the end user if no row was selected\n    const selectedItem = (this.getView().byId(\"tblCategories\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    // Get the selected context\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize without a type and use the binding context\n    const entry = new EntryReadCL(this, {\n      entityPath: \"Categories\",\n      initializer: selectedContext // binding context\n    }); \n  }\n\n  public async onDisplayProductDetails() {\n    // Get the selected item and warn the end user if no row was selected\n    const selectedItem = (this.getView().byId(\"tblProducts\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    // Get the selected context\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize with a type and use the binding context\n    const entry = new EntryReadCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: selectedContext // binding context\n    }); \n  }\n\n  public async onDisplayCustomerDetails() {\n    // Get the selected item and warn the end user if no row was selected\n    const selectedItem = (this.getView().byId(\"tblCustomers\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    // Get the selected context\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize with a model name and use the binding context\n    const entry = new EntryReadCL(this, {\n      entityPath: \"Customers\",\n      initializer: selectedContext // binding context   \n    }, \"myODataModelName\"); \n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryReadCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryReadCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDisplayProductDetails: async function () {\n          // Get the selected item and warn the end user if no row was selected\n          const selectedItem = this.getView().byId(\"tblProducts\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          // Get the selected context\n          const selectedContext = selectedItem.getBindingContext();\n\n          // Initialize with the binding context\n          const entry = new EntryReadCL(this, {\n            entityPath: \"Products\",\n            initializer: selectedContext // binding context     \n          }); \n        },\n\n        onDisplayCategoryDetails: async function () {\n          // Get the selected item and warn the end user if no row was selected\n          const selectedItem = this.getView().byId(\"tblCategories\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          // Get the selected context\n          const selectedContext = selectedItem.getBindingContext();\n\n          // Initialize with the binding context\n          const entry = new EntryReadCL(this, {\n            entityPath: \"Categories\",\n            initializer: selectedContext // binding context               \n          }, \"myODataModelName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_read/#constructor-with-entity-keys","title":"Constructor with Entity Keys","text":"<p>The final method for constructing an object from the Entry Read class is to utilize the key values of the entity that will be displayed by the end user.</p> <p>Example</p> <p>For the purposes of this example, let us consider an <code>EntitySet</code> named Products with a single key property named <code>ID</code>, whose type is <code>Edm.Guid</code>. We would like to allow the end user to display a specific entity with the key value: ID = \"b2f0013e-418f-42aa-9a24-3770fe17ce18\".</p> <p>Tip</p> <p>Please note that if the <code>EntitySet</code> is bound to a table, you can retrieve the values of the key properties of the selected row using the getBindingContext().getObject() method.</p> <p>Info</p> <p>The EntryReadCL class creates a binding context with the values of the specified key properties using the <code>initializer</code> parameter in the class constructor and subsequently binds the created context to the dialog.</p> <p>Tip for TypeScript</p> <p>The EntryReadCL&lt;EntityT, EntityKeysT&gt; class is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityKeysT</code> type is utilized as one of the types of the <code>initializer</code> parameter in the class constructor.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryReadCL from \"ui5/antares/entry/v2/EntryReadCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDisplayCategoryDetails() {\n    // Prepare the key values of a specific entity\n    const keyValues = {\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n    };\n\n    // Initialize without a type and use the key values as the initializer\n    const entry = new EntryReadCL(this, {\n      entityPath: \"Categories\",\n      initializer: keyValues // key values of the entity\n    });\n  }\n\n  public async onDisplayProductDetails() {\n    // Prepare the key values of a specific entity\n    const keyValues = {\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n    };\n\n    // Initialize with a type and use the key values as the initializer\n    const entry = new EntryReadCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: keyValues // key values of the entity\n    });\n  }\n\n  public async onDisplayCustomerDetails() {\n    // Prepare the key values of a specific entity\n    const keyValues = {\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n    };\n\n    // Initialize with a model name and use the key values as the initializer\n    const entry = new EntryReadCL(this, {\n      entityPath: \"Customers\",\n      initializer: keyValues // key values of the entity\n    }, \"myODataModelName\"); \n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryReadCL\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryReadCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDisplayProductDetails: async function () {\n          // Prepare the key values of a specific entity\n          const keyValues = {\n            ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n          };\n\n          // Initialize with the entity set name and use the key values as the initializer\n          const entry = new EntryReadCL(this, {\n            entityPath: \"Products\",\n            initializer: keyValues // key values of the entity\n          });  \n        },\n\n        onDisplayCategoryDetails: async function () {\n          // Prepare the key values of a specific entity\n          const keyValues = {\n            ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n          };\n\n          // Initialize with the entity set name and use the key values as the initializer\n          const entry = new EntryReadCL(this, {\n            entityPath: \"Categories\",\n            initializer: keyValues // key values of the entity        \n          }, \"myODataModelName\");          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_read/#select-row-message","title":"Select Row Message","text":"<p>If the object from the Entry Read class is constructed using the Constructor with a Table ID approach, a default error message is displayed in an sap.m.MessageBox.error to the end user when the user has not yet selected a row from the table.</p> <p>To change the default message, the setSelectRowMessage() method can be utilized.</p> Setter (setSelectRowMessage)Getter (getSelectRowMessage) <p> Parameter Type Mandatory Description message <code>string</code> Yes The message that is displayed when the end user has not selected a row from the table </p> <p> Returns Description <code>string</code> Returns the value that was set using setSelectRowMessage() method. Default value is Please select a row from the table. </p>"},{"location":"entry_read/#read-entry","title":"Read Entry","text":"<p>The readEntry() method establishes a connection between the context, determined by the <code>initializer</code> parameter in the class constructor, and the dialog that is either automatically generated or loaded from the fragment placed in the application files. Once the context is linked, the generated or loaded dialog is opened.</p> <p>The readEntry() method utilizes the ODataMetaModel to determine the <code>EntityType</code> of the <code>EntitySet</code> designated through the constructor. It then generates the form with the properties in the same order as the OData metadata, in accordance with the <code>EntityType</code>.</p> <p>Note</p> <p>Please note that the labels are generated assuming that the naming convention of the <code>EntityType</code> is camelCase. For further details, please see the Label Generation section.</p> <p>Attention</p> <p>It is not possible to modify any of the properties of an <code>EntitySet</code> on the auto-generated dialog. This behaviour cannot be altered.</p> <p>Warning</p> <p>Please be advised that the readEntry() method must be called after any configurations have been made through the public methods of the Entry Read class. Any configurations (form title, end button text, etc.) made after the readEntry() method will not be reflected. As a best practice, the readEntry() method should be called at the end of your code block.</p> <p>Note</p> <p>The key properties with Edm.Guid type are not visible by default on the generated form. However, this behavior can be modified using the setDisplayGuidProperties() method.</p> <p>Attention</p> <p>Please be advised that the random UUID generation for properties with the <code>Edm.Guid</code> type is not available in the Entry Read class.</p>"},{"location":"entry_read/#method-parameters","title":"Method Parameters","text":"Returns Description <code>Promise&lt;void&gt;</code> Once the promise has been fulfilled, the bound entry can be retrieved using the getEntryContext() method with the object instantiated from the EntryReadCL class. <p>Info</p> <p>The readEntry() method uses the default configurations when creating the dialog. However, these configurations can be modified using the public setter methods.</p>"},{"location":"entry_read/#default-values","title":"Default Values","text":"Term Default Value Description Setter Getter Naming Strategy NamingStrategies.CAMEL_CASE The default naming strategy is CAMEL_CASE setNamingStrategy() getNamingStrategy() Resource Bundle Prefix <code>antares</code> The default resource bundle prefix is antares setResourceBundlePrefix() getResourceBundlePrefix() Use Metadata Labels <code>false</code> The labels are not derived from the metadata, but rather generated. setUseMetadataLabels() getUseMetadataLabels() Form Type FormTypes.SMART The SmartForm with SmartFields is generated as the default option. setFormType() getFormType() Form Title <code>Read + ${entityPath}</code> The <code>entityPath</code> parameter of the constructor is used setFormTitle() getFormTitle() End Button Text <code>Close</code> The default end button text is Close setEndButtonText() getEndButtonText() End Button Type ButtonType.Negative The default button type is Negative setEndButtonType() getEndButtonType() <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryReadCL from \"ui5/antares/entry/v2/EntryReadCL\"; // Import the class\nimport Table from \"sap/m/Table\";\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDisplayProductDetails() {\n    // Initialize without a type and with a table id\n    const entry = new EntryReadCL(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\"\n    });\n\n    // Call \n    entry.readEntry(false); \n  }\n\n  public async onDisplayCategoryDetails() {\n    const selectedItem = (this.getView().byId(\"tblCategories\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize with a type and a binding context\n    const entry = new EntryReadCL&lt;ICategory&gt;(this, {\n      entityPath: \"Categories\",\n      initializer: selectedContext\n    }); \n\n    // Call\n    entry.readEntry();\n  }\n\n  public async onDisplayCustomerDetails () {\n    const selectedItem = (this.getView().byId(\"tblCustomers\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    };\n\n    const customerKeys = {\n      ID: selectedItem.getBindingContext().getObject().ID\n    };\n\n    // Initialize without a type and with the key values\n    const entry = new EntryReadCL(this, {\n      entityPath: \"Customers\",\n      initializer: customerKeys\n    });\n\n    // Call\n    entry.readEntry();\n  }\n}\n\ninterface ICategory {\n  ID: string;\n  name?: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryReadCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryReadCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDisplayProductDetails: async function () {\n          // Initialize with a table id\n          const entry = new EntryReadCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\"\n          }); \n\n          // Call\n          entry.readEntry();\n        },\n\n        onDisplayCategoryDetails: async function () {\n          const selectedItem = this.getView().byId(\"tblCategories\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          const selectedContext = selectedItem.getBindingContext();\n\n          // Initialize with a binding context\n          const entry = new EntryReadCL(this, {\n            entityPath: \"Categories\",\n            initializer: selectedContext\n          }); \n\n          // Call\n          entry.readEntry();\n        },\n\n        onDisplayCustomerDetails: async function () {\n          const selectedItem = this.getView().byId(\"tblCustomers\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          const customerKeys = {\n            ID: selectedItem.getBindingContext().getObject().ID\n          };\n\n          // Initialize with the key values\n          const entry = new EntryReadCL(this, {\n            entityPath: \"Customers\",\n            initializer: customerKeys\n          }); \n\n          // Call\n          entry.readEntry();          \n        }\n      });\n\n    });\n</code></pre> <p>The generated form with default values will be similar in appearance to the following example. However, it should be noted that the exact appearance may vary depending on the configurations and the <code>EntityType</code> properties of the <code>EntitySet</code>.</p> <p></p>"},{"location":"entry_read/#available-features","title":"Available Features","text":"<p>The EntryReadCL class is derived from the same abstract class as the EntryCreateCL class and contains the same methods. However, some of these functions are not applicable to the EntryReadCL class. </p> <p>Warning</p> <p>Please note that the default values for the available functions may differ.</p> <p>The features listed below are identical to those available in EntryCreateCL. Methods can be accessed through the object constructed from the EntryReadCL class.</p> <p>Tip</p> <p>To access the documentation for a particular feature, please click on the name of the feature.</p> Feature Availability Default Value Remarks Manual Submit \u2717 Disable Auto Dialog Close \u2717 false Label Generation \u2714 Resource Bundle Prefix \u2714 antares Naming Strategy \u2714 CAMEL_CASE Form Type \u2714 SMART Form Title \u2714 Read <code>${entityPath}</code> Form Grouping \u2714 [] Custom Data \u2714 [] Text In Edit Mode Source \u2717 [] Begin Button Text \u2717 Begin Button Type \u2717 End Button Text \u2714 Close End Button Type \u2714 ButtonType.Negative Properties with Edm.Guid Type \u2714 The random UUID generation is not available. You can only modify the visibilities of the properties with <code>Edm.Guid</code> type Form Property Order \u2714 [] Excluded Properties \u2714 [] Mandatory Properties \u2717 Readonly Properties \u2717 [all properties] By default, all the properties are readonly and cannot be changed Attach Submit Completed \u2717 Attach Submit Failed \u2717 Response Class \u2717 Value Help \u2717 Validation Logic \u2717 Object Page \u2714 Custom Control \u2714 Custom Content \u2714 Custom Fragment \u2714"},{"location":"entry_update/","title":"Entry Update","text":"<p>The EntryUpdateCL class is responsible for managing the UPDATE (PUT/PATCH/MERGE) operation through the OData V2 model. This class eliminates the need for developers to concern themselves with fragments, user input validations, and value help creation when working on custom SAPUI5 applications or Fiori Elements extensions. The following section outlines the key features of the Entry Update class.</p>"},{"location":"entry_update/#features","title":"Features","text":"<ul> <li>sap.m.Dialog generation with a SmartForm, SimpleForm, or custom content</li> <li>sap.uxap.ObjectPageLayout generation with a SmartForm, SimpleForm, or custom content</li> <li>User input validation via the ValidationLogicCL class</li> <li>Value Help Dialog generation via the ValueHelpCL class</li> <li>Property sorting, readonly properties</li> <li>Label generation for the SmartForm, SimpleForm elements</li> <li>submitChanges(), and resetChanges() handling based on the user interaction</li> <li>Call a fragment and bind the context in case you do not want to use the auto-generated dialog</li> </ul> <p>Attention</p> <p>Please be advised that the majority of features available in the Entry Create class are also accessible in the Entry Update class. However, please note that the original documentation was created on the Entry Create page. To view a list of available features, please refer to the Available Features section.</p>"},{"location":"entry_update/#use-case","title":"Use Case","text":"<p>Let's assume you have an <code>EntitySet</code> named Products, which is bound to a table. You would like to enable the end user to select a line from the table and edit the selected entity on a pop-up screen using the OData V2 service in your custom SAPUI5 application. To do so, you must follow these steps.</p> <p>1) It is necessary to create a .fragment.xml file that contains a dialog with form content (Simple, Smart, etc.) and to call it from the controller or to generate the dialog directly on the controller.</p> <p>2) If you do not use the sap.ui.comp.smartfield.SmartField component with the OData Annotations, you will need to write a significant amount of Value Help code.</p> <p>3) It is essential to validate user input, such as checking mandatory fields and ensuring that the values entered align with your business logic.</p> <p>4) It is necessary to handle the selection of the table and the binding of the selected entity to the dialog or form.</p> <p>The EntryUpdateCL class is responsible for executing all of the steps mentioned above.</p>"},{"location":"entry_update/#constructor","title":"Constructor","text":"<p>In order to utilise the functionality of EntryUpdateCL, it is necessary to initialise the object.</p> Parameter Type Mandatory Default Value Description controller sap.ui.core.mvc.Controller Yes The controller object (usually <code>this</code> object) settings <code>object</code> Yes \u2003entityPath <code>string</code> Yes The name of the EntitySet. It can start with a \"/\" (slash) \u2003initializer <code>string</code> | sap.ui.model.Context | <code>EntityKeysT</code> Yes This parameter identifies the table ID, context binding, or key values of the entity that will be updated. modelName? <code>string</code> No <code>undefined</code> The name of the OData V2 model which can be found on the manifest.json file. Leave this parameter undefined if the name of the OData model = \"\" (empty string) <p>There are three distinct methods for constructing an object from the Entry Update class.</p>"},{"location":"entry_update/#constructor-with-a-table-id","title":"Constructor with a Table ID","text":"<p>The most straightforward method for utilizing the capabilities of the Entry Update class is to construct an object with the ID of a table that you have on your XML view. This method offers several advantages.</p> <p>1) The table row selected by the end user is automatically detected by the Entry Update class, and the context binding of the selected row will be bound to the auto-generated dialog.</p> <p>2) If no table row is selected by the end user, a default message is displayed in the sap.m.MessageBox.error to the end user.</p> <p>Attention</p> <p>Please note that this method supports only the table types and selection modes listed below. In the event that the selection mode of the table whose ID is being used for object construction is not supported, an error will be thrown by the library.</p> <p>Tip</p> <p>The default message displayed when the end user has not selected a row from the table yet can be modified using the setSelectRowMessage() method.</p>"},{"location":"entry_update/#supported-table-types","title":"Supported Table Types","text":"Table Type Selection Mode sap.m.Table SingleSelect | SingleSelectLeft | SingleSelectMaster sap.ui.table.Table Single sap.ui.comp.smarttable.SmartTable Single sap.ui.table.AnalyticalTable Single sap.ui.table.TreeTable Single <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products, which is bound to an sap.m.Table on the XML view. Our objective is to add an sap.m.Button to the header toolbar of the table. When the user selects a row from the table and presses the Update Product button, a dialog will open so the end user can modify the entity.</p> <p></p> <p>Tip for TypeScript</p> <p>The EntryUpdateCL&lt;EntityT, EntityKeysT&gt; class is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityT</code> type is utilized as the return type of the getResponse(): EntityT method of the <code>ResponseCL</code> class, whose object is passed as a parameter into the function attached by the attachSubmitCompleted(submitCompleted: (response: ResponseCL&lt;EntityT&gt;) =&gt; void, listener?: object) method.</p> <p>The <code>EntityKeysT</code> type is utilized as one of the types of the <code>initializer</code> parameter in the class constructor.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryUpdateCL from \"ui5/antares/entry/v2/EntryUpdateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onUpdateCategory() {\n    // Initialize without a type and with the table id\n    const entry = new EntryUpdateCL(this, {\n      entityPath: \"Categories\",\n      initializer: \"tblCategories\" // table id       \n    }); \n  }\n\n  public async onUpdateProduct() {\n    // Initialize with a type and the table id\n    const entry = new EntryUpdateCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\" // table id       \n    }); \n  }\n\n  public async onUpdateCustomer() {\n    // Initialize with a model name and the table id\n    const entry = new EntryUpdateCL(this, {\n      entityPath: \"Customers\",\n      initializer: \"tblCustomers\" // table id      \n    }, \"myODataModelName\"); \n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryUpdateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryUpdateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onUpdateProduct: async function () {\n          // Initialize with the table id\n          const entry = new EntryUpdateCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\" // table id                \n          }); \n        },\n\n        onUpdateCategory: async function () {\n          // Initialize with a model name\n          const entry = new EntryUpdateCL(this, {\n            entityPath: \"Categories\",\n            initializer: \"tblCategories\" // table id                 \n          }, \"myODataModelName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_update/#constructor-with-a-context-binding","title":"Constructor with a Context Binding","text":"<p>An alternative approach to constructing an object from the Entry Update class is to utilise the context of the entity that will be updated by the end user.</p> <p>Example</p> <p>Let us consider an <code>EntitySet</code> named Products, which is bound to an sap.m.Table on the XML view. Our objective is to add an sap.m.Button to the header toolbar of the table. When the user selects a row from the table and presses the Update Product button, we will retrieve the context of the selected row and use it to construct an object from the Entry Update class.</p> <p></p> <p>Tip for TypeScript</p> <p>The EntryUpdateCL&lt;EntityT, EntityKeysT&gt; class is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityT</code> type is utilized as the return type of the getResponse(): EntityT method of the <code>ResponseCL</code> class, whose object is passed as a parameter into the function attached by the attachSubmitCompleted(submitCompleted: (response: ResponseCL&lt;EntityT&gt;) =&gt; void, listener?: object) method.</p> <p>The <code>EntityKeysT</code> type is utilized as one of the types of the <code>initializer</code> parameter in the class constructor.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryUpdateCL from \"ui5/antares/entry/v2/EntryUpdateCL\"; // Import the class\nimport MessageBox from \"sap/m/MessageBox\";\nimport Table from \"sap/m/Table\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onUpdateCategory() {\n    // Get the selected item and warn the end user if no row was selected\n    const selectedItem = (this.getView().byId(\"tblCategories\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    // Get the selected context\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize without a type and use the binding context\n    const entry = new EntryUpdateCL(this, {\n      entityPath: \"Categories\",\n      initializer: selectedContext // binding context\n    }); \n  }\n\n  public async onUpdateProduct() {\n    // Get the selected item and warn the end user if no row was selected\n    const selectedItem = (this.getView().byId(\"tblProducts\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    // Get the selected context\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize with a type and use the binding context\n    const entry = new EntryUpdateCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: selectedContext // binding context\n    }); \n  }\n\n  public async onUpdateCustomer() {\n    // Get the selected item and warn the end user if no row was selected\n    const selectedItem = (this.getView().byId(\"tblCustomers\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    // Get the selected context\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize with a model name and use the binding context\n    const entry = new EntryUpdateCL(this, {\n      entityPath: \"Customers\",\n      initializer: selectedContext // binding context   \n    }, \"myODataModelName\"); \n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryUpdateCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryUpdateCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onUpdateProduct: async function () {\n          // Get the selected item and warn the end user if no row was selected\n          const selectedItem = this.getView().byId(\"tblProducts\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          // Get the selected context\n          const selectedContext = selectedItem.getBindingContext();\n\n          // Initialize with the binding context\n          const entry = new EntryUpdateCL(this, {\n            entityPath: \"Products\",\n            initializer: selectedContext // binding context     \n          }); \n        },\n\n        onUpdateCategory: async function () {\n          // Get the selected item and warn the end user if no row was selected\n          const selectedItem = this.getView().byId(\"tblCategories\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          // Get the selected context\n          const selectedContext = selectedItem.getBindingContext();\n\n          // Initialize with the binding context\n          const entry = new EntryUpdateCL(this, {\n            entityPath: \"Categories\",\n            initializer: selectedContext // binding context               \n          }, \"myODataModelName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_update/#constructor-with-entity-keys","title":"Constructor with Entity Keys","text":"<p>The final method for constructing an object from the Entry Update class is to utilize the key values of the entity that will be updated by the end user.</p> <p>Example</p> <p>For the purposes of this example, let us consider an <code>EntitySet</code> named Products with a single key property named <code>ID</code>, whose type is <code>Edm.Guid</code>. We would like to allow the end user to edit a specific entity with the key value: ID = \"b2f0013e-418f-42aa-9a24-3770fe17ce18\".</p> <p>Tip</p> <p>Please note that if the <code>EntitySet</code> is bound to a table, you can retrieve the values of the key properties of the selected row using the getBindingContext().getObject() method.</p> <p>Info</p> <p>The EntryUpdateCL class creates a binding context with the values of the specified key properties using the <code>initializer</code> parameter in the class constructor and subsequently binds the created context to the dialog.</p> <p>Tip for TypeScript</p> <p>The EntryUpdateCL&lt;EntityT, EntityKeysT&gt; class is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityT</code> type is utilized as the return type of the getResponse(): EntityT method of the <code>ResponseCL</code> class, whose object is passed as a parameter into the function attached by the attachSubmitCompleted(submitCompleted: (response: ResponseCL&lt;EntityT&gt;) =&gt; void, listener?: object) method.</p> <p>The <code>EntityKeysT</code> type is utilized as one of the types of the <code>initializer</code> parameter in the class constructor.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryUpdateCL from \"ui5/antares/entry/v2/EntryUpdateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onUpdateCategory() {\n    // Prepare the key values of a specific entity\n    const keyValues = {\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n    };\n\n    // Initialize without a type and use the key values as the initializer\n    const entry = new EntryUpdateCL(this, {\n      entityPath: \"Categories\",\n      initializer: keyValues // key values of the entity\n    });\n  }\n\n  public async onUpdateProduct() {\n    // Prepare the key values of a specific entity\n    const keyValues = {\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n    };\n\n    // Initialize with a type and use the key values as the initializer\n    const entry = new EntryUpdateCL&lt;IProducts, IProductKeys&gt;(this, {\n      entityPath: \"Products\",\n      initializer: keyValues // key values of the entity\n    });\n  }\n\n  public async onUpdateCustomer() {\n    // Prepare the key values of a specific entity\n    const keyValues = {\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n    };\n\n    // Initialize with a model name and use the key values as the initializer\n    const entry = new EntryUpdateCL(this, {\n      entityPath: \"Customers\",\n      initializer: keyValues // key values of the entity\n    }, \"myODataModelName\"); \n  }\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryUpdateCL\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryUpdateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onUpdateProduct: async function () {\n          // Prepare the key values of a specific entity\n          const keyValues = {\n            ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n          };\n\n          // Initialize with the entity set name and use the key values as the initializer\n          const entry = new EntryUpdateCL(this, {\n            entityPath: \"Products\",\n            initializer: keyValues // key values of the entity\n          });  \n        },\n\n        onUpdateCategory: async function () {\n          // Prepare the key values of a specific entity\n          const keyValues = {\n            ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\"\n          };\n\n          // Initialize with the entity set name and use the key values as the initializer\n          const entry = new EntryUpdateCL(this, {\n            entityPath: \"Categories\",\n            initializer: keyValues // key values of the entity        \n          }, \"myODataModelName\");          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"entry_update/#select-row-message","title":"Select Row Message","text":"<p>If the object from the Entry Update class is constructed using the Constructor with a Table ID approach, a default error message is displayed in an sap.m.MessageBox.error to the end user when the user has not yet selected a row from the table.</p> <p>To change the default message, the setSelectRowMessage() method can be utilized.</p> Setter (setSelectRowMessage)Getter (getSelectRowMessage) <p> Parameter Type Mandatory Description message <code>string</code> Yes The message that is displayed when the end user has not selected a row from the table </p> <p> Returns Description <code>string</code> Returns the value that was set using setSelectRowMessage() method. Default value is Please select a row from the table. </p>"},{"location":"entry_update/#update-entry","title":"Update Entry","text":"<p>The updateEntry() method establishes a connection between the context, determined by the <code>initializer</code> parameter in the class constructor, and the dialog that is either automatically generated or loaded from the fragment placed in the application files. Once the context is linked, the generated or loaded dialog is opened.</p> <p>The updateEntry() method utilizes the ODataMetaModel to determine the <code>EntityType</code> of the <code>EntitySet</code> designated through the constructor. It then generates the form with the properties in the same order as the OData metadata, in accordance with the <code>EntityType</code>.</p> <p>Note</p> <p>Please note that all key properties are marked as mandatory/required, and the labels are generated assuming that the naming convention of the <code>EntityType</code> is camelCase. For further details, please see the Label Generation section.</p> <p>Attention</p> <p>It is not possible to modify any of the key properties of an <code>EntitySet</code> on the auto-generated dialog. This behaviour cannot be altered.</p> <p>Warning</p> <p>Please be advised that the updateEntry() method must be called after any configurations have been made through the public methods of the Entry Update class. Any configurations (form title, mandatory properties, etc.) made after the updateEntry() method will not be reflected. As a best practice, the updateEntry() method should be called at the end of your code block.</p> <p>Note</p> <p>The key properties with Edm.Guid type are not visible by default on the generated form. However, this behavior can be modified using the setDisplayGuidProperties() method.</p> <p>Attention</p> <p>Please be advised that the random UUID generation for properties with the <code>Edm.Guid</code> type is not available in the Entry Update class.</p>"},{"location":"entry_update/#method-parameters","title":"Method Parameters","text":"Returns Description <code>Promise&lt;void&gt;</code> Once the promise has been fulfilled, the bound entry can be retrieved using the getEntryContext() method with the object instantiated from the EntryUpdateCL class. <p>Info</p> <p>The updateEntry() method uses the default configurations when creating the dialog. However, these configurations can be modified using the public setter methods.</p>"},{"location":"entry_update/#default-values","title":"Default Values","text":"Term Default Value Description Setter Getter Naming Strategy NamingStrategies.CAMEL_CASE The default naming strategy is CAMEL_CASE setNamingStrategy() getNamingStrategy() Resource Bundle Prefix <code>antares</code> The default resource bundle prefix is antares setResourceBundlePrefix() getResourceBundlePrefix() Use Metadata Labels <code>false</code> The labels are not derived from the metadata, but rather generated. setUseMetadataLabels() getUseMetadataLabels() Form Type FormTypes.SMART The SmartForm with SmartFields is generated as the default option. setFormType() getFormType() Form Title <code>Update + ${entityPath}</code> The <code>entityPath</code> parameter of the constructor is used setFormTitle() getFormTitle() Begin Button Text <code>Update</code> The default begin button text is Update setBeginButtonText() getBeginButtonText() Begin Button Type ButtonType.Success The default button type is Success setBeginButtonType() getBeginButtonType() End Button Text <code>Close</code> The default end button text is Close setEndButtonText() getEndButtonText() End Button Type ButtonType.Negative The default button type is Negative setEndButtonType() getEndButtonType() Mandatory Error Message <code>Please fill in all required fields.</code> The displayed message when the mandatory check is unsuccessful setMandatoryErrorMessage() getMandatoryErrorMessage() <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryUpdateCL from \"ui5/antares/entry/v2/EntryUpdateCL\"; // Import the class\nimport Table from \"sap/m/Table\";\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onUpdateProduct() {\n    // Initialize without a type and with a table id\n    const entry = new EntryUpdateCL(this, {\n      entityPath: \"Products\",\n      initializer: \"tblProducts\"\n    });\n\n    // Call \n    entry.updateEntry(); \n  }\n\n  public async onUpdateCategory() {\n    const selectedItem = (this.getView().byId(\"tblCategories\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    }\n\n    const selectedContext = selectedItem.getBindingContext();\n\n    // Initialize with a type and a binding context\n    const entry = new EntryUpdateCL&lt;ICategory&gt;(this, {\n      entityPath: \"Categories\",\n      initializer: selectedContext\n    }); \n\n    // Call\n    entry.updateEntry();\n  }\n\n  public async onUpdateCustomer () {\n    const selectedItem = (this.getView().byId(\"tblCustomers\") as Table).getSelectedItem();\n\n    if (!selectedItem) {\n      MessageBox.error(\"Please select a row from the table\");\n      return;\n    };\n\n    const customerKeys = {\n      ID: selectedItem.getBindingContext().getObject().ID\n    };\n\n    // Initialize without a type and with the key values\n    const entry = new EntryUpdateCL(this, {\n      entityPath: \"Customers\",\n      initializer: customerKeys\n    });\n\n    // Call\n    entry.updateEntry();\n  }\n}\n\ninterface ICategory {\n  ID: string;\n  name?: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryUpdateCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryUpdateCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onUpdateProduct: async function () {\n          // Initialize with a table id\n          const entry = new EntryUpdateCL(this, {\n            entityPath: \"Products\",\n            initializer: \"tblProducts\"\n          }); \n\n          // Call\n          entry.updateEntry();\n        },\n\n        onUpdateCategory: async function () {\n          const selectedItem = this.getView().byId(\"tblCategories\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          const selectedContext = selectedItem.getBindingContext();\n\n          // Initialize with a binding context\n          const entry = new EntryUpdateCL(this, {\n            entityPath: \"Categories\",\n            initializer: selectedContext\n          }); \n\n          // Call\n          entry.updateEntry();\n        },\n\n        onUpdateCustomer: async function () {\n          const selectedItem = this.getView().byId(\"tblCustomers\").getSelectedItem();\n\n          if (!selectedItem) {\n            MessageBox.error(\"Please select a row from the table\");\n            return;\n          }\n\n          const customerKeys = {\n            ID: selectedItem.getBindingContext().getObject().ID\n          };\n\n          // Initialize with the key values\n          const entry = new EntryUpdateCL(this, {\n            entityPath: \"Customers\",\n            initializer: customerKeys\n          }); \n\n          // Call\n          entry.updateEntry();          \n        }\n      });\n\n    });\n</code></pre> <p>The generated form with default values will be similar in appearance to the following example. However, it should be noted that the exact appearance may vary depending on the configurations and the <code>EntityType</code> properties of the <code>EntitySet</code>.</p> <p></p>"},{"location":"entry_update/#available-features","title":"Available Features","text":"<p>The EntryUpdateCL class is derived from the same abstract class as the EntryCreateCL class and contains the same methods. However, some of these functions are not applicable to the EntryUpdateCL class. </p> <p>Warning</p> <p>Please note that the default values for the available functions may differ.</p> <p>The features listed below are identical to those available in EntryCreateCL. Methods can be accessed through the object constructed from the EntryUpdateCL class.</p> <p>Tip</p> <p>To access the documentation for a particular feature, please click on the name of the feature.</p> Feature Availability Default Value Remarks Manual Submit \u2714 Disable Auto Dialog Close \u2714 false Label Generation \u2714 Resource Bundle Prefix \u2714 antares Naming Strategy \u2714 CAMEL_CASE Form Type \u2714 SMART Form Title \u2714 Update <code>${entityPath}</code> Form Grouping \u2714 [] Custom Data \u2714 [] Text In Edit Mode Source \u2714 [] Begin Button Text \u2714 Update Begin Button Type \u2714 ButtonType.Success End Button Text \u2714 Close End Button Type \u2714 ButtonType.Negative Properties with Edm.Guid Type \u2714 The random UUID generation is not available. You can only modify the visibilities of the properties with <code>Edm.Guid</code> type Form Property Order \u2714 [] Excluded Properties \u2714 [] Mandatory Properties \u2714 [] Readonly Properties \u2714 [keys] By default, the key properties are readonly and cannot be changed, but additional readonly properties can be added Attach Submit Completed \u2714 Attach Submit Failed \u2714 Response Class \u2714 Value Help \u2714 Validation Logic \u2714 Object Page \u2714 Custom Control \u2714 Custom Content \u2714 Custom Fragment \u2714"},{"location":"fragment_class/","title":"Fragment Class","text":"<p>The UI5 Antares library includes a built-in class (FragmentCL) providing a set of public methods to load the contents of a fragment file (*.fragment.xml) and to open a dialog or a popover.</p> <p>Info</p> <p>The Custom Control From Fragment and Custom Content From Fragment methods of the Entry classes also use the FragmentCL class.</p>"},{"location":"fragment_class/#constructor","title":"Constructor","text":"<p>In order to utilise the functionality of FragmentCL, it is necessary to initialise the object.</p> Parameter Type Mandatory Default Value Description controller sap.ui.core.mvc.Controller Yes The controller object (usually <code>this</code> object) fragmentPath <code>string</code> Yes The path of the fragment whose content will be loaded or opened openByControl? sap.ui.core.Control No If the loaded fragment contains a popover, this parameter determines which control the popover opens next to. For example: sap.m.Button <p>Example</p> <p>Let us assume that we have created a file with the extension .fragment.xml and the following content. Our objective is to open the dialog in the controller.</p> Dialog.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n&gt;\n    &lt;Dialog title=\"Create New Product\"&gt;\n        &lt;form:SimpleForm&gt;\n            &lt;form:content&gt;\n                &lt;Label text=\"Product ID\" /&gt;\n                &lt;MaskInput\n                    mask=\"CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC\"\n                    value=\"{ID}\"\n                    placeholderSymbol=\"_\"\n                &gt;\n                    &lt;rules&gt;\n                        &lt;MaskInputRule\n                            maskFormatSymbol=\"C\"\n                            regex=\"[a-f0-9]\"\n                        /&gt;\n                    &lt;/rules&gt;\n                &lt;/MaskInput&gt;\n                &lt;Label text=\"Name\" /&gt;\n                &lt;Input value=\"{name}\" /&gt;\n                &lt;Label text=\"Description\" /&gt;\n                &lt;TextArea\n                    value=\"{description}\"\n                    rows=\"5\"\n                /&gt;\n                &lt;Label text=\"Price\" /&gt;\n                &lt;Slider\n                    width=\"100%\"\n                    min=\"1000\"\n                    max=\"100000\"\n                    showAdvancedTooltip=\"true\"\n                    showHandleTooltip=\"true\"\n                    inputsAsTooltips=\"true\"\n                    enableTickmarks=\"true\"\n                    step=\"1000\"\n                    class=\"sapUiMediumMarginBottom\"\n                    value=\"{price}\"\n                /&gt;\n                &lt;Label text=\"Currency\" /&gt;\n                &lt;ComboBox selectedKey=\"{currency}\"&gt;\n                    &lt;items&gt;\n                        &lt;core:Item\n                            key=\"EUR\"\n                            text=\"Euro\"\n                        /&gt;\n                        &lt;core:Item\n                            key=\"USD\"\n                            text=\"US Dollar\"\n                        /&gt;\n                        &lt;core:Item\n                            key=\"TRY\"\n                            text=\"Turkish Lira\"\n                        /&gt;\n                    &lt;/items&gt;\n                &lt;/ComboBox&gt;\n            &lt;/form:content&gt;\n        &lt;/form:SimpleForm&gt;\n        &lt;beginButton&gt;\n            &lt;Button\n                text=\"Complete\"\n                press=\"onCompleteProduct\"\n            /&gt;\n        &lt;/beginButton&gt;\n        &lt;endButton&gt;\n            &lt;Button\n                text=\"Close\"\n                press=\"onCloseProductDialog\"\n            /&gt;\n        &lt;/endButton&gt;\n    &lt;/Dialog&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onOpenDialog() {\n    // Initialize with the controller and fragment path\n    const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/FragmentCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onOpenDialog: async function () {\n          // Initialize with the controller and fragment path\n          const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"fragment_class/#load-content","title":"Load Content","text":"<p>To load the content from a fragment file, the load(): Promise&lt;Control | Control[]&gt; method can be utilized.</p> <p>Info</p> <p>In the event that the fragment contains more than one UI control, the load() method will return an array containing the UI controls. Conversely, for single content, the load() method will return the UI control itself.</p> <p>Attention</p> <p>Please be aware that the load() method is asynchronous and must be awaited.</p> <p>Example</p> <p>Let us assume that we have created a file with the extension .fragment.xml with the following content. We would now like to use the sap.m.Text in the controller.</p> Text.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n&gt;\n    &lt;Text text=\"My Text\" /&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the class\nimport Text from \"sap/m/Text\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onLoadFragment() {\n    // Initialize with the controller and fragment path\n    const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n\n    // load the content of the fragment\n    const content = await fragment.load() as unknown as Text;\n\n    // use the content\n    console.log(content.getText());\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/FragmentCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onLoadFragment: async function () {\n          // Initialize with the controller and fragment path\n          const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n\n          // load the content of the fragment\n          const content = await fragment.load();\n\n          // use the content\n          console.log(content.getText());\n        }\n      });\n\n    });\n</code></pre>"},{"location":"fragment_class/#open-dialog-or-popover","title":"Open Dialog or Popover","text":"<p>There are two distinct methods for opening a dialog or popover from a fragment file.</p> <p>Attention</p> <p>Please be advised that both methods support only the following dialog and popover classes:</p> <ul> <li>sap.m.Dialog</li> <li>sap.m.Popover</li> <li>sap.m.MessagePopover</li> <li>sap.m.ColorPalettePopover</li> <li>sap.m.ResponsivePopover</li> </ul> <p>Tip</p> <p>Both methods include an optional parameter named <code>viewDependent: boolean</code>. Should you wish to add the dialog or popover as a dependent to your view, please set this parameter to true.</p>"},{"location":"fragment_class/#open-sync","title":"Open Sync","text":"<p>In order to utilise the open() method, it is essential to first execute the load() method.</p> <p>To utilize the open() method, it is essential to first execute the load() method.</p> <p>Info</p> <p>The open() method returns the dialog or popover loaded from a fragment using the load() method.</p> <p>Attention</p> <p>When opening a popover, it is necessary to set the control that the popover opens next to. Please refer to the constructor documentation for further information.</p> <p>Dialog Example</p> <p>Let us assume that we have created a file with the extension .fragment.xml with the following content. We would now like to open the dialog in the controller.</p> Dialog.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n&gt;\n    &lt;Dialog title=\"Create New Product\"&gt;\n        &lt;form:SimpleForm&gt;\n            &lt;form:content&gt;\n                &lt;Label text=\"Product ID\" /&gt;\n                &lt;MaskInput\n                    mask=\"CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC\"\n                    value=\"{ID}\"\n                    placeholderSymbol=\"_\"\n                &gt;\n                    &lt;rules&gt;\n                        &lt;MaskInputRule\n                            maskFormatSymbol=\"C\"\n                            regex=\"[a-f0-9]\"\n                        /&gt;\n                    &lt;/rules&gt;\n                &lt;/MaskInput&gt;\n                &lt;Label text=\"Name\" /&gt;\n                &lt;Input value=\"{name}\" /&gt;\n                &lt;Label text=\"Description\" /&gt;\n                &lt;TextArea\n                    value=\"{description}\"\n                    rows=\"5\"\n                /&gt;\n            &lt;/form:content&gt;\n        &lt;/form:SimpleForm&gt;\n        &lt;beginButton&gt;\n            &lt;Button\n                text=\"Complete\"\n                press=\"onCompleteProduct\"\n            /&gt;\n        &lt;/beginButton&gt;\n        &lt;endButton&gt;\n            &lt;Button\n                text=\"Close\"\n                press=\"onCloseProductDialog\"\n            /&gt;\n        &lt;/endButton&gt;\n    &lt;/Dialog&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async openDialog() {\n    // Initialize with the controller and fragment path\n    const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n\n    // load the content of the fragment\n    await fragment.load();\n\n    // open the dialog\n    fragment.open();\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/FragmentCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        openDialog: async function () {\n          // Initialize with the controller and fragment path\n          const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n\n          // load the content of the fragment\n          await fragment.load();\n\n          // open the dialog\n          fragment.open();\n        }\n      });\n\n    });\n</code></pre> <p>Popover Example</p> <p>Let us assume that we have created a file with the extension .fragment.xml and the following content. We would now like to open the popover in the controller.</p> Popover.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n&gt;\n    &lt;Popover&gt;\n        &lt;content&gt;\n            &lt;Text text=\"Test\" /&gt;\n            &lt;Button\n                text=\"Finish\"\n                press=\"onFinish\"\n            /&gt;\n        &lt;/content&gt;\n    &lt;/Popover&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the class\nimport Button from \"sap/m/Button\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async openPopover() {\n    // Initialize with the controller and fragment path and the open by control\n    const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\", this.getView()?.byId(\"myButton\") as Button);\n\n    // load the content of the fragment\n    await fragment.load();\n\n    // open the dialog\n    fragment.open();\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/FragmentCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        openPopover: async function () {\n          // Initialize with the controller and fragment path and the open by control\n          const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\", this.getView().byId(\"myButton\"));\n\n          // load the content of the fragment\n          await fragment.load();\n\n          // open the dialog\n          fragment.open();\n        }\n      });\n\n    });\n</code></pre>"},{"location":"fragment_class/#open-async","title":"Open Async","text":"<p>The openAsync() method first executes the load() method internally, and then opens the dialog or popover.</p> <p>Info</p> <p>The openAsync() method returns the dialog or popover loaded from a fragment.</p> <p>Attention</p> <p>When opening a popover, it is necessary to set the control that the popover opens next to. Please refer to the constructor documentation for further information.</p> <p>Tip</p> <p>Please be aware that the openAsync() method is asynchronous. To retrieve the dialog or popover, please await the openAsync() method.</p> <p>Dialog Example</p> <p>Let us assume that we have created a file with the extension .fragment.xml and the following content. We would now like to open the dialog in the controller.</p> Dialog.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n&gt;\n    &lt;Dialog title=\"Create New Product\"&gt;\n        &lt;form:SimpleForm&gt;\n            &lt;form:content&gt;\n                &lt;Label text=\"Product ID\" /&gt;\n                &lt;MaskInput\n                    mask=\"CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC\"\n                    value=\"{ID}\"\n                    placeholderSymbol=\"_\"\n                &gt;\n                    &lt;rules&gt;\n                        &lt;MaskInputRule\n                            maskFormatSymbol=\"C\"\n                            regex=\"[a-f0-9]\"\n                        /&gt;\n                    &lt;/rules&gt;\n                &lt;/MaskInput&gt;\n                &lt;Label text=\"Name\" /&gt;\n                &lt;Input value=\"{name}\" /&gt;\n                &lt;Label text=\"Description\" /&gt;\n                &lt;TextArea\n                    value=\"{description}\"\n                    rows=\"5\"\n                /&gt;\n            &lt;/form:content&gt;\n        &lt;/form:SimpleForm&gt;\n        &lt;beginButton&gt;\n            &lt;Button\n                text=\"Complete\"\n                press=\"onCompleteProduct\"\n            /&gt;\n        &lt;/beginButton&gt;\n        &lt;endButton&gt;\n            &lt;Button\n                text=\"Close\"\n                press=\"onCloseProductDialog\"\n            /&gt;\n        &lt;/endButton&gt;\n    &lt;/Dialog&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async openDialog() {\n    // Initialize with the controller and fragment path\n    const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n\n    // open the dialog\n    fragment.openAsync();\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/FragmentCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        openDialog: async function () {\n          // Initialize with the controller and fragment path\n          const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n\n          // open the dialog\n          fragment.openAsync();\n        }\n      });\n\n    });\n</code></pre> <p>Popover Example</p> <p>Let us assume that we have created a file with the extension .fragment.xml and the following content. We would now like to open the popover in the controller.</p> Popover.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n&gt;\n    &lt;Popover&gt;\n        &lt;content&gt;\n            &lt;Text text=\"Test\" /&gt;\n            &lt;Button\n                text=\"Finish\"\n                press=\"onFinish\"\n            /&gt;\n        &lt;/content&gt;\n    &lt;/Popover&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the class\nimport Button from \"sap/m/Button\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async openPopover() {\n    // Initialize with the controller and fragment path and the open by control\n    const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\", this.getView()?.byId(\"myButton\") as Button);\n\n    // open the dialog\n    fragment.openAsync();\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/FragmentCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        openPopover: async function () {\n          // Initialize with the controller and fragment path and the open by control\n          const fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\", this.getView().byId(\"myButton\"));\n\n          // open the dialog\n          fragment.openAsync();\n        }\n      });\n\n    });\n</code></pre>"},{"location":"fragment_class/#close-dialog-or-popover","title":"Close Dialog or Popover","text":"<p>To close the dialog or popover that was opened by any of the approaches listed below, you will need to use the close() or closeAndDestroy() method.</p> <p>1) load() and open()</p> <p>2) openAsync()</p> <p>Attention</p> <p>Please be advised that it is your responsibility to destroy the content after using the close() method. This can be achieved by using the destroyFragmentContent() method. Alternatively, if you use the closeAndDestroy() method, the content will be destroyed automatically.</p> <p>Example</p> <p>Let us assume that we have created a file with the extension .fragment.xml with the following content. We would now like to open the dialog in the controller. When the user presses the Close button, we will close the dialog and destroy it.</p> Dialog.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n&gt;\n    &lt;Dialog title=\"Create New Product\"&gt;\n        &lt;form:SimpleForm&gt;\n            &lt;form:content&gt;\n                &lt;Label text=\"Product ID\" /&gt;\n                &lt;MaskInput\n                    mask=\"CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC\"\n                    value=\"{ID}\"\n                    placeholderSymbol=\"_\"\n                &gt;\n                    &lt;rules&gt;\n                        &lt;MaskInputRule\n                            maskFormatSymbol=\"C\"\n                            regex=\"[a-f0-9]\"\n                        /&gt;\n                    &lt;/rules&gt;\n                &lt;/MaskInput&gt;\n                &lt;Label text=\"Name\" /&gt;\n                &lt;Input value=\"{name}\" /&gt;\n                &lt;Label text=\"Description\" /&gt;\n                &lt;TextArea\n                    value=\"{description}\"\n                    rows=\"5\"\n                /&gt;\n            &lt;/form:content&gt;\n        &lt;/form:SimpleForm&gt;\n        &lt;beginButton&gt;\n            &lt;Button\n                text=\"Complete\"\n                press=\"onCompleteProduct\"\n            /&gt;\n        &lt;/beginButton&gt;\n        &lt;endButton&gt;\n            &lt;Button\n                text=\"Close\"\n                press=\"onCloseDialog\"\n            /&gt;\n        &lt;/endButton&gt;\n    &lt;/Dialog&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  private fragment: FragmentCL; // The class property\n\n  public onInit() {\n\n  }\n\n  public async openDialog() {\n    // Initialize with the controller and fragment path and set to the class property\n    this.fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n\n    // open the dialog\n    this.fragment.openAsync();\n  }\n\n  public async onCloseDialog () {\n    this.fragment.close(); // close the dialog\n    this.fragment.destroyFragmentContent(); // do not forget to destroy after closing\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/FragmentCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        openDialog: async function () {\n          // Initialize with the controller and fragment path and set to the class property\n          this.fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n\n          // open the dialog\n          this.fragment.openAsync();\n        },\n\n        onCloseDialog: async function () {\n          this.fragment.close(); // close the dialog\n          this.fragment.destroyFragmentContent(); // do not forget to destroy after closing\n        }\n      });\n\n    });\n</code></pre>"},{"location":"fragment_class/#get-fragment-content","title":"Get Fragment Content","text":"<p>To retrieve the content loaded from a fragment file using the load() or openAsync() method, the getFragmentContent() method can be utilized.</p> Returns Description Control | Control[] Returns the control or controls loaded from a fragment file using the load() or openAsync() method"},{"location":"fragment_class/#destroy-fragment-content","title":"Destroy Fragment Content","text":"<p>To destroy the content loaded from a fragment using the load() or openAsync() methods, the destroyFragmentContent() method can be utilized.</p> <p>Attention</p> <p>Should you wish to destroy the content of the dialog when the user presses the ESC button on the keyboard, we advise you to use the setAutoDestroyOnESC(destroy: boolean) method and set the parameter of the method to true. Otherwise, you will be responsible for destroying the content when the user presses the ESC button. Please note that if the content is not destroyed in each ESC event, the dialog cannot be loaded again.</p> <p>Example</p> <p>Let us assume that we have created a file with the extension .fragment.xml and the following content. We would now like to open the dialog in the controller. When the user presses the Close button, we will close the dialog and destroy it.</p> Dialog.fragment.xml<pre><code>&lt;core:FragmentDefinition\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n&gt;\n    &lt;Dialog title=\"Create New Product\"&gt;\n        &lt;form:SimpleForm&gt;\n            &lt;form:content&gt;\n                &lt;Label text=\"Product ID\" /&gt;\n                &lt;MaskInput\n                    mask=\"CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC\"\n                    value=\"{ID}\"\n                    placeholderSymbol=\"_\"\n                &gt;\n                    &lt;rules&gt;\n                        &lt;MaskInputRule\n                            maskFormatSymbol=\"C\"\n                            regex=\"[a-f0-9]\"\n                        /&gt;\n                    &lt;/rules&gt;\n                &lt;/MaskInput&gt;\n                &lt;Label text=\"Name\" /&gt;\n                &lt;Input value=\"{name}\" /&gt;\n                &lt;Label text=\"Description\" /&gt;\n                &lt;TextArea\n                    value=\"{description}\"\n                    rows=\"5\"\n                /&gt;\n            &lt;/form:content&gt;\n        &lt;/form:SimpleForm&gt;\n        &lt;beginButton&gt;\n            &lt;Button\n                text=\"Complete\"\n                press=\"onCompleteProduct\"\n            /&gt;\n        &lt;/beginButton&gt;\n        &lt;endButton&gt;\n            &lt;Button\n                text=\"Close\"\n                press=\"onCloseDialog\"\n            /&gt;\n        &lt;/endButton&gt;\n    &lt;/Dialog&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport FragmentCL from \"ui5/antares/ui/FragmentCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  private fragment: FragmentCL; // The class property\n\n  public onInit() {\n\n  }\n\n  public async openDialog() {\n    // Initialize with the controller and fragment path and set to the class property\n    this.fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n\n    // open the dialog\n    this.fragment.openAsync();\n  }\n\n  public async onCloseDialog () {\n    this.fragment.close(); // close the dialog\n    this.fragment.destroyFragmentContent(); // do not forget to destroy after closing\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/FragmentCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, FragmentCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        openDialog: async function () {\n          // Initialize with the controller and fragment path and set to the class property\n          this.fragment = new FragmentCL(this, \"your.apps.namespace.fragments.FragmentFileName\");\n\n          // open the dialog\n          this.fragment.openAsync();\n        },\n\n        onCloseDialog: async function () {\n          this.fragment.close(); // close the dialog\n          this.fragment.destroyFragmentContent(); // do not forget to destroy after closing\n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_create/","title":"OData Create","text":"<p>The ODataCreateCL class leverages the sap.ui.model.odata.v2.ODataModel to facilitate the handling of POST (CREATE) requests in a promisified manner.</p>"},{"location":"odata_create/#constructor","title":"Constructor","text":"<p>In order to utilise the functionality of ODataCreateCL, it is necessary to initialise the object.</p> Parameter Type Mandatory Default Value Description controller sap.ui.core.mvc.Controller Yes The controller object (usually <code>this</code> object) entityPath <code>string</code> Yes The name of the EntitySet. It can start with a \"/\" (slash) modelName? <code>string</code> No <code>undefined</code> The name of the OData V2 model which can be found on the manifest.json file. Leave this parameter undefined if the name of the OData model = \"\" (empty string) <p>Tip for TypeScript</p> <p>The ODataCreateCL&lt;EntityT&gt; is a generic class that can be initialized with a type containing the properties of the <code>EntitySet</code> specified as a parameter in the class constructor.</p> <ul> <li>The <code>EntityT</code> type is used as the type for the <code>data</code> parameter of the setData(data: EntityT) method and as the return type for the getData(): EntityT method.</li> <li>Additionally, the <code>EntityT</code> type is utilized as the return type for the create(): Promise&lt;EntityT&gt; method, which is employed to facilitate the POST request through the sap.ui.model.odata.v2.ODataModel.</li> </ul> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataCreateCL from \"ui5/antares/odata/v2/ODataCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    // Initialize without a type\n    const odata = new ODataCreateCL(this, \"Products\"); \n  }\n\n  public async onCreateCategory() {\n    // Initialize with a type\n    const odata = new ODataCreateCL&lt;ICategory&gt;(this, \"Categories\"); \n  }\n\n  public async onCreateCustomer() {\n    // Initialize with a model name\n    const odata = new ODataCreateCL(this, \"Customers\", \"myODataModelName\"); \n  }\n}\n\ninterface ICategory {\n  ID: string;\n  name?: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // Initialize\n          const odata = new ODataCreateCL(this, \"Products\"); \n        },\n\n        onCreateCategory: async function () {\n          // Initialize with a model name\n          const odata = new ODataCreateCL(this, \"Categories\", \"myODataModelName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_create/#set-data","title":"Set Data","text":"<p>To define the data that will be transmitted via the POST HTTP request body, the setData() method can be utilized.</p> <p>Tip</p> <p>It is also possible to set the data for the navigation properties (deep create).</p> Setter (setData)Getter (getData) <p> Parameter Type Mandatory Description data <code>EntityT</code> Yes The data that will be sent via the POST HTTP request body </p> <p> Returns Description <code>EntityT</code> Returns the value that was set using setData() method. Default value is undefined </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataCreateCL from \"ui5/antares/odata/v2/ODataCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    // Initialize with a type\n    const odata = new ODataCreateCL&lt;IProducts&gt;(this, \"Products\"); \n\n    // set the http body\n    odata.setData({\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\",\n      name: \"Product Name\",\n      description: \"Description\",\n      brand: \"Brand\",\n      price: 999,\n      currency: \"EUR\",\n      quantityInStock: 15,\n      categoryID: \"eb7783a6-f30f-4f7d-b85c-f211eea54568\",\n      supplierID: \"7734d25f-0d1e-4ab4-b8a8-cd201f29fd2f\"\n    });\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // Initialize\n          const odata = new ODataCreateCL(this, \"Products\"); \n\n          // set the http body\n          odata.setData({\n            ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\",\n            name: \"Product Name\",\n            description: \"Description\",\n            brand: \"Brand\",\n            price: 999,\n            currency: \"EUR\",\n            quantityInStock: 15,\n            categoryID: \"eb7783a6-f30f-4f7d-b85c-f211eea54568\",\n            supplierID: \"7734d25f-0d1e-4ab4-b8a8-cd201f29fd2f\"\n          });\n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_create/#create-request","title":"Create Request","text":"<p>To send a POST (Create) request through the OData V2 model, you can use the create() method.</p> <p>Attention</p> <p>It is a prerequisite that data be set using the setData() method before calling the create() method.</p> <p>Info</p> <ul> <li>The create() method runs asynchronously and can be awaited. </li> <li>If the request is successful, the create() method will return the data of the newly created entity.</li> </ul> <p>Warning</p> <p>In the event of a failed POST request, the OData Create class will generate an error message. To ensure the error is identified and addressed, it is recommended to call the create() method within a try-catch block.</p>"},{"location":"odata_create/#error-type","title":"Error Type","text":"<p>In the event of a failed POST request, the object generated by the class can contain the properties outlined below.</p> Returns Description <code>object</code> \u00a0\u00a0\u00a0\u00a0headers?: <code>object</code> | <code>undefined</code> The HTTP response headers. \u00a0\u00a0\u00a0\u00a0message?: <code>string</code> | <code>undefined</code> The HTTP response message. \u00a0\u00a0\u00a0\u00a0responseText?: <code>string</code> | <code>undefined</code> The HTTP response text. \u00a0\u00a0\u00a0\u00a0statusCode?: <code>string</code> | <code>number</code> | <code>undefined</code> The status code of the HTTP request. \u00a0\u00a0\u00a0\u00a0statusText?: <code>string</code> | <code>undefined</code> The HTTP status text. <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataCreateCL from \"ui5/antares/odata/v2/ODataCreateCL\"; // Import the class\nimport { IError } from \"ui5/antares/types/common\"; // Import the error type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    // Initialize with a type\n    const odata = new ODataCreateCL&lt;IProducts&gt;(this, \"Products\"); \n\n    // set the http body\n    odata.setData({\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\",\n      name: \"Product Name\",\n      description: \"Description\",\n      brand: \"Brand\",\n      price: 999,\n      currency: \"EUR\",\n      quantityInStock: 15,\n      categoryID: \"eb7783a6-f30f-4f7d-b85c-f211eea54568\",\n      supplierID: \"7734d25f-0d1e-4ab4-b8a8-cd201f29fd2f\"\n    });\n\n    try {\n      // send the http request and get the result\n      const result = await odata.create();\n      MessageBox.information(result.ID + \" was created.\");\n    } catch (error) {\n      // catch the error\n      MessageBox.error((error as IError).message || \"Request failed\");\n    }\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataCreateCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataCreateCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // Initialize\n          const odata = new ODataCreateCL(this, \"Products\"); \n\n          // set the http body\n          odata.setData({\n            ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\",\n            name: \"Product Name\",\n            description: \"Description\",\n            brand: \"Brand\",\n            price: 999,\n            currency: \"EUR\",\n            quantityInStock: 15,\n            categoryID: \"eb7783a6-f30f-4f7d-b85c-f211eea54568\",\n            supplierID: \"7734d25f-0d1e-4ab4-b8a8-cd201f29fd2f\"\n          });\n\n          try {\n            // send the http request and get the result\n            const result = await odata.create();\n            MessageBox.information(result.ID + \" was created.\");\n          } catch (error) {\n            // catch the error\n            MessageBox.error(error.message || \"Request failed\");\n          }          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_create/#url-parameters","title":"URL Parameters","text":"<p>Prior to sending the POST request with the create() method, it is possible to set the URL parameters using the setUrlParameters() method.</p> Setter (setUrlParameters)Getter (getUrlParameters) <p> Parameter Type Mandatory Description urlParameters <code>Record&lt;string, string&gt;</code> Yes The URL parameters of the POST request </p> <p> Returns Description <code>Record&lt;string, string&gt; | undefined</code> Returns the value that was set using setUrlParameters() method. Default value is undefined </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataCreateCL from \"ui5/antares/odata/v2/ODataCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    // Initialize with a type\n    const odata = new ODataCreateCL&lt;IProducts&gt;(this, \"Products\"); \n\n    // set the url parameters\n    odata.setUrlParameters({\n      \"$expand\": \"toProductLocations\"\n    });\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // Initialize\n          const odata = new ODataCreateCL(this, \"Products\"); \n\n          // set the url parameters\n          odata.setUrlParameters({\n            \"$expand\": \"toProductLocations\"\n          });         \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_create/#refresh-after-change","title":"Refresh After Change","text":"<p>The OData V2 model will be automatically refreshed after the POST request has been completed.</p> <p>To change the default behavior, the setRefreshAfterChange() method can be utilized.</p> Setter (setRefreshAfterChange)Getter (getRefreshAfterChange) <p> Parameter Type Mandatory Description refreshAfterChange <code>boolean</code> Yes If set to false, the OData V2 model will not be refreshed after the request has been completed </p> <p> Returns Description <code>boolean</code> Returns the value that was set using setRefreshAfterChange() method. Default value is true </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataCreateCL from \"ui5/antares/odata/v2/ODataCreateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    // Initialize with a type\n    const odata = new ODataCreateCL&lt;IProducts&gt;(this, \"Products\"); \n\n    // deactivate the auto model refresh\n    odata.setRefreshAfterChange(false);\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataCreateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataCreateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // Initialize\n          const odata = new ODataCreateCL(this, \"Products\"); \n\n          // deactivate the auto model refresh\n          odata.setRefreshAfterChange(false);      \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_create/#additional-response-info","title":"Additional Response Info","text":"<p>The create() method returns the data of the successfully created entity. However, you may require further information such as the <code>status code</code> and <code>headers</code>.</p> <p>Once the create() function has been completed, the getResponse() method can be utilized to obtain further details.</p> Returns Description <code>object</code> \u00a0\u00a0\u00a0\u00a0$reported?: <code>boolean</code> | <code>undefined</code> \u00a0\u00a0\u00a0\u00a0body?: <code>string</code> | <code>undefined</code> The HTTP body \u00a0\u00a0\u00a0\u00a0headers?: <code>object</code> | <code>undefined</code> The HTTP response headers. \u00a0\u00a0\u00a0\u00a0statusCode?: <code>string</code> | <code>number</code> | <code>undefined</code> The status code of the HTTP request. \u00a0\u00a0\u00a0\u00a0statusText?: <code>string</code> | <code>undefined</code> The HTTP status text. \u00a0\u00a0\u00a0\u00a0_imported?: <code>boolean</code> | <code>undefined</code> \u00a0\u00a0\u00a0\u00a0data?: <code>EntityT</code> | <code>undefined</code> The data that was created <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataCreateCL from \"ui5/antares/odata/v2/ODataCreateCL\"; // Import the class\nimport { IError } from \"ui5/antares/types/common\"; // Import the error type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    // Initialize with a type\n    const odata = new ODataCreateCL&lt;IProducts&gt;(this, \"Products\"); \n\n    // set the http body\n    odata.setData({\n      ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\",\n      name: \"Product Name\",\n      description: \"Description\",\n      brand: \"Brand\",\n      price: 999,\n      currency: \"EUR\",\n      quantityInStock: 15,\n      categoryID: \"eb7783a6-f30f-4f7d-b85c-f211eea54568\",\n      supplierID: \"7734d25f-0d1e-4ab4-b8a8-cd201f29fd2f\"\n    });\n\n    try {\n      // send the http request and get the result\n      const result = await odata.create();\n      MessageBox.information(result.ID + \" was created.\");\n\n      // get the additional response info\n      const response = odata.getResponse();\n\n      if (response) {\n        console.log(\"Status Code: \" + response.statusCode);\n      }\n    } catch (error) {\n      // catch the error\n      MessageBox.error((error as IError).message || \"Request failed\");\n    }\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataCreateCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataCreateCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          // Initialize\n          const odata = new ODataCreateCL(this, \"Products\"); \n\n          // set the http body\n          odata.setData({\n            ID: \"b2f0013e-418f-42aa-9a24-3770fe17ce18\",\n            name: \"Product Name\",\n            description: \"Description\",\n            brand: \"Brand\",\n            price: 999,\n            currency: \"EUR\",\n            quantityInStock: 15,\n            categoryID: \"eb7783a6-f30f-4f7d-b85c-f211eea54568\",\n            supplierID: \"7734d25f-0d1e-4ab4-b8a8-cd201f29fd2f\"\n          });\n\n          try {\n            // send the http request and get the result\n            const result = await odata.create();\n            MessageBox.information(result.ID + \" was created.\");\n\n            // get the additional response info\n            const response = odata.getResponse();\n\n            if (response) {\n              console.log(\"Status Code: \" + response.statusCode);\n            }            \n          } catch (error) {\n            // catch the error\n            MessageBox.error(error.message || \"Request failed\");\n          }          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_create/#create-entry","title":"Create Entry","text":"<p>To create a transient entity context which can be bound to a form or a dialog, the createEntry() method can be utilized.</p> <p>Tip</p> <p>If you wish to create the context with the initial values, the setData() method can be utilized.</p> Returns Description <code>Context</code> The context of the transient entity"},{"location":"odata_delete/","title":"OData Delete","text":"<p>The ODataDeleteCL class leverages the sap.ui.model.odata.v2.ODataModel to facilitate the handling of DELETE requests in a promisified manner.</p>"},{"location":"odata_delete/#constructor","title":"Constructor","text":"<p>In order to utilise the functionality of ODataDeleteCL, it is necessary to initialise the object.</p> Parameter Type Mandatory Default Value Description controller sap.ui.core.mvc.Controller Yes The controller object (usually <code>this</code> object) entityPath <code>string</code> Yes The name of the EntitySet. It can start with a \"/\" (slash) modelName? <code>string</code> No <code>undefined</code> The name of the OData V2 model which can be found on the manifest.json file. Leave this parameter undefined if the name of the OData model = \"\" (empty string) <p>Tip for TypeScript</p> <p>The ODataDeleteCL&lt;EntityKeysT&gt; is a generic class that can be initialized with a type containing the key properties of the <code>EntitySet</code> specified as a parameter in the class constructor.</p> <ul> <li>The <code>EntityKeysT</code> type is used as the return type and type for the <code>keys</code> parameter of the delete(keys: EntityKeysT): Promise&lt;EntityKeysT&gt; method.</li> </ul> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataDeleteCL from \"ui5/antares/odata/v2/ODataDeleteCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteProduct() {\n    // Initialize without a type\n    const odata = new ODataDeleteCL(this, \"Products\"); \n  }\n\n  public async onDeleteCategory() {\n    // Initialize with a type\n    const odata = new ODataDeleteCL&lt;ICategoryKeys&gt;(this, \"Categories\"); \n  }\n\n  public async onDeleteCustomer() {\n    // Initialize with a model name\n    const odata = new ODataDeleteCL(this, \"Customers\", \"myODataModelName\"); \n  }\n}\n\ninterface ICategoryKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataDeleteCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataDeleteCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize\n          const odata = new ODataDeleteCL(this, \"Products\"); \n        },\n\n        onDeleteCategory: async function () {\n          // Initialize with a model name\n          const odata = new ODataDeleteCL(this, \"Categories\", \"myODataModelName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_delete/#delete-request","title":"Delete Request","text":"<p>To send a DELETE request through the OData V2 model, you can use the delete(keys: EntityKeysT): Promise&lt;EntityKeysT&gt; method.</p> <p>Info</p> <ul> <li>The delete() method runs asynchronously and can be awaited. </li> <li>If the request is successful, the delete() method will return the key data of the deleted entity.</li> </ul> <p>Warning</p> <p>In the event of a failed DELETE request, the OData Delete class will generate an error message. To ensure the error is identified and addressed, it is recommended to call the delete() method within a try-catch block.</p>"},{"location":"odata_delete/#error-type","title":"Error Type","text":"<p>In the event of a failed DELETE request, the object generated by the class can contain the properties outlined below.</p> Returns Description <code>object</code> \u00a0\u00a0\u00a0\u00a0headers?: <code>object</code> | <code>undefined</code> The HTTP response headers. \u00a0\u00a0\u00a0\u00a0message?: <code>string</code> | <code>undefined</code> The HTTP response message. \u00a0\u00a0\u00a0\u00a0responseText?: <code>string</code> | <code>undefined</code> The HTTP response text. \u00a0\u00a0\u00a0\u00a0statusCode?: <code>string</code> | <code>number</code> | <code>undefined</code> The status code of the HTTP request. \u00a0\u00a0\u00a0\u00a0statusText?: <code>string</code> | <code>undefined</code> The HTTP status text. <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataDeleteCL from \"ui5/antares/odata/v2/ODataDeleteCL\"; // Import the class\nimport { IError } from \"ui5/antares/types/common\"; // Import the error type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteProduct() {\n    // Initialize with a type\n    const odata = new ODataDeleteCL&lt;IProductKeys&gt;(this, \"Products\"); \n\n    try {\n      // send the http request and get the result. Note: You have to specify the key values of the entity that will be deleted\n      const result = await odata.delete({\n        ID: \"3ccb5dd2-cc12-483a-b569-a6ec844f8f0b\"\n      });\n\n      MessageBox.information(\"The entity with the following ID: \" + result.ID + \" was deleted.\");\n    } catch (error) {\n      // catch the error\n      MessageBox.error((error as IError).message || \"Request failed\");\n    }\n  }\n\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataDeleteCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataDeleteCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize\n          const odata = new ODataDeleteCL(this, \"Products\"); \n\n          try {\n            // send the http request and get the result. Note: You have to specify the key values of the entity that will be deleted\n            const result = await odata.delete({\n              ID: \"3ccb5dd2-cc12-483a-b569-a6ec844f8f0b\"\n            });\n\n            MessageBox.information(\"The entity with the following ID: \" + result.ID + \" was deleted.\");\n          } catch (error) {\n            // catch the error\n            MessageBox.error(error.message || \"Request failed\");\n          }          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_delete/#url-parameters","title":"URL Parameters","text":"<p>Prior to sending the DELETE request with the delete() method, it is possible to set the URL parameters using the setUrlParameters() method.</p> Setter (setUrlParameters)Getter (getUrlParameters) <p> Parameter Type Mandatory Description urlParameters <code>Record&lt;string, string&gt;</code> Yes The URL parameters of the DELETE request </p> <p> Returns Description <code>Record&lt;string, string&gt; | undefined</code> Returns the value that was set using setUrlParameters() method. Default value is undefined </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataDeleteCL from \"ui5/antares/odata/v2/ODataDeleteCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteProduct() {\n    // Initialize with a type\n    const odata = new ODataDeleteCL&lt;IProductKeys&gt;(this, \"Products\"); \n\n    // set the url parameters\n    odata.setUrlParameters({\n      \"$expand\": \"toProductLocations\"\n    });\n  }\n\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataDeleteCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataDeleteCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize\n          const odata = new ODataDeleteCL(this, \"Products\"); \n\n          // set the url parameters\n          odata.setUrlParameters({\n            \"$expand\": \"toProductLocations\"\n          });         \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_delete/#refresh-after-change","title":"Refresh After Change","text":"<p>The OData V2 model will be automatically refreshed after the DELETE request has been completed.</p> <p>To change the default behavior, the setRefreshAfterChange() method can be utilized.</p> Setter (setRefreshAfterChange)Getter (getRefreshAfterChange) <p> Parameter Type Mandatory Description refreshAfterChange <code>boolean</code> Yes If set to false, the OData V2 model will not be refreshed after the request has been completed </p> <p> Returns Description <code>boolean</code> Returns the value that was set using setRefreshAfterChange() method. Default value is true </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataDeleteCL from \"ui5/antares/odata/v2/ODataDeleteCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteProduct() {\n    // Initialize with a type\n    const odata = new ODataDeleteCL&lt;IProductKeys&gt;(this, \"Products\"); \n\n    // deactivate the auto model refresh\n    odata.setRefreshAfterChange(false);\n  }\n\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataDeleteCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataDeleteCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize\n          const odata = new ODataDeleteCL(this, \"Products\"); \n\n          // deactivate the auto model refresh\n          odata.setRefreshAfterChange(false);      \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_delete/#additional-response-info","title":"Additional Response Info","text":"<p>The delete() method returns the key data of the successfully deleted entity. However, you may require further information such as the <code>status code</code> and <code>headers</code>.</p> <p>Once the delete() function has been completed, the getResponse() method can be utilized to obtain further details.</p> Returns Description <code>object</code> \u00a0\u00a0\u00a0\u00a0$reported?: <code>boolean</code> | <code>undefined</code> \u00a0\u00a0\u00a0\u00a0body?: <code>string</code> | <code>undefined</code> The HTTP body \u00a0\u00a0\u00a0\u00a0headers?: <code>object</code> | <code>undefined</code> The HTTP response headers. \u00a0\u00a0\u00a0\u00a0statusCode?: <code>string</code> | <code>number</code> | <code>undefined</code> The status code of the HTTP request. \u00a0\u00a0\u00a0\u00a0statusText?: <code>string</code> | <code>undefined</code> The HTTP status text. \u00a0\u00a0\u00a0\u00a0_imported?: <code>boolean</code> | <code>undefined</code> \u00a0\u00a0\u00a0\u00a0data?: <code>EntityT</code> | <code>undefined</code> The data that was deleted <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataDeleteCL from \"ui5/antares/odata/v2/ODataDeleteCL\"; // Import the class\nimport { IError } from \"ui5/antares/types/common\"; // Import the error type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onDeleteProduct() {\n    // Initialize with a type\n    const odata = new ODataDeleteCL&lt;IProductKeys&gt;(this, \"Products\"); \n\n    try {\n      // send the http request and get the result\n      const result = await odata.delete({\n        ID: \"3ccb5dd2-cc12-483a-b569-a6ec844f8f0b\"\n      });\n\n      MessageBox.information(result.ID + \" was deleted.\");\n\n      // get the additional response info\n      const response = odata.getResponse();\n\n      if (response) {\n        console.log(\"Status Code: \" + response.statusCode);\n      }\n    } catch (error) {\n      // catch the error\n      MessageBox.error((error as IError).message || \"Request failed\");\n    }\n  }\n\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataDeleteCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataDeleteCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onDeleteProduct: async function () {\n          // Initialize\n          const odata = new ODataDeleteCL(this, \"Products\"); \n\n          try {\n            // send the http request and get the result\n            const result = await odata.delete({\n              ID: \"3ccb5dd2-cc12-483a-b569-a6ec844f8f0b\"\n            });\n\n            MessageBox.information(result.ID + \" was deleted.\");\n\n            // get the additional response info\n            const response = odata.getResponse();\n\n            if (response) {\n              console.log(\"Status Code: \" + response.statusCode);\n            }            \n          } catch (error) {\n            // catch the error\n            MessageBox.error(error.message || \"Request failed\");\n          }          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_read/","title":"OData Read","text":"<p>The ODataReadCL class leverages the sap.ui.model.odata.v2.ODataModel to facilitate the handling of GET (READ) requests in a promisified manner.</p>"},{"location":"odata_read/#constructor","title":"Constructor","text":"<p>In order to utilise the functionality of ODataReadCL, it is necessary to initialise the object.</p> Parameter Type Mandatory Default Value Description controller sap.ui.core.mvc.Controller Yes The controller object (usually <code>this</code> object) entityPath <code>string</code> Yes The name of the EntitySet. It can start with a \"/\" (slash) modelName? <code>string</code> No <code>undefined</code> The name of the OData V2 model which can be found on the manifest.json file. Leave this parameter undefined if the name of the OData model = \"\" (empty string) <p>Tip for TypeScript</p> <p>The ODataReadCL&lt;EntityT, EntityKeysT&gt; is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityT</code> type is used as the returning type of the read(): Promise&lt;EntityT[]&gt; and readByKey(keys: EntityKeysT): Promise&lt;EntityT&gt; methods.</p> <p>The <code>EntityKeysT</code> type is used as the type for the <code>keys</code> parameter of the readByKey(keys: EntityKeysT): Promise&lt;EntityT&gt; method.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataReadCL from \"ui5/antares/odata/v2/ODataReadCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onReadProduct() {\n    // Initialize without a type\n    const odata = new ODataReadCL(this, \"Products\"); \n  }\n\n  public async onReadCategory() {\n    // Initialize with a type\n    const odata = new ODataReadCL&lt;ICategory, ICategoryKeys&gt;(this, \"Categories\"); \n  }\n\n  public async onReadCustomer() {\n    // Initialize with a model name\n    const odata = new ODataReadCL(this, \"Customers\", \"myODataModelName\"); \n  }\n}\n\ninterface ICategory {\n  ID: string;\n  name: string;\n}\n\ninterface ICategoryKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataReadCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataReadCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onReadProduct: async function () {\n          // Initialize\n          const odata = new ODataReadCL(this, \"Products\"); \n        },\n\n        onReadCategory: async function () {\n          // Initialize with a model name\n          const odata = new ODataReadCL(this, \"Categories\", \"myODataModelName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_read/#read-request-get-entityset","title":"Read Request (GET EntitySet)","text":"<p>To send a GET (READ) request through the OData V2 model, you can use the read(): Promise&lt;EntityT[]&gt; method.</p> <p>Info</p> <ul> <li>The read() method runs asynchronously and can be awaited. </li> <li>If the request is successful, the read() method will return the data (multiple) of the target entity.</li> </ul> <p>Tip</p> <p>By default, the read() method of the sap.ui.model.odata.v2.ODataModel class returns an object that contains a single property named results. However, the OData Read class destructs the original object and returns the value of the results property which is an array containing the data of the <code>EntitySet</code>. The return type is derived from the generic <code>EntityT</code> type.</p> <p>Warning</p> <p>In the event of a failed GET request, the OData Read class will generate an error message. To ensure the error is identified and addressed, it is recommended to call the read() method within a try-catch block.</p>"},{"location":"odata_read/#error-type","title":"Error Type","text":"<p>In the event of a failed GET request, the object generated by the class can contain the properties outlined below.</p> Returns Description <code>object</code> \u00a0\u00a0\u00a0\u00a0headers?: <code>object</code> | <code>undefined</code> The HTTP response headers. \u00a0\u00a0\u00a0\u00a0message?: <code>string</code> | <code>undefined</code> The HTTP response message. \u00a0\u00a0\u00a0\u00a0responseText?: <code>string</code> | <code>undefined</code> The HTTP response text. \u00a0\u00a0\u00a0\u00a0statusCode?: <code>string</code> | <code>number</code> | <code>undefined</code> The status code of the HTTP request. \u00a0\u00a0\u00a0\u00a0statusText?: <code>string</code> | <code>undefined</code> The HTTP status text. <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataReadCL from \"ui5/antares/odata/v2/ODataReadCL\"; // Import the class\nimport { IError } from \"ui5/antares/types/common\"; // Import the error type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onReadProducts() {\n    // Initialize with a type\n    const odata = new ODataReadCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n\n    try {\n      // send the http request and get the result.\n      const result = await odata.read();\n\n      result.forEach((row: IProducts) =&gt; {\n        // write your logic\n      });\n    } catch (error) {\n      // catch the error\n      MessageBox.error((error as IError).message || \"Request failed\");\n    }\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string | null;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string | null;\n  supplierID: string | null;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataReadCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataReadCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onReadProducts: async function () {\n          // Initialize\n          const odata = new ODataReadCL(this, \"Products\"); \n\n          try {\n            // send the http request and get the result.\n            const result = await odata.read();\n\n            result.forEach((row) =&gt; {\n              // write your logic\n            });\n          } catch (error) {\n            // catch the error\n            MessageBox.error(error.message || \"Request failed\");\n          }          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_read/#read-by-key-request-get-entity","title":"Read By Key Request (GET Entity)","text":"<p>To send a GET (READ) request to retrieve a single data through the OData V2 model, you can use the readByKey(keys: EntityKeysT): Promise&lt;EntityT&gt; method.</p> <p>Info</p> <ul> <li>The readByKey() method runs asynchronously and can be awaited. </li> <li>If the request is successful, the readByKey() method will return the data (single) of the target entity.</li> </ul> <p>Warning</p> <p>In the event of a failed GET request, the OData Read class will generate an error message. To ensure the error is identified and addressed, it is recommended to call the readByKey() method within a try-catch block. </p>"},{"location":"odata_read/#error-type_1","title":"Error Type","text":"<p>In the event of a failed GET request, the object generated by the class can contain the properties outlined below.</p> Returns Description <code>object</code> \u00a0\u00a0\u00a0\u00a0headers?: <code>object</code> | <code>undefined</code> The HTTP response headers. \u00a0\u00a0\u00a0\u00a0message?: <code>string</code> | <code>undefined</code> The HTTP response message. \u00a0\u00a0\u00a0\u00a0responseText?: <code>string</code> | <code>undefined</code> The HTTP response text. \u00a0\u00a0\u00a0\u00a0statusCode?: <code>string</code> | <code>number</code> | <code>undefined</code> The status code of the HTTP request. \u00a0\u00a0\u00a0\u00a0statusText?: <code>string</code> | <code>undefined</code> The HTTP status text. <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataReadCL from \"ui5/antares/odata/v2/ODataReadCL\"; // Import the class\nimport { IError } from \"ui5/antares/types/common\"; // Import the error type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onReadSingleProduct() {\n    // Initialize with a type\n    const odata = new ODataReadCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n\n    try {\n      // send the http request and get the result. Note: you need to specify the key values of the entity to read a single data\n      const result = await odata.readByKey({\n        ID: \"f60481d8-3426-4a91-a6a3-5e445a7deb46\"\n      });\n\n      MessageBox.information(\"Product with ID: \" + result.ID);\n    } catch (error) {\n      // catch the error\n      MessageBox.error((error as IError).message || \"Request failed\");\n    }\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string | null;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string | null;\n  supplierID: string | null;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataReadCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataReadCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onReadProduct: async function () {\n          // Initialize\n          const odata = new ODataReadCL(this, \"Products\"); \n\n          try {\n            // send the http request and get the result. Note: you need to specify the key values of the entity to read a single data\n            const result = await odata.readByKey({\n              ID: \"f60481d8-3426-4a91-a6a3-5e445a7deb46\"\n            });\n\n            MessageBox.information(\"Product with ID: \" + result.ID);\n          } catch (error) {\n            // catch the error\n            MessageBox.error(error.message || \"Request failed\");\n          }          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_read/#url-parameters","title":"URL Parameters","text":"<p>Prior to sending the GET request with the read() or readByKey() method, it is possible to set the URL parameters using the setUrlParameters() method.</p> Setter (setUrlParameters)Getter (getUrlParameters) <p> Parameter Type Mandatory Description urlParameters <code>Record&lt;string, string&gt;</code> Yes The URL parameters of the GET request </p> <p> Returns Description <code>Record&lt;string, string&gt; | undefined</code> Returns the value that was set using setUrlParameters() method. Default value is undefined </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataReadCL from \"ui5/antares/odata/v2/ODataReadCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onReadProduct() {\n    // Initialize with a type\n    const odata = new ODataReadCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n\n    // set the url parameters\n    odata.setUrlParameters({\n      \"$expand\": \"toProductLocations\"\n    });\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataReadCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataReadCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onReadProduct: async function () {\n          // Initialize\n          const odata = new ODataReadCL(this, \"Products\"); \n\n          // set the url parameters\n          odata.setUrlParameters({\n            \"$expand\": \"toProductLocations\"\n          });         \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_read/#filters","title":"Filters","text":"<p>To execute the read() method with filters, two different methods are available.</p> Setter (addFilter)Setter (setFilters)Getter (getFilters) <p>This method enables the user to add filters individually.</p> <p> Parameter Type Mandatory Description filter Filter Yes The filter object </p> <p>This method enables users to apply multiple filters simultaneously.</p> <p>Attention</p> <p>This method overwrites all the filters that have been added with the addFilter() method or set with the setFilters() method.</p> <p> Parameter Type Mandatory Description filters Filter[] Yes The array of filter objects </p> <p> Returns Description Filter[] Returns all the filters that were added using the addFilter() method or set using the setFilters() method. Default value is <code>[]</code> </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataReadCL from \"ui5/antares/odata/v2/ODataReadCL\"; // Import the class\nimport Filter from \"sap/ui/model/Filter\"; // Import Filter class\nimport FilterOperator from \"sap/ui/model/FilterOperator\"; // Import FilterOperator enum\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onReadProduct() {\n    // Initialize with a type\n    const odata = new ODataReadCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n    const nameFilter = new Filter(\"name\", FilterOperator.Contains, \"smartphone\");\n    const priceFilter = new Filter(\"price\", FilterOperator.GT, 1500);\n\n    // add the filters one by one\n    odata.addFilter(nameFilter);\n    odata.addFilter(priceFilter);\n  }\n\n  public async onReadCategory() {\n    // Initialize\n    const odata = new ODataReadCL(this, \"Categories\"); \n    const nameFilter = new Filter(\"name\", FilterOperator.Contains, \"smartphone\");\n    const priceFilter = new Filter(\"price\", FilterOperator.GT, 1500);\n\n    // set the filters at once\n    odata.setFilters([nameFilter, priceFilter]);\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataReadCL\", // Import the class\n    \"sap/ui/model/Filter\", // Import Filter class\n    \"sap/ui/model/FilterOperator\" // Import FilterOperator enum\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataReadCL, Filter, FilterOperator) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onReadProduct: async function () {\n          // Initialize\n          const odata = new ODataReadCL(this, \"Products\"); \n          const nameFilter = new Filter(\"name\", FilterOperator.Contains, \"smartphone\");\n          const priceFilter = new Filter(\"price\", FilterOperator.GT, 1500);\n\n          // add the filters one by one\n          odata.addFilter(nameFilter);\n          odata.addFilter(priceFilter);        \n        },\n\n        onReadCategory: async function () {\n          // Initialize\n          const odata = new ODataReadCL(this, \"Categories\"); \n          const nameFilter = new Filter(\"name\", FilterOperator.Contains, \"smartphone\");\n          const priceFilter = new Filter(\"price\", FilterOperator.GT, 1500);\n\n          // set the filters at once\n          odata.setFilters([nameFilter, priceFilter]);          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_read/#sorters","title":"Sorters","text":"<p>To execute the read() method with sorters, two different methods are available.</p> Setter (addSorter)Setter (setSorters)Getter (getSorters) <p>This method enables the user to add sorters individually.</p> <p> Parameter Type Mandatory Description sorter Sorter Yes The sorter object </p> <p>This method enables users to apply multiple sorters simultaneously.</p> <p>Attention</p> <p>This method overwrites all the sorters that have been added with the addSorter() method or set with the setSorters() method.</p> <p> Parameter Type Mandatory Description sorters Sorter[] Yes The array of sorter objects </p> <p> Returns Description Sorter[] Returns all the sorters that were added using the addSorter() method or set using the setSorters() method. Default value is <code>[]</code> </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataReadCL from \"ui5/antares/odata/v2/ODataReadCL\"; // Import the class\nimport Sorter from \"sap/ui/model/Sorter\"; // Import the Sorter class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onReadProduct() {\n    // Initialize with a type\n    const odata = new ODataReadCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n    const nameSorter = new Sorter(\"name\");\n    const priceSorter = new Sorter(\"price\", true); // descending\n\n    // add the sorters one by one\n    odata.addSorter(nameSorter);\n    odata.addSorter(priceSorter);\n  }\n\n  public async onReadCategory() {\n    // Initialize\n    const odata = new ODataReadCL(this, \"Categories\"); \n    const nameSorter = new Sorter(\"name\");\n    const priceSorter = new Sorter(\"price\", true); // descending\n\n    // set the sorters at once\n    odata.setSorters([nameSorter, priceSorter]);\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataReadCL\", // Import the class\n    \"sap/ui/model/Sorter\" // Import the Sorter class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataReadCL, Sorter) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onReadProduct: async function () {\n          // Initialize\n          const odata = new ODataReadCL(this, \"Products\"); \n          const nameSorter = new Sorter(\"name\");\n          const priceSorter = new Sorter(\"price\", true); // descending\n\n          // add the sorters one by one\n          odata.addSorter(nameSorter);\n          odata.addSorter(priceSorter);      \n        },\n\n        onReadCategory: async function () {\n          // Initialize\n          const odata = new ODataReadCL(this, \"Categories\"); \n          const nameSorter = new Sorter(\"name\");\n          const priceSorter = new Sorter(\"price\", true); // descending\n\n          // set the sorters at once\n          odata.setSorters([nameSorter, priceSorter]);         \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_read/#additional-response-info","title":"Additional Response Info","text":"<p>The read() and the readByKey() methods return the data of the target entity. However, you may require further information such as the <code>status code</code> and <code>headers</code>.</p> <p>Once the read() or the readByKey() function has been completed, the getResponse() method can be utilized to obtain further details.</p> Returns Description <code>object</code> \u00a0\u00a0\u00a0\u00a0$reported?: <code>boolean</code> | <code>undefined</code> \u00a0\u00a0\u00a0\u00a0body?: <code>string</code> | <code>undefined</code> The HTTP body \u00a0\u00a0\u00a0\u00a0headers?: <code>object</code> | <code>undefined</code> The HTTP response headers. \u00a0\u00a0\u00a0\u00a0statusCode?: <code>string</code> | <code>number</code> | <code>undefined</code> The status code of the HTTP request. \u00a0\u00a0\u00a0\u00a0statusText?: <code>string</code> | <code>undefined</code> The HTTP status text. \u00a0\u00a0\u00a0\u00a0_imported?: <code>boolean</code> | <code>undefined</code> \u00a0\u00a0\u00a0\u00a0data?: <code>{ results: EntityT[] }</code> | <code>undefined</code> The data that was fetched <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataReadCL from \"ui5/antares/odata/v2/ODataReadCL\"; // Import the class\nimport { IError } from \"ui5/antares/types/common\"; // Import the error type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onReadProduct() {\n    // Initialize with a type\n    const odata = new ODataReadCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n\n    try {\n      // send the http request and get the result\n      const result = await odata.readByKey({\n        ID: \"3ccb5dd2-cc12-483a-b569-a6ec844f8f0b\"\n      });\n\n      MessageBox.information(result.ID + \" was fetched.\");\n\n      // get the additional response info\n      const response = odata.getResponse();\n\n      if (response) {\n        console.log(\"Status Code: \" + response.statusCode);\n      }\n    } catch (error) {\n      // catch the error\n      MessageBox.error((error as IError).message || \"Request failed\");\n    }\n  }\n\n}\n\ninterface IProducts {\n  ID: string;\n  name: string;\n  description: string;\n  brand: string;\n  price: number;\n  currency: string;\n  quantityInStock: number;\n  categoryID: string;\n  supplierID: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataReadCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataReadCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onReadProduct: async function () {\n          // Initialize\n          const odata = new ODataReadCL(this, \"Products\"); \n\n          try {\n            // send the http request and get the result\n            const result = await odata.readByKey({\n              ID: \"3ccb5dd2-cc12-483a-b569-a6ec844f8f0b\"\n            });\n\n            MessageBox.information(result.ID + \" was fetched.\");\n\n            // get the additional response info\n            const response = odata.getResponse();\n\n            if (response) {\n              console.log(\"Status Code: \" + response.statusCode);\n            }            \n          } catch (error) {\n            // catch the error\n            MessageBox.error(error.message || \"Request failed\");\n          }          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_update/","title":"OData Update","text":"<p>The ODataUpdateCL class leverages the sap.ui.model.odata.v2.ODataModel to facilitate the handling of PATCH/MERGE/PUT (UPDATE) requests in a promisified manner.</p>"},{"location":"odata_update/#constructor","title":"Constructor","text":"<p>In order to utilise the functionality of ODataUpdateCL, it is necessary to initialise the object.</p> Parameter Type Mandatory Default Value Description controller sap.ui.core.mvc.Controller Yes The controller object (usually <code>this</code> object) entityPath <code>string</code> Yes The name of the EntitySet. It can start with a \"/\" (slash) modelName? <code>string</code> No <code>undefined</code> The name of the OData V2 model which can be found on the manifest.json file. Leave this parameter undefined if the name of the OData model = \"\" (empty string) <p>Tip for TypeScript</p> <p>The ODataUpdateCL&lt;EntityT, EntityKeysT&gt; is a generic class and can be initialized with 2 types.</p> <ul> <li>The <code>EntityT</code> type contains all properties of the <code>EntitySet</code> that is specified on the class constructor.</li> <li>The <code>EntityKeysT</code> type contains the key properties of the <code>EntitySet</code> that is specified on the class constructor.</li> </ul> <p>The <code>EntityT</code> type is used as the type for the <code>data</code> parameter of the setData(data: EntityT) method and as the return type for the getData(): EntityT and update(): Promise&lt;EntityT&gt; methods.</p> <p>The <code>EntityKeysT</code> type is used as the type for the <code>keys</code> parameter of the update(keys: EntityKeysT) method.</p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataUpdateCL from \"ui5/antares/odata/v2/ODataUpdateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onUpdateProduct() {\n    // Initialize without a type\n    const odata = new ODataUpdateCL(this, \"Products\"); \n  }\n\n  public async onUpdateCategory() {\n    // Initialize with a type\n    const odata = new ODataUpdateCL&lt;ICategory, ICategoryKeys&gt;(this, \"Categories\"); \n  }\n\n  public async onUpdateCustomer() {\n    // Initialize with a model name\n    const odata = new ODataUpdateCL(this, \"Customers\", \"myODataModelName\"); \n  }\n}\n\n// The properties that will be updated should not be optional\ninterface ICategory {\n  ID: string;\n  name: string;\n}\n\ninterface ICategoryKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataUpdateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataUpdateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onUpdateProduct: async function () {\n          // Initialize\n          const odata = new ODataUpdateCL(this, \"Products\"); \n        },\n\n        onUpdateCategory: async function () {\n          // Initialize with a model name\n          const odata = new ODataUpdateCL(this, \"Categories\", \"myODataModelName\");\n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_update/#set-data","title":"Set Data","text":"<p>To define the data that will be transmitted via the UPDATE HTTP request body, the setData() method can be utilized.</p> Setter (setData)Getter (getData) <p> Parameter Type Mandatory Description data <code>EntityT</code> Yes The data that will be sent via the UPDATE HTTP request body </p> <p> Returns Description <code>EntityT</code> Returns the value that was set using setData() method. Default value is undefined </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataUpdateCL from \"ui5/antares/odata/v2/ODataUpdateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onUpdateProduct() {\n    // Initialize with a type\n    const odata = new ODataUpdateCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n\n    // set the http body to update\n    odata.setData({\n      name: \"New Product Name\",\n      description: \"New Description\"\n    });\n  }\n\n}\n\n// The properties that will be updated should not be optional\ninterface IProducts {\n  ID?: string;\n  name: string;\n  description: string;\n  brand?: string;\n  price?: number;\n  currency?: string;\n  quantityInStock?: number;\n  categoryID?: string;\n  supplierID?: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataUpdateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataUpdateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onUpdateProduct: async function () {\n          // Initialize\n          const odata = new ODataUpdateCL(this, \"Products\"); \n\n          // set the http body to update\n          odata.setData({\n            name: \"New Product Name\",\n            description: \"New Description\"\n          });\n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_update/#update-request","title":"Update Request","text":"<p>To send a PATCH/MERGE/PUT (UPDATE) request through the OData V2 model, you can use the update(keys: EntityKeysT) method.</p> <p>Attention</p> <p>It is a prerequisite that data be set using the setData() method before calling the update() method.</p> <p>Info</p> <ul> <li>The update() method runs asynchronously and can be awaited. </li> <li>If the request is successful, the update() method will return the data of the updated entity.</li> </ul> <p>Warning</p> <p>In the event of a failed UPDATE request, the OData Update class will generate an error message. To ensure the error is identified and addressed, it is recommended to call the update() method within a try-catch block.</p>"},{"location":"odata_update/#error-type","title":"Error Type","text":"<p>In the event of a failed UPDATE request, the object generated by the class can contain the properties outlined below.</p> Returns Description <code>object</code> \u00a0\u00a0\u00a0\u00a0headers?: <code>object</code> | <code>undefined</code> The HTTP response headers. \u00a0\u00a0\u00a0\u00a0message?: <code>string</code> | <code>undefined</code> The HTTP response message. \u00a0\u00a0\u00a0\u00a0responseText?: <code>string</code> | <code>undefined</code> The HTTP response text. \u00a0\u00a0\u00a0\u00a0statusCode?: <code>string</code> | <code>number</code> | <code>undefined</code> The status code of the HTTP request. \u00a0\u00a0\u00a0\u00a0statusText?: <code>string</code> | <code>undefined</code> The HTTP status text. <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataUpdateCL from \"ui5/antares/odata/v2/ODataUpdateCL\"; // Import the class\nimport { IError } from \"ui5/antares/types/common\"; // Import the error type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onUpdateProduct() {\n    // Initialize with a type\n    const odata = new ODataUpdateCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n\n    // set the http body to update\n    odata.setData({\n      name: \"New Product Name\",\n      description: \"New Description\"\n    });\n\n    try {\n      // send the http request and get the result. Note: You have to specify the key values of the entity that will be updated\n      const result = await odata.update({\n        ID: \"3ccb5dd2-cc12-483a-b569-a6ec844f8f0b\"\n      });\n\n      MessageBox.information(\"The entity with the following ID: \" + result.ID + \" was updated.\");\n    } catch (error) {\n      // catch the error\n      MessageBox.error((error as IError).message || \"Request failed\");\n    }\n  }\n\n}\n\n// The properties that will be updated should not be optional\ninterface IProducts {\n  ID?: string;\n  name: string;\n  description: string;\n  brand?: string;\n  price?: number;\n  currency?: string;\n  quantityInStock?: number;\n  categoryID?: string;\n  supplierID?: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataUpdateCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataUpdateCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onUpdateProduct: async function () {\n          // Initialize\n          const odata = new ODataUpdateCL(this, \"Products\"); \n\n          // set the http body to update\n          odata.setData({\n            name: \"New Product Name\",\n            description: \"New Description\"\n          });\n\n          try {\n            // send the http request and get the result. Note: You have to specify the key values of the entity that will be updated\n            const result = await odata.update({\n              ID: \"3ccb5dd2-cc12-483a-b569-a6ec844f8f0b\"\n            });\n\n            MessageBox.information(\"The entity with the following ID: \" + result.ID + \" was updated.\");\n          } catch (error) {\n            // catch the error\n            MessageBox.error(error.message || \"Request failed\");\n          }          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_update/#url-parameters","title":"URL Parameters","text":"<p>Prior to sending the UPDATE request with the update() method, it is possible to set the URL parameters using the setUrlParameters() method.</p> Setter (setUrlParameters)Getter (getUrlParameters) <p> Parameter Type Mandatory Description urlParameters <code>Record&lt;string, string&gt;</code> Yes The URL parameters of the UPDATE request </p> <p> Returns Description <code>Record&lt;string, string&gt; | undefined</code> Returns the value that was set using setUrlParameters() method. Default value is undefined </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataUpdateCL from \"ui5/antares/odata/v2/ODataUpdateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onUpdateProduct() {\n    // Initialize with a type\n    const odata = new ODataUpdateCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n\n    // set the url parameters\n    odata.setUrlParameters({\n      \"$expand\": \"toProductLocations\"\n    });\n  }\n\n}\n\n// The properties that will be updated should not be optional\ninterface IProducts {\n  ID?: string;\n  name: string;\n  description: string;\n  brand?: string;\n  price?: number;\n  currency?: string;\n  quantityInStock?: number;\n  categoryID?: string;\n  supplierID?: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataUpdateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataUpdateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onUpdateProduct: async function () {\n          // Initialize\n          const odata = new ODataUpdateCL(this, \"Products\"); \n\n          // set the url parameters\n          odata.setUrlParameters({\n            \"$expand\": \"toProductLocations\"\n          });         \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_update/#refresh-after-change","title":"Refresh After Change","text":"<p>The OData V2 model will be automatically refreshed after the UPDATE request has been completed.</p> <p>To change the default behavior, the setRefreshAfterChange() method can be utilized.</p> Setter (setRefreshAfterChange)Getter (getRefreshAfterChange) <p> Parameter Type Mandatory Description refreshAfterChange <code>boolean</code> Yes If set to false, the OData V2 model will not be refreshed after the request has been completed </p> <p> Returns Description <code>boolean</code> Returns the value that was set using setRefreshAfterChange() method. Default value is true </p> <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataUpdateCL from \"ui5/antares/odata/v2/ODataUpdateCL\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onUpdateProduct() {\n    // Initialize with a type\n    const odata = new ODataUpdateCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n\n    // deactivate the auto model refresh\n    odata.setRefreshAfterChange(false);\n  }\n\n}\n\n// The properties that will be updated should not be optional\ninterface IProducts {\n  ID?: string;\n  name: string;\n  description: string;\n  brand?: string;\n  price?: number;\n  currency?: string;\n  quantityInStock?: number;\n  categoryID?: string;\n  supplierID?: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataUpdateCL\" // Import the class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataUpdateCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onUpdateProduct: async function () {\n          // Initialize\n          const odata = new ODataUpdateCL(this, \"Products\"); \n\n          // deactivate the auto model refresh\n          odata.setRefreshAfterChange(false);      \n        }\n      });\n\n    });\n</code></pre>"},{"location":"odata_update/#additional-response-info","title":"Additional Response Info","text":"<p>The update() method returns the data of the successfully updated entity. However, you may require further information such as the <code>status code</code> and <code>headers</code>.</p> <p>Once the update() function has been completed, the getResponse() method can be utilized to obtain further details.</p> Returns Description <code>object</code> \u00a0\u00a0\u00a0\u00a0$reported?: <code>boolean</code> | <code>undefined</code> \u00a0\u00a0\u00a0\u00a0body?: <code>string</code> | <code>undefined</code> The HTTP body \u00a0\u00a0\u00a0\u00a0headers?: <code>object</code> | <code>undefined</code> The HTTP response headers. \u00a0\u00a0\u00a0\u00a0statusCode?: <code>string</code> | <code>number</code> | <code>undefined</code> The status code of the HTTP request. \u00a0\u00a0\u00a0\u00a0statusText?: <code>string</code> | <code>undefined</code> The HTTP status text. \u00a0\u00a0\u00a0\u00a0_imported?: <code>boolean</code> | <code>undefined</code> \u00a0\u00a0\u00a0\u00a0data?: <code>EntityT</code> | <code>undefined</code> The data that was updated <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataUpdateCL from \"ui5/antares/odata/v2/ODataUpdateCL\"; // Import the class\nimport { IError } from \"ui5/antares/types/common\"; // Import the error type\nimport MessageBox from \"sap/m/MessageBox\";\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onUpdateProduct() {\n    // Initialize with a type\n    const odata = new ODataUpdateCL&lt;IProducts, IProductKeys&gt;(this, \"Products\"); \n\n    // set the http body\n    odata.setData({\n      name: \"New Product Name\",\n      description: \"New Description\"\n    });\n\n    try {\n      // send the http request and get the result\n      const result = await odata.update({\n        ID: \"3ccb5dd2-cc12-483a-b569-a6ec844f8f0b\"\n      });\n\n      MessageBox.information(result.ID + \" was updated.\");\n\n      // get the additional response info\n      const response = odata.getResponse();\n\n      if (response) {\n        console.log(\"Status Code: \" + response.statusCode);\n      }\n    } catch (error) {\n      // catch the error\n      MessageBox.error((error as IError).message || \"Request failed\");\n    }\n  }\n\n}\n\n// The properties that will be updated should not be optional\ninterface IProducts {\n  ID?: string;\n  name: string;\n  description: string;\n  brand?: string;\n  price?: number;\n  currency?: string;\n  quantityInStock?: number;\n  categoryID?: string;\n  supplierID?: string;\n}\n\ninterface IProductKeys {\n  ID: string;\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/odata/v2/ODataUpdateCL\", // Import the class\n    \"sap/m/MessageBox\"\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ODataUpdateCL, MessageBox) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onUpdateProduct: async function () {\n          // Initialize\n          const odata = new ODataUpdateCL(this, \"Products\"); \n\n          // set the http body\n          odata.setData({\n            name: \"New Product Name\",\n            description: \"New Description\"\n          });\n\n          try {\n            // send the http request and get the result\n            const result = await odata.update({\n              ID: \"3ccb5dd2-cc12-483a-b569-a6ec844f8f0b\"\n            });\n\n            MessageBox.information(result.ID + \" was updated.\");\n\n            // get the additional response info\n            const response = odata.getResponse();\n\n            if (response) {\n              console.log(\"Status Code: \" + response.statusCode);\n            }            \n          } catch (error) {\n            // catch the error\n            MessageBox.error(error.message || \"Request failed\");\n          }          \n        }\n      });\n\n    });\n</code></pre>"},{"location":"value_help/","title":"Value Help","text":"<p>The UI5 Antares library includes a built-in value help class that can be used in conjunction with the Entry Create and Entry Update classes, or as a standalone component with any sap.m.Input control within a SAPUI5 application.</p> <p>Attention</p> <p>Please be advised that the Value Help class is only available for the SIMPLE Form when it is used in conjunction with the Entry Create and Entry Update classes. Should you require further information, please refer to the Form Type section.</p>"},{"location":"value_help/#features","title":"Features","text":"<p>1) The sap.ui.comp.valuehelpdialog.ValueHelpDialog is generated with a table and filter bar consisting of the <code>EntitySet</code> properties defined in the class constructor.</p> <p>2) The Value Help class is responsible for managing the search functionality accessible via the filter bar or search field.</p> <p>3) The Value Help class is responsible for writing the selected value from the table into the input field.</p> <p>4) The Value Help class enables the initial filters to be applied when the Value Help Dialog is first initiated.</p> <p>5) The Value Help class enables users to attach a function that will be triggered immediately upon opening the dialog or selecting a value from the table.</p> <p>Warning</p> <p>Please note that the Value Help class only supports a single selection.</p> <p>Info</p> <p>The ValueHelpCL class offers all its features for both entry class-integrated (Entry Create/Entry Update) and standalone usage, even if they are not shown in the examples.</p>"},{"location":"value_help/#constructor","title":"Constructor","text":"<p>You must initialize an object from ValueHelpCL class in order to use it.</p> Parameter Type Mandatory Default Value Description controller sap.ui.core.mvc.Controller Yes The controller object (usually <code>this</code>) settings <code>object</code> Yes \u00a0\u00a0\u00a0\u00a0propertyName <code>string</code> Yes This is the property of the entity for which the value help is being created. \u00a0\u00a0\u00a0\u00a0valueHelpEntity <code>string</code> Yes This is the name of the <code>EntitySet</code> that will be bound to the table in the Value Help Dialog \u00a0\u00a0\u00a0\u00a0valueHelpProperty <code>string</code> Yes Once a selection has been made in the table, this parameter defines the property of the <code>valueHelpEntity</code> to be used for setting the value of the property defined in the <code>propertyName</code> parameter. \u00a0\u00a0\u00a0\u00a0readonlyProperties? <code>string[]</code> No <code>[]</code> The properties of the <code>valueHelpEntity</code> that are displayed in the columns of the table \u00a0\u00a0\u00a0\u00a0excludedFilterProperties? <code>string[]</code> No <code>[]</code> The properties of the <code>valueHelpEntity</code> that are excluded from the filter bar \u00a0\u00a0\u00a0\u00a0title? <code>string</code> No <code>${valueHelpEntity}</code> The title of the Value Help Dialog \u00a0\u00a0\u00a0\u00a0searchPlaceholder? <code>string</code> No Search <code>${valueHelpEntity}</code> The placeholder in the search field of the Value Help Dialog \u00a0\u00a0\u00a0\u00a0namingStrategy? NamingStrategies No <code>CAMEL_CASE</code> The naming strategy that is used to generate the labels for filter bar and table column headers \u00a0\u00a0\u00a0\u00a0resourceBundlePrefix? <code>string</code> No <code>antaresVH</code> The resource bundle prefix that is used for the i18n text lookup \u00a0\u00a0\u00a0\u00a0useMetadataLabels? <code>boolean</code> No <code>false</code> Indicates whether the labels should be derived from the metadata to be used in the filter bar and table column headers \u00a0\u00a0\u00a0\u00a0filterModelName? <code>string</code> No <code>UI5AntaresVHFilterModel</code> The JSONModel name of the filter bar which is needed by the ValueHelpCL class \u00a0\u00a0\u00a0\u00a0filterCaseSensitive? <code>boolean</code> No <code>false</code> Set to true for case sensitive search in the filterbar modelName? <code>string</code> No <code>undefined</code> The name of the OData V2 model. Leave this parameter undefined if the name of the OData model = \"\" (empty string)"},{"location":"value_help/#dialog-generation-process","title":"Dialog Generation Process","text":"<p>The following steps outline the process followed by the ValueHelpCL class when creating the Value Help Dialog.</p> <p>1) The ValueHelpCL class is responsible for creating a table and assigning the <code>settings.valueHelpProperty</code> as the first column within the table.</p> <p>2) The ValueHelpCL class adds all the properties specified in the <code>settings.readonlyProperties</code> array as columns to the table adjacent to the first column.</p> <p>3) The ValueHelpCL class is responsible for binding the <code>EntitySet</code> specified in the <code>settings.valueHelpEntity</code> to the newly created table.</p> <p>4) The ValueHelpCL class is responsible for creating a filter bar and UI controls (sap.m.Input, sap.m.DatePicker, etc.) for the properties specified through the <code>settings.valueHelpProperty</code> and <code>settings.readonlyProperties</code> parameters. It should be noted that the properties defined in the <code>settings.excludedFilterProperties</code> are not included in the filter bar.</p> <p>5) The ValueHelpCL class is responsible for creating a JSONModel to facilitate the filter bar.</p> <p>6) The ValueHelpCL class is responsible for creating a search field.</p> <p>7) The ValueHelpCL class utilizes internal functions to facilitate the selection and filter bar search.</p> <p>Tip</p> <p>By default, all properties specified through the readonlyProperties parameter are included in the filter bar. To exclude properties from the filter bar, use the excludedFilterProperties parameter. Please note that properties excluded from the filter bar will still be visible in the table of the Value Help Dialog.</p> <p>Attention</p> <p>The key property specified in the valueHelpProperty parameter cannot be excluded from the filter bar.</p>"},{"location":"value_help/#label-generation","title":"Label Generation","text":"<p>The ValueHelpCL class employs the same methodology as that defined in Label Generation section for the generation of labels for table column headers and filter bar elements. Please refer to the list below for settings that can be applied in different label generation scenarios.</p> <p>Scenario 1: To enable the use of labels defined in the OData metadata, please set the settings.useMetadataLabels parameter to true.</p> <p>Scenario 2: To utilize i18n labels on the label generation, you have two options:</p> <ol> <li>Use the default format (antaresVH + <code>valueHelpEntity</code> + propertyName) for the text keys in your i18n file.</li> <li>Modify the prefix by using the settings.resourceBundlePrefix parameter.</li> </ol> <p>Scenario 3: In order for the library to generate labels from the technical property names of the <code>EntitySet</code> that is defined, it is necessary to set the correct value for the settings.namingStrategy parameter.</p> <p>Example</p> <p>We will consider the following scenario: You have an <code>EntitySet</code> named Products with the following properties: <code>ID</code>, <code>name</code>, <code>categoryID</code>, and <code>supplierID</code>. You also have other <code>EntitySet</code>s named Suppliers and Categories, which you intend to use as a value help for the Products-supplierID and Products-categoryID properties.</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport EntryCreateCL from \"ui5/antares/entry/v2/EntryCreateCL\"; // Import the class\nimport ValueHelpCL from \"ui5/antares/ui/ValueHelpCL\"; // Import the Value Help class\nimport { FormTypes } from \"ui5/antares/types/entry/enums\"; // Import the FormTypes enum\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  public async onCreateProduct() {\n    const entry = new EntryCreateCL(this, \"Products\");\n\n    // Create an object from the ValueHelpCL class\n    const categoryVH = new ValueHelpCL(this, {\n        propertyName: \"categoryID\", // This is the property of the Products entity\n        valueHelpEntity: \"Categories\", // This is the entity set that provides data\n        valueHelpProperty: \"ID\", // This is the property of the entity set that will be mapped to propertyName after the selection is made\n        readonlyProperties: [\"name\"] // These properties will be the columns of the table on the Value Help Dialog\n    });\n\n    // Create an object from the ValueHelpCL class\n    const supplierVH = new ValueHelpCL(this, {\n        propertyName: \"supplierID\", // This is the property of the Products entity\n        valueHelpEntity: \"Suppliers\", // This is the entity set that provides data\n        valueHelpProperty: \"ID\", // This is the property of the entity set that will be mapped to propertyName after the selection is made\n        readonlyProperties: [ // These properties will be the columns of the table on the Value Help Dialog\n          \"companyName\",\n          \"contactName\",\n          \"contactTitle\",\n          \"country\",\n          \"city\",\n          \"paymentTerms\"  \n        ],\n        excludedFilterProperties: [\"contactName\"] // These properties will be excluded from the filterbar\n    });    \n\n    // Set the form type to SIMPLE to be able to use Value Help feature\n    entry.setFormType(FormTypes.SIMPLE);\n\n    // Add the value help object for categoryID\n    entry.addValueHelp(categoryVH);\n\n    // Add the value help object for supplierID\n    entry.addValueHelp(supplierVH);\n\n    entry.createNewEntry(); \n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/entry/v2/EntryCreateCL\", // Import the class\n    \"ui5/antares/ui/ValueHelpCL\", // Import the Value Help class\n    \"ui5/antares/types/entry/enums\" // Import the enums\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, EntryCreateCL, ValueHelpCL, EntryEnums) {\n      \"use strict\";\n\n      // Destructure the object to retrieve the FormTypes enum\n      const { FormTypes } = EntryEnums;\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n          const entry = new EntryCreateCL(this, \"Products\");\n\n          // Create an object from the ValueHelpCL class\n          const categoryVH = new ValueHelpCL(this, {\n              propertyName: \"categoryID\", // This is the property of the Products entity\n              valueHelpEntity: \"Categories\", // This is the entity set that provides data\n              valueHelpProperty: \"ID\", // This is the property of the entity set that will be mapped to propertyName after the selection is made\n              readonlyProperties: [\"name\"] // These properties will be the columns of the table on the Value Help Dialog\n          });\n\n          // Create an object from the ValueHelpCL class\n          const supplierVH = new ValueHelpCL(this, {\n              propertyName: \"supplierID\", // This is the property of the Products entity\n              valueHelpEntity: \"Suppliers\", // This is the entity set that provides data\n              valueHelpProperty: \"ID\", // This is the property of the entity set that will be mapped to propertyName after the selection is made\n              readonlyProperties: [ // These properties will be the columns of the table on the Value Help Dialog\n                \"companyName\",\n                \"contactName\",\n                \"contactTitle\",\n                \"country\",\n                \"city\",\n                \"paymentTerms\"  \n              ],\n              excludedFilterProperties: [\"contactName\"] // These properties will be excluded from the filterbar\n          });    \n\n          // Set the form type to SIMPLE to be able to use Value Help feature\n          entry.setFormType(FormTypes.SIMPLE);\n\n          // Add the value help object for categoryID\n          entry.addValueHelp(categoryVH);\n\n          // Add the value help object for supplierID\n          entry.addValueHelp(supplierVH);\n\n          entry.createNewEntry(); \n        }\n      });\n\n    });\n</code></pre> <p></p> categoryID supplierID"},{"location":"value_help/#attach-after-select","title":"Attach After Select","text":"<p>It is possible to attach a function that will be executed after the user selects a row in the Value Help Dialog table. </p> <p>If the ValueHelpCL class is able to retrieve the object from the selected row, it will be passed as a parameter to the attached function. Otherwise, only the value of the <code>valueHelpProperty</code> will be passed as a parameter.</p> <p>To attach a function, the attachAfterSelect() method can be utilized.</p> <p>Setter (attachAfterSelect)</p> Parameter Type Mandatory Description afterSelect <code>(data: string | object) =&gt; void</code> Yes The function that will be executed after the selection listener? <code>object</code> No The default listener is the controller from constructor <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ValueHelpCL from \"ui5/antares/ui/ValueHelpCL\"; // Import the Value Help class\nimport { Input$ValueHelpRequestEvent } from \"sap/m/Input\"; // Import the Value Help Request event type\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  // The parameter type should be Input$ValueHelpRequestEvent\n  public async onValueHelpRequest(event: Input$ValueHelpRequestEvent) {\n\n    // Create an object from the ValueHelpCL class\n    const supplierVH = new ValueHelpCL(this, {\n        propertyName: \"STANDALONE\", // Since this is a mandatory param and not relevant for the standalone usage, you can set anything\n        valueHelpEntity: \"Suppliers\", // This is the entity set that provides data\n        valueHelpProperty: \"ID\", // This is the property of the entity set whose value will be set to the input\n        readonlyProperties: [ // These properties will be the columns of the table on the Value Help Dialog\n          \"companyName\",\n          \"contactName\",\n          \"contactTitle\",\n          \"country\",\n          \"city\",\n          \"paymentTerms\"  \n        ],\n        excludedFilterProperties: [\"contactName\"] // These properties will be excluded from the filterbar\n    });\n\n    // attach the function\n    supplierVH.attachAfterSelect(this.afterVHSelect, this);\n\n    // Pass the Input$ValueHelpRequestEvent to the public openValueHelpDialog method.\n    supplierVH.openValueHelpDialog(event);\n  }\n\n  private afterVHSelect(data: string | object) {\n    // here do the logic after the vh selection\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/ValueHelpCL\" // Import the Value Help class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ValueHelpCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onValueHelpRequest: async function (event) {\n          // Create an object from the ValueHelpCL class\n          const supplierVH = new ValueHelpCL(this, {\n              propertyName: \"STANDALONE\", // Since this is a mandatory param and not relevant for the standalone usage, you can set anything\n              valueHelpEntity: \"Suppliers\", // This is the entity set that provides data\n              valueHelpProperty: \"ID\", // This is the property of the entity set whose value will be set to the input\n              readonlyProperties: [ // These properties will be the columns of the table on the Value Help Dialog\n                \"companyName\",\n                \"contactName\",\n                \"contactTitle\",\n                \"country\",\n                \"city\",\n                \"paymentTerms\"  \n              ],\n              excludedFilterProperties: [\"contactName\"] // These properties will be excluded from the filterbar\n          });    \n\n          // attach the function\n          supplierVH.attachAfterSelect(this._afterVHSelect, this);\n\n          // Pass the event to the public openValueHelpDialog method.\n          supplierVH.openValueHelpDialog(event);\n        },\n\n        _afterVHSelect: function (data) {\n          // here do the logic after the vh selection\n        }\n      });\n\n    });\n</code></pre>"},{"location":"value_help/#attach-after-dialog-opened","title":"Attach After Dialog Opened","text":"<p>It is possible to attach a function that will be executed after the value help dialog is opened. </p> <p>The generated Value Help Dialog object will be passed as a parameter to the attached function.</p> <p>To attach a function, the attachAfterDialogOpened() method can be utilized.</p> <p>Setter (attachAfterDialogOpened)</p> Parameter Type Mandatory Description afterDialogOpened <code>(dialog: ValueHelpDialog) =&gt; void</code> Yes The function that will be executed after the value help dialog is opened listener? <code>object</code> No The default listener is the controller from constructor <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ValueHelpCL from \"ui5/antares/ui/ValueHelpCL\"; // Import the Value Help class\nimport { Input$ValueHelpRequestEvent } from \"sap/m/Input\"; // Import the Value Help Request event type\nimport ValueHelpDialog from \"sap/ui/comp/valuehelpdialog/ValueHelpDialog\"; // Import the ValueHelpDialog class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  // The parameter type should be Input$ValueHelpRequestEvent\n  public async onValueHelpRequest(event: Input$ValueHelpRequestEvent) {\n\n    // Create an object from the ValueHelpCL class\n    const supplierVH = new ValueHelpCL(this, {\n        propertyName: \"STANDALONE\", // Since this is a mandatory param and not relevant for the standalone usage, you can set anything\n        valueHelpEntity: \"Suppliers\", // This is the entity set that provides data\n        valueHelpProperty: \"ID\", // This is the property of the entity set whose value will be set to the input\n        readonlyProperties: [ // These properties will be the columns of the table on the Value Help Dialog\n          \"companyName\",\n          \"contactName\",\n          \"contactTitle\",\n          \"country\",\n          \"city\",\n          \"paymentTerms\"  \n        ],\n        excludedFilterProperties: [\"contactName\"] // These properties will be excluded from the filterbar\n    });\n\n    // attach the function\n    supplierVH.attachAfterDialogOpened(this.afterVHOpened, this);\n\n    // Pass the Input$ValueHelpRequestEvent to the public openValueHelpDialog method.\n    supplierVH.openValueHelpDialog(event);\n  }\n\n  private afterVHOpened(dialog: ValueHelpDialog) {\n    // here do the logic after the vh is opened\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/ValueHelpCL\" // Import the Value Help class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ValueHelpCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onValueHelpRequest: async function (event) {\n          // Create an object from the ValueHelpCL class\n          const supplierVH = new ValueHelpCL(this, {\n              propertyName: \"STANDALONE\", // Since this is a mandatory param and not relevant for the standalone usage, you can set anything\n              valueHelpEntity: \"Suppliers\", // This is the entity set that provides data\n              valueHelpProperty: \"ID\", // This is the property of the entity set whose value will be set to the input\n              readonlyProperties: [ // These properties will be the columns of the table on the Value Help Dialog\n                \"companyName\",\n                \"contactName\",\n                \"contactTitle\",\n                \"country\",\n                \"city\",\n                \"paymentTerms\"  \n              ],\n              excludedFilterProperties: [\"contactName\"] // These properties will be excluded from the filterbar\n          });    \n\n          // attach the function\n          supplierVH.attachAfterDialogOpened(this._afterVHOpened, this);\n\n          // Pass the event to the public openValueHelpDialog method.\n          supplierVH.openValueHelpDialog(event);\n        },\n\n        _afterVHOpened: function (dialog) {\n          // here do the logic after the vh is opened\n        }\n      });\n\n    });\n</code></pre>"},{"location":"value_help/#initial-filter-values","title":"Initial Filter Values","text":"<p>It is possible to set initial filter values that will be applied to the Value Help <code>EntitySet</code> when the Value Help Dialog is opened.</p> <p>Attention</p> <p>The properties included in the initial filter must either be equal to the <code>valueHelpProperty</code> or included in the <code>readonlyProperties</code> array. Any properties included in the <code>excludedFilterProperties</code> array will be ignored in the initial filter.</p> <p>To set the initial filter values, the setInitialFilters() method can be utilized.</p> <p>Setter (setInitialFilters)</p> Parameter Type Mandatory Description filters <code>IValueHelpInitialFilter[]</code> Yes The initial filter values <p>Example</p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ValueHelpCL from \"ui5/antares/ui/ValueHelpCL\"; // Import the Value Help class\nimport { Input$ValueHelpRequestEvent } from \"sap/m/Input\"; // Import the Value Help Request event type\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  // The parameter type should be Input$ValueHelpRequestEvent\n  public async onValueHelpRequest(event: Input$ValueHelpRequestEvent) {\n\n    // Create an object from the ValueHelpCL class\n    const supplierVH = new ValueHelpCL(this, {\n        propertyName: \"STANDALONE\", // Since this is a mandatory param and not relevant for the standalone usage, you can set anything\n        valueHelpEntity: \"Suppliers\", // This is the entity set that provides data\n        valueHelpProperty: \"ID\", // This is the property of the entity set whose value will be set to the input\n        readonlyProperties: [ // These properties will be the columns of the table on the Value Help Dialog\n          \"companyName\",\n          \"contactName\",\n          \"contactTitle\",\n          \"country\",\n          \"city\",\n          \"paymentTerms\"  \n        ],\n        excludedFilterProperties: [\"contactName\"] // These properties will be excluded from the filterbar\n    });\n\n    // set the initial filters\n    supplierVH.setInitialFilters([{\n      propertyName: \"companyName\",\n      value: \"ABC\"\n    }, {\n      propertyName: \"country\",\n      value: \"TR\"\n    }]);\n\n    // Pass the Input$ValueHelpRequestEvent to the public openValueHelpDialog method.\n    supplierVH.openValueHelpDialog(event);\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/ValueHelpCL\" // Import the Value Help class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ValueHelpCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onValueHelpRequest: async function (event) {\n          // Create an object from the ValueHelpCL class\n          const supplierVH = new ValueHelpCL(this, {\n              propertyName: \"STANDALONE\", // Since this is a mandatory param and not relevant for the standalone usage, you can set anything\n              valueHelpEntity: \"Suppliers\", // This is the entity set that provides data\n              valueHelpProperty: \"ID\", // This is the property of the entity set whose value will be set to the input\n              readonlyProperties: [ // These properties will be the columns of the table on the Value Help Dialog\n                \"companyName\",\n                \"contactName\",\n                \"contactTitle\",\n                \"country\",\n                \"city\",\n                \"paymentTerms\"  \n              ],\n              excludedFilterProperties: [\"contactName\"] // These properties will be excluded from the filterbar\n          });    \n\n          // set the initial filters\n          supplierVH.setInitialFilters([{\n            propertyName: \"companyName\",\n            value: \"ABC\"\n          }, {\n            propertyName: \"country\",\n            value: \"TR\"\n          }]);\n\n          // Pass the event to the public openValueHelpDialog method.\n          supplierVH.openValueHelpDialog(event);\n        }\n      });\n\n    });\n</code></pre>"},{"location":"value_help/#ivaluehelpinitialfilter-type-definition","title":"IValueHelpInitialFilter Type Definition","text":"Property Type Description IValueHelpInitialFilter <code>object</code> \u00a0\u00a0\u00a0\u00a0propertyName <code>string</code> The property name \u00a0\u00a0\u00a0\u00a0value <code>string</code> | <code>number</code> | <code>boolean</code> | <code>Date</code> The filter value of the property"},{"location":"value_help/#standalone-usage","title":"Standalone Usage","text":"<p>The ValueHelpCL class can also be utilized as a standalone component for any sap.m.Input control within a SAPUI5 application.</p> <p>Note</p> <p>All of the aforementioned features are also available for standalone use.</p> <p>Example</p> <p>Let us consider a scenario in which a sap.m.Input is present on an XML View. The objective is to create a Value Help Dialog when the valueHelpRequest event is triggered by the end user.</p> <p></p> TypeScriptJavaScript <pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport ValueHelpCL from \"ui5/antares/ui/ValueHelpCL\"; // Import the Value Help class\nimport { Input$ValueHelpRequestEvent } from \"sap/m/Input\"; // Import the Value Help Request event type\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class YourController extends Controller {\n  public onInit() {\n\n  }\n\n  // The parameter type should be Input$ValueHelpRequestEvent\n  public async onValueHelpRequest(event: Input$ValueHelpRequestEvent) {\n\n    // Create an object from the ValueHelpCL class\n    const supplierVH = new ValueHelpCL(this, {\n        propertyName: \"STANDALONE\", // Since this is a mandatory param and not relevant for the standalone usage, you can set anything\n        valueHelpEntity: \"Suppliers\", // This is the entity set that provides data\n        valueHelpProperty: \"ID\", // This is the property of the entity set whose value will be set to the input\n        readonlyProperties: [ // These properties will be the columns of the table on the Value Help Dialog\n          \"companyName\",\n          \"contactName\",\n          \"contactTitle\",\n          \"country\",\n          \"city\",\n          \"paymentTerms\"  \n        ],\n        excludedFilterProperties: [\"contactName\"] // These properties will be excluded from the filterbar\n    });    \n\n    // Pass the Input$ValueHelpRequestEvent to the public openValueHelpDialog method.\n    supplierVH.openValueHelpDialog(event);\n  }\n}\n</code></pre> <pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/ui/ValueHelpCL\" // Import the Value Help class\n], \n    /**\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\n     */\n    function (Controller, ValueHelpCL) {\n      \"use strict\";\n\n      return Controller.extend(\"your.apps.namespace.YourController\", {\n        onInit: function () {\n\n        },\n\n        onValueHelpRequest: async function (event) {\n          // Create an object from the ValueHelpCL class\n          const supplierVH = new ValueHelpCL(this, {\n              propertyName: \"STANDALONE\", // Since this is a mandatory param and not relevant for the standalone usage, you can set anything\n              valueHelpEntity: \"Suppliers\", // This is the entity set that provides data\n              valueHelpProperty: \"ID\", // This is the property of the entity set whose value will be set to the input\n              readonlyProperties: [ // These properties will be the columns of the table on the Value Help Dialog\n                \"companyName\",\n                \"contactName\",\n                \"contactTitle\",\n                \"country\",\n                \"city\",\n                \"paymentTerms\"  \n              ],\n              excludedFilterProperties: [\"contactName\"] // These properties will be excluded from the filterbar\n          });    \n\n          // Pass the event to the public openValueHelpDialog method.\n          supplierVH.openValueHelpDialog(event);\n        }\n      });\n\n    });\n</code></pre>"}]}